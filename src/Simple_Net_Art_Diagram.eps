%!PS-Adobe-3.1 EPSF-3.0%%Title: Simple_Net_Art_Diagram [Convert%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: tim whidden%%CreationDate: 4/12/04%%BoundingBox: 0 0 459 219%%HiResBoundingBox: 0 0 458.0215 218.4131%%CropBox: 0 0 458.0215 218.4131%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Simple_Net_Art_Diagram [Convert) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2004-04-12T13:21:24Z</xap:CreateDate>
  <xap:ModifyDate>2004-04-12T13:21:24Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>124</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXyXZzSWvnGDVHgtNe0fzBqmqX+g+Y4VVdVtbuOGb1La9WnNoIgavHsoFHVgBxyLNCaL+cfnjy15&#xA;I0Sz8vNYWVhH5fm1cWjW8kwV49XmtmjR5Ji9HCVJYt1NO1Chk+rfnv8AmTZaZrT/AFvTjc2F3oBi&#xA;nW0ZYhDrli9zJEUaZzSBkADcqnevYBVK5/zJ1a687eWvMepfVdTvfK915ysrbVLWNYY9Rh03S0lt&#xA;3AV5PttIaBW4/FtU1xQ9X/JPz5rvnrS9SbzBJp17Zy29pNBHb+iZALuOQXVvcW6S3HFI5YykfqUZ&#xA;l+0K4qXimg+X9W8u23lfTpbWHXfy6886vpbxpMqypYail/EsqioZQJoY3j/ylJH7J5ISUy8x/nt+&#xA;Y+u+T/Nt3aXFnptoiTW6WsTxRalZ8LuKHaMyvO3OCUiST014ufhIpitPXvMPma6X8pNNtrC/Ora5&#xA;5hhj0uyurAK8rySqRdSxKslC9tAkrfb+2m5GPReryjQPzk82+WfyaTSoZIYPNvlPWYdCvYL9DJ/o&#xA;j+oIS45DiEKen8J2Ce+K0zrRNW886f8AnxpWhebvM1rNXy5NcfV4Yxb21xNPqBijjiR3B9bhEjV3&#xA;PwsoFCWxQwLz/o3kqb86fzJTW47W3gj8sG8tZXKwsmoBLd45YmBVvWZvDd6kGoJBUpb5b8/ebfLi&#xA;J5h1V7dvMcPkVJ4b7U1uTKIX1xbe2ilWNm9QvCyyIxj5EsvJuNTihPp/+ci/Osvl6M29zZw3H6V1&#xA;fTheGBJLp0sLSO4seVrHNJH/AKRLIYpZEJReoPfFNJ75a/MP85NR86NoN7qmj2iaZpdjrurtLbnj&#xA;6MqxSXEKyRu4HFJT8YruNtjgWmJW3/OTPnybQvMFwtzYNdWWnwanZTCABObX8dnLbohk5lCsvNDI&#xA;Fk23BBBwqyXTvzl/MmLzmul319pl3YWvmu28uTiK1aJ54r8SkSofWk4iH0fh615DkTitPonCxdir&#xA;sVdirsVdirsVdirHf8Y/9qPVv+kX/m7Baad/jH/tR6t/0i/83Y2tO/xj/wBqPVv+kX/m7G1p3+Mf&#xA;+1Hq3/SL/wA3Y2tO/wAY/wDaj1b/AKRf+bsbWnf4x/7Uerf9Iv8Azdja07/GP/aj1b/pF/5uxtad&#xA;/jH/ALUerf8ASL/zdja0k1rH5NtLiS5tfI0tvczI0U08WlQI7xyCjozLQlWHUHrgtNLfq/kqlP8A&#xA;AclKcafomDpWtPv3xtfikXnXyZ5K816VHpsvlzVtJhSeK4eTS7C1gkkMAKxpIzxy1Ra/ZpirI4J/&#xA;LMC2Qj8nXSnTgFsWGmQqYaHl+640EfxfF8FN8bWlew1TQ9PtprWw8p3tnbXLM9xBBp8cUcjOKMzq&#xA;hAYsNiTja03baroltZrZW3lO9gs1kWdbaPT40iEsbrIkgRSF5K6KwalQQDhtaUmvPLjSX0jeTroy&#xA;amvDUnOmxE3Kfyzmv7wb9GrgtaVH1PQ5Fs1fyleuunEHTw2nxkW5WnEw1P7unEU406Y2tIN4fJbs&#xA;zP5ElZnPJydJgJLb7mvU742vxR36Y0f65b33+Fb767aRmC0uvqCerFERQxxvXkinwBphtaQs7+VL&#xA;i7a8n8kzy3jt6j3MmlwtIX68i5+KvvgtV1/P5X1GaafUPJdzeTXChJ5Z9MhlaRBSiuz1LAcRscbW&#xA;mJ+b/wAvvIPmaWwkk8sappv6PaZljsdNs0ilM6xoxmjljlRyqwrwNKjFU/8AK1h5T8s2FnaaZ5T1&#xA;ESWUAt0vpbFHunQLxPqTVDHkOwooGwAWgxtVRLPyKgonkF1AUoANItx8JbmV2HTn8VPHfG1+K9Yv&#xA;JivzXyLKrhg4YaVADyG4aviMV+Kdf4x/7Uerf9Iv/N2G0U7/ABj/ANqPVv8ApF/5uxtad/jH/tR6&#xA;t/0i/wDN2NrTv8Y/9qPVv+kX/m7G1p3+Mf8AtR6t/wBIv/N2NrTv8Y/9qPVv+kX/AJuxtad/jH/t&#xA;R6t/0i/83Y2tO/xj/wBqPVv+kX/m7G1pkJZQQCQCegPthQx+5/MT8v7W5ltbrzNpMFzA7RTwS31s&#xA;jo6HiyOrOCrKRQg4rSn/AMrN/Lf/AKmvRv8AuIWv/VTFad/ys38t/wDqa9G/7iFr/wBVMVp3/Kzf&#xA;y3/6mvRv+4ha/wDVTFad/wArN/Lf/qa9G/7iFr/1UxWnf8rN/Lf/AKmvRv8AuIWv/VTFaX2/5i/l&#xA;9cTx29v5n0maeZljhhjvrZnd2NFVVDkkkmgAxWmRYq7FXYq7FXYq7FXYq7FXYq7FUn1Pzd5b0u6+&#xA;qahfR29xQERsGr8QqOgPhlsME5CwHHy6vHA1KVFHWGpWOoRNLZTLPGjcGZa7NxDUNfZhkJQMebbD&#xA;JGYuJtFZFm7FVJbq2b1wsqsbZuNwAQSjcBJRqdDwdW+Rw0fmx4hv5N288NxBHcQuJIZlWSJx0ZWF&#xA;VI+YOJFGimMgRY5KmBLsVdirsVUPrlqLwWXqD60YzMIf2vTDBS3y5GmHhNX0Y8Yvh6q+Bk7FXYql&#xA;uvOyWLMpowBII+jBJIeHWd/5x1LUfLPlrRddk0RNUufMNxcXCRCUF49Uu5KlA0TH7FB8dBU7HAyZ&#xA;h/yrD80v/LlTf9IDf9leGkW7/lWH5pf+XKm/6QG/7K8aW3f8qw/NL/y5U3/SA3/ZXjS27/lWH5pf&#xA;+XKm/wCkBv8Asrxpbd/yrD80v/LlTf8ASA3/AGV40tsQlvPN1lrur+Wdb16XW4rG/wBHpLJGIlLL&#xA;qWkTIyoWlZTS9dT+8INAaYFfQWSYuxV2KuxV2KuxV2KuxV2KuxVJfMNjdXV5oTwRl0tNRE9wQR8M&#xA;f1WdORr/AJTqMuxSAEr6x/SHG1EDKUK6Sv8A2MmMz+Wtfiv7nUNOSWHUJ9VuWWT1T6f1WSydUZo+&#xA;XDj64T9mtcyBmgQAeXCPnf6nClpsgkZRsSMz16cPd76Rn5e6br9lLd/pH6ykLQwKyXRrW5Xl6rpW&#xA;e5JrUcn2DbbdcjqpwNVXw7vkGzQY8kSeK+Q59/Xqf2sZh0DzlM94XtbqE3dsUuFErL+/F7C4pK1x&#xA;IZCIvUpIqoKbAdsyDlxitxsf0Hy7623cIYM5vYixvv14h14je177Mx0HQ00y78yWtvZSQxXDxPaT&#xA;MxdJY/qkcfEMzM3JZUevLxGYmXJxCJJ/FuxwYOA5ABQNV5+kD77YzN5Z8xadp1vb2Vvcy281hYLq&#xA;KtNJLSeKQ+sfTE0bNRKAojqCNugpmSM0JEk1zNfinCOmyQiBEGuGN7nn16j5AhLF07XlkTTLq01C&#xA;W++o3zadFFP6Zike6/0WZyJ2CqivTd24++WccPqBFWL28t+jR4eT6SJcXDKt+Xq9J5/pNJjb6f5l&#xA;udSvDp63KavFeXKyao0p+p+l9VKCMRl+v1gqQOG3WuVmUBEXXDQ268/1N0ceWUjw3x8R9V+muHlV&#xA;/wA7yXaV5a80yCCC7F8tobqzN5HLKUY8UmFywZbidirclDsGHPsO+M80OYq6P6K6BcWmymgeKrje&#xA;/vv+I/HvWv5f81w3OlslvdTG1d4oUaZmjWNdQldKyLMjxkW3D4mDhlopFRj4uMg8t/8AiR5d/uU4&#xA;MwMdjt59OM+e3prvsbJ75y8uX+paldXVtHMXh0e4SxlhlaIi9EgeEfCyVNRUctsp0+URAB/nC/c5&#xA;Ws08pyJF7QNb16uiTXWi+d5dVv5WNyZZhdcHVqQNA9qywx19egIkIAX0hRvirTraMmPhHLp9/u/S&#xA;40sOczkd/wCL3Vw7D6u/y57tXflbzPa3lglh9bEEdvafVjHIziK5Eha6MrPcJTltU8GDL8I92OaB&#xA;BuuZ+XTos9NljIcPFVRrfr/Ffq/Qe56dmud2lfmH/jnyf6p/hgkkPEvJv/kw/I3+t5m/7qF9gDI8&#xA;n0DkmDsVdirsVdir5w/MrR/035u88aP65tv0jNptr9YUcmj9a48vpzAqteNa9cj1ZdE48i/84uf4&#xA;W8z2uuf4xvrn6sJB6MUX1dm9SNo/7z1ZaU5V+zhpFvVf8Hf9rzVv+kr/AJtxpbd/g7/teat/0lf8&#xA;240tu/wd/wBrzVv+kr/m3Glt3+Dv+15q3/SV/wA240tu/wAHf9rzVv8ApK/5txpbd/g7/teat/0l&#xA;f8240tu/wd/2vNW/6Sv+bcaW1bybJcvojLcXEl1JBe6hbrPMQ0jR299PDHyYAVIRAK4hSnmFCjcx&#xA;XEigQT+gQdzxD1+/CCOrGQJ5GkP9U1P/AJb/APkkn9clxDuY8Mu/7HfVNT/5b/8Akkn9ceIdy8Mu&#xA;/wCxAaheXtrILaK7a71CReUVnFEnMrWnN2JCxp/lMR4Cp2ycYg71QackzE0Dcu6vxSJtbTXvRBu7&#xA;+P1zuyxQjgtf2QWNWp/NQV8BkZSj0DOEclbnf3K31TU/+W//AJJJ/XBxDuZ8Mu/7Fv1C/wDU9X64&#xA;PUpx5+inLjWtK+GPEO5HBLnf2OSw1BK8L0LyJZqQoKk9SceIdyiEu/7F31TU/wDlv/5JJ/XHiHcn&#xA;hl3/AGO+qan/AMt//JJP648Q7l4Zd/2O+qan/wAt/wDyST+uPEO5eGXf9jvqmp/8t/8AyST+uPEO&#xA;5eGXf9jvqmp/8t//ACST+uPEO5eGXf8AYi4lkWNVkf1HA+J6Ur9AyJZhLvMP/HPk/wBU/wAMjJkH&#xA;iXk3/wAmH5G/1vM3/dQvsAZHk+gckwdirsVdirsVeBeZv/Jn+Zv+Y/SP+ovy9kSy6PfckxdirsVd&#xA;irsVdirsVdiqReTP+ORcf9tPVv8Aup3GISU9xQ7FVskkccbSSMEjQFndiAAAKkknoBiAgmtylP16&#xA;/wBV+HTa2tiftam6jk4/5do3G/8AxkccfAODXLeER57nu/X+r7nH45ZPp2j/ADv1frO3vR1hptpY&#xA;QmO3QjmeUsjEvJI5/akdqsze5OQlMy5t2PGICgisizU52ZYmKmh6A+FTTFXlPnDz5qdlf6tN+nLj&#xA;S9M0e1sHMVtbWc80099PdRtV7oJEiolsrVLKB8VT0yNsgGMf8rX1/wD5b/NX/cH0b/qrjaad/wAr&#xA;X1//AJb/ADV/3B9G/wCquNrTv+Vr6/8A8t/mr/uD6N/1Vxtad/ytfX/+W/zV/wBwfRv+quNrTv8A&#xA;la+v/wDLf5q/7g+jf9VcbWkZo/5j61qWp2+nvr2vae1zJFEk17pmjRoGmmS3j+FZHlYGWZFPBG48&#xA;gTQb42tPVPy/1q/1vyZpOqagVa9uYA1w6LwVnUlSwXenLjWmEMSjfMP/ABz5P9U/wxkoeJeTf/Jh&#xA;+Rv9bzN/3UL7AGR5PoHJMHYq7FXYq7FXgXmb/wAmf5m/5j9I/wCovy9kSy6PfckxdirsVdirsVdi&#xA;rsVdiqReTP8AjkXH/bT1b/up3GISU9xQgtQ1a3s2SLi9xeS/3NnCA0ritCaEgKo7uxCjxycYE+5q&#xA;yZRHbme4c/x58kLHpNxeyJcayVk4nlFp0ZJtoyNwXqAZnHiw4j9lQdzIzA2j8+v7GAxGW8/l0/b+&#xA;Nk3ypyHYq7FVK4/uW+j9YxV84/m1/wAc3zt/zDaN/wAnNTyAZh9J5Ng7FXYq7FXYq8s/OH/lKPI/&#xA;/bRg/wC6rpmAsgyT8o//ACXGhf8AGA/8nGxHJEuad+Yf+OfJ/qn+GMlD55sdX8wadrmga5pPlvUd&#xA;YXRZ9ehlEVtc+hI1xqN0PgnhhufsiWv2DuCNsAZM2/5Xf+YH/ls9R/7mP/eMw2xp3/K7/wAwP/LZ&#xA;6j/3Mf8AvGY2tO/5Xf8AmB/5bPUf+5j/AN4zG1p3/K7/AMwP/LZ6j/3Mf+8Zja07/ld/5gf+Wz1H&#xA;/uY/94zG1phz6r5g1HzTfa3qvlrUtHXVr/SgPWtrn6vEw1DSY1Vp5obevIWDGvAbsF3wMuj6VyTB&#xA;2KuxV2KuxV2KuxVLTeX13PJFp4SOCFjHLeTKXVnXZkiRWTlxOzMWAB233pZwgDdp45SNR5Dr+phl&#xA;/wCd9M8rXK6Lpl0uvapcXMzjR7dKzGa6neaTlMrGOMB5CeLKTT23zDy63FH0izLyd7ovZ/VZo+LK&#xA;seAbmU9tvLqfLbc7Wn+j6p5j1WzA9NLWVywuroowSBh8JhgSSjTSIQVZ2AQN2ahXMrHAxF5K4u4f&#xA;r/HwdNqMsJzIwcXANuKXM/5v4A75bp3p+l2lgr+iC00pDXFzIecsrAU5O53PsOg6AAYymZMceIQ5&#xA;c+/qUXkWx2KuxV2KqVx/ct9H6xir5x/Nr/jm+dv+YbRv+Tmp5AMw+k8mwdirsVdirsVeWfnD/wAp&#xA;R5H/AO2jB/3VdMwFkGSflH/5LjQv+MB/5ONiOSJc078w/wDHPk/1T/DGShgPkPz15f0Dy7+i9VW/&#xA;hvYr7UpHSPTdQnThPqE80TLLBBJGwaORW+Fu/jgBSQyH/lbPkv8An1H/ALhGq/8AZLhsIpWtfzN8&#xA;r3dtFdWsWrXFrOiywTxaJrDxyRuOSujLaEMrA1BHXChV/wCVh6B/yy6z/wBwLWf+yTFUu8wed/K1&#xA;5pFxFdnXbC1ThPNeRaNq8LRrA6zEmRrMhV+CjV/ZrgKQxnV9c/L/AFfSJ7RNa8wRJdRX6LNHpuqM&#xA;pGp3aXjcl+p0dIzH6aKdvSLIa1rjsndVu9d8vXHk/S/Kugtq2oT2d3pAjlu9P1FGMVpqFvNLJLPN&#xA;bxxrxiiZtyBtQdhjaHrGFDsVdirsVdirsVdirDtdttIl/L6FtU1S40nTktY3uLq0kETtyQVUnixb&#xA;mx+z+0cq10YkHiJiPJz+wJ5I5YeFCOSZqhIWPf8At6PH/wAl/wBN23mua70LRG1DSpWMEl5ccY3h&#xA;i5Vqs2yB6bsg69PfNJoeITuMbH46vpHtV4M9MI5svBlG/DHcSP8AV513Ho+gdOAF7qYX7H1hSR4M&#xA;YIiwHt0PzJzo58h7v0vkeP6pe/8AQEwyDa7FXYq7FXYqpXH9y30frGKvnH82v+Ob52/5htG/5Oan&#xA;kAzD6TybB2KuxV2KuxV5Z+cP/KUeR/8Atowf91XTMBZBkn5R/wDkuNC/4wH/AJONiOSJc2SamsX1&#xA;VnlXkiblfEYlDzjyt5UtPNa6tql5qepRFdUu7a3htbp7eJILeT041WOOg+yNz1J3ORAtkTSd/wDK&#xA;ptF/6u2tf9xGb+uHhXiUrX8o7K0torSz8y+Yra0t0WK3totRYRxxoOKIg4GiqooB4YaRar/yq1f+&#xA;ps8y/wDcSb/mjGlt4p5u1jzzZ6vq2hx+UvPes6ZDLNaC7XU7kw3cIJTmAljKvCRd9mOxxpNsT8v/&#xA;AJh+cbm+uLOLyX5iv4rdeKWVhf6gs0CqeIEp9KetPs/YXf7sjwpt6x5RXV7vy5H5judO8weVtRh1&#xA;rTtOGn6rey3Cz215e21vM3pzxxEgx3LqKx7EVU1Gx4UW92yTF2KuxV2KuxV2KuxVg+s+Qf0lqq3O&#xA;rctU0aCV5bXQo39KON3NTI3KnrMxJNGdQtaCoymenGWV5Dy5Dp8fN2Wl7Wno8Zjp41KX1T/j90eg&#xA;j9vW+QB3pmoPc2Ah0TTxZ28Mk1srTCJIYmt5WhkCxQsxbhIjCnwg/wA2ZEYQiPLydVkzZchJN8R6&#xA;yN/pJP43TWxs0tLdYVYyNUtLK1OTuxqztTbcntsOg2xlKysIcIpEZFm7FXYq7FXYqpXH9y30frGK&#xA;vnH82v8Ajmedv+YbRv8Ak5qeQDMPoL/Efl7/AKulp/yPi/5qyVsad/iPy9/1dLT/AJHxf81Y2tO/&#xA;xH5e/wCrpaf8j4v+asbWnf4j8vf9XS0/5Hxf81Y2tO/xH5e/6ulp/wAj4v8AmrG1p5r+auo6fe+a&#xA;fJQsrqK6MV/btIIZFk4g6tpgBbiTQVxSGWflH/5LjQv+MB/5ONiOSJc2R6v/AMc+b/VxKHmH5beQ&#xA;PJ2s6Zqt9qmlQ3V22sX6tM/KpCzGg2IwAMiUd5b/ACy8h3Gs+a4ptGgeO01WKG2Ul6JGdLsZSq/F&#xA;09SVm+nDS2U//wCVTflz/wBWK3/4f/mrGgjiLCfPX5YaGNatLLy5pECX02j6nPFECPikhu9OUMvr&#xA;FovUEUsoj9T4eTfFtgISClf/ACqa1/6sXmn/AMNL/mrDS8ST+afKnlTyrpyajr2meabS0llW3jcR&#xA;+V5maVlZwqpD6jk8UY9OgwUE2Vby15a024t7HzTpNpeDQJL7Rls7nVV01Lk3X6eton9JdOA4qqK6&#xA;OJqHlSg64gIJfRWSYuxV2KuxV2KuxV2KuxVIvJn/AByLj/tp6t/3U7jEJKe4odirsVdirsVdiqlc&#xA;f3LfR+sYq8jtvI+k+bPPPmK31O4vIobaz0qREs7mS2Bf178qzemRVkK/Ce2/jkAGRKM/6Fq/LT/t&#xA;Zf8ASfP/AFyVI4nf9C1flp/2sv8ApPn/AK40vE7/AKFq/LT/ALWX/SfP/XGl4nf9C1flp/2sv+k+&#xA;f+uNLxMYg/JPynIY+flzWo+RgDV1OY8fVvzaOTt/uuD/AEk/5O3vgplaM/L78ovLt+2pTTaVr3l1&#xA;rO9ENv6upXH+kLbyLLHIV+EFo5UVqryj5AFHalQgIJegflCvH8ttBWpPG3IqTUmkjdThHJB5sovo&#xA;WntmiXq+1dtvvxKHlmp+W/Peg39PKN/eHSbmaa4v9OiaxjImmAPqQy3VndtQuCWUk9fhpkeTLmgb&#xA;S1/NO0uL24t49WSXUZhc3jfXtGPOVYY7cNQ6QQv7qBFoNtq9a4bXZFfWPzf/AO1t/wBJuif94jG1&#xA;oIWS1/NOTUoNTePVje20M1tBL9e0b4Yrh4nlXj+iOJ5NbxmpFRTbqcbXZFfWPzf/AO1t/wBJuif9&#xA;4jG1oKVyv5rXURhuYdTnhahMcl3obqabjZtHIxtdk38r+WPO2pXS/wCJL27h0GyksprLRy+nPzuL&#xA;WZp+cr2tjZMsaOkLIinqrVqDTCEF6bhQ7FXYq7FXYq7FXYq7FUi8mf8AHIuP+2nq3/dTuMQkp7ih&#xA;2KuxV2KuxV2KqN03GBjQmlNlBY9R2FTiryPzDpepxebOGivrA1m+tPVuY9JktYAbW2l4xmX69JCh&#xA;4yXLceG+5r2yABZWpfof8zfDzb/0l6F/2U4aK2FKx0D8xXvLxtXTzk9vyjGn/U9S0WJggT956w+t&#xA;KvL1K0p2xAW0d/h3zF/vjz//ANxXRP8Assw0tu/w75i/3x5//wC4ron/AGWY0tsUOseZtO1S60rU&#xA;tc1u0ufrJXT7GbWfL31v0HCmJZVkuw5kJJ6dqYKKWRrpH5lhgWXzay9wLzQgf+onGiiw9J8irpC+&#xA;TdFOjLImlPZwyWImr6voyIHQvyqeRDVPvhCCnuFCwQwgACNQBsAAMVd6UX8i/cMVd6UX8i/cMVd6&#xA;UX8i/cMVd6UX8i/cMVd6UX8i/cMVbVEUkqoBPWgp0xVdirsVdirsVdirsVdirsVYf5f8wWmmWl1Z&#xA;3lrqKTpqOpOQmm38qFJb+eSNlkjgdGVkcMCpwJTP/Gekf8s+p/8AcJ1P/snw2tO/xnpH/LPqf/cJ&#xA;1P8A7J8bWnf4z0j/AJZ9T/7hOp/9k+NrTv8AGekf8s+p/wDcJ1P/ALJ8bWnf4z0j/ln1P/uE6n/2&#xA;T42tO/xnpH/LPqf/AHCdT/7J8bWmNeevzw8meTdPgu9Wt9U9O6kMMQGn3MJ5cS3W7W2U9OxJ9sFr&#xA;Tz/8vfzWHnf8zri58nWIujbaRKs0WqzNYhVa6hNUaGG+5GtNiB88ACej0+bzP+YEWuWmjtoGkm5v&#xA;La5vI3Gr3PAJaSQRuGP6NryJu047dj9MkI76/wDmR/1YtG/7jF1/3jMUIHWfM/5gaTZx3Vx5f0l4&#xA;5Lm0s1Eer3JPO9uY7WMmumr8IeYFvbxxS8i896dJ+YuoxatqP5cTaq1mJbGDUrHV7mKGWOGZ1IUN&#xA;Zx1Cy86HgD9FMjaaYTcfkTHLcNKn5f65BGxBFvHrEZQewL6a77+7Y2tM18geXT5G8xQ6rp35dTaR&#xA;cXZTTRqGoaxdSW6G7lSONXCWUlPUl4IDx2J7dcVp7Z+WX/kt/Kn/AGxtP/6hY8kxKYea7+607ytr&#xA;OoWjKt3Z2NzcW7MOSiSKFnQldqjkOmKh5TpX5qeePM2peWNC05YdH1G5S6g8xXc9u08a3trHzZLd&#xA;SYwVMQE4+I/DLGK/ayNsqbh/Mn8wLf8ALm219Hg1rXdadl0fTIbOTkn1J52u+awGV5FeKBUU8QEd&#xA;hyNN8bUhPLz84oW8zeWl0yL1/K+px2w1TUDFKTBLqqFtPBkUejEQyKsqyNX96nEbHDaKT/WfP72W&#xA;s6np9lpv16LQbWO81y4e5itRBHPFPLEU9fhG/wDvMeZZ1C8hufi4trSL8h+dLfzZop1BYPqkyXN1&#xA;avbly4LWkxiZ4y6QuUPwn4o1IrQjEFSGO33nDzpHL5xtrOCK9n0TUdPt7T6tbSSSpZXccE08noCV&#xA;mnlhimYgBl5EV4/s4rTF7X83vzAex0XUJNKJtbq5gtC8VmzRXcj6vNp0ymYXDLasIVikjB5cnYjd&#xA;RXG00zjyNfebLrzBr9vqesW+raZpUkdlHLBZi0P1woJpk2mnqsUcka17sWH7O6EFm2FDsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVQ99Y2V5Dwu7eO4RasqyorgGlKgMDiryW/v7XyR57fzFLo9w+kT2D&#xA;WJfToYiRPJdRFAyFotm6A+OQGzLmE8uvNOqS+b9M1dfKeufVbTT9QtJQYIOfqXU9lJHQev042r13&#xA;8Mla0nH+P7r/AKlLXv8ApHt/+yjG0Uk/mvzTqmq6XBbW3lPXBJHqGm3bc4IAPTs9Qgupek539OFq&#xA;e+NppLZ9L8jzzy3Ev5baqZZnaWVhawqC7kszUW5A3Jrg2XdC33l/yZNZXENr+Xur2lzLE6QXQtYJ&#xA;DFIykLJwa64txO9DscU7pB5L0jT/ACdfQ3PmTRNV1zULq5jTRZG0exsxDPFFLMeCxXL8nKRl+TfZ&#xA;4bUOKl7J5E0+803yP5e069j9K8stMs7e5iqG4yxW6I61UkGjKRsckwTi6tba7tpbW6iS4trhGing&#xA;lUPG8bjiyOrVDKwNCDiqA/wt5Z9W0m/RFl61gpjsZPq8XKBDGIisR41QemipRf2QB0xVrTvKnlfT&#xA;Wt307R7Gye0Ei2rW9tDEYhOQZRGUVeHqcRyp174qpQ+SfJkGmy6XBoGnRaZPIs09ilpAsDyJTi7x&#xA;BODMvEUJFdhiqtqXlbyxql2LzU9Isr67WFrYXFzbxTSCCQMHi5urNwYOwK9DU+OKrNI8oeU9Gn+s&#xA;aPotjps/B4/Vs7aGBuEhQutY1XZjElf9UeGKtSeTvKUhvmbRbHnqhB1JxbxK1yQwf9+wUGT4hX4q&#xA;4rasPLfl9bqzul022Fxp0fo6fIIkBgj6cYdvgFNvhxpbRVpYWNmJRZ20VsJ5XuJxCix85pDV5H4g&#xA;cnY7sx3OKojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu1bQdN1a3e21CFLi1kBWS3kVXjZT&#xA;1DK1QRgIVj3/ACqD8t/+pc03/pDt/wDmjGk27/lUH5b/APUuab/0h2//ADRjS27/AJVB+W//AFLm&#xA;m/8ASHb/APNGNLbv+VQflv8A9S5pv/SHb/8ANGNLbv8AlUH5b/8AUuab/wBIdv8A80Y0to7Rvy68&#xA;k6NfJf6bolha3kXL0riK1gSROSlW4uqhlqrEGh6Y0i2SYVYL/wA6h/383/hzYEu/51D/AL+b/wAO&#xA;bFXf86h/383/AIc2Ku/51D/v5v8Aw5sVd/zqH/fzf+HNirv+dQ/7+b/w5sVd/wA6h/383/hzYq7/&#xA;AJ1D/v5v/DmxV3/Oof8Afzf+HNirv+dQ/wC/m/8ADmxV3/Oof9/N/wCHNirv+dQ/7+b/AMObFXf8&#xA;6h/383/hzYq7/nUP+/m/8ObFXf8AOof9/N/4c2Ku/wCdQ/7+b/w5sVd/zqH/AH83/hzYq7/nUP8A&#xA;v5v/AA5sVd/zqH/fzf8AhzYq7/nUP+/m/wDDmxV3/Oof9/N/4c2Ku/51D/v5v/DmxV3/ADqH/fzf&#xA;+HNirv8AnUP+/m/8ObFXf86h/wB/N/4c2Ku/51D/AL+b/wAObFXf86h/383/AIc2Ku/51D/v5v8A&#xA;w5sVd/zqH/fzf+HNirv+dQ/7+b/w5sVd/wA6h/383/hzYq7/AJ1D/v5v/DmxV//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -218.414 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 218.414 li458.022 218.414 li458.022 0 liclp[1 0 0 1 0 0 ] concat231.756 122.252 mo318.953 62.8594 lifalse sop/0 [/DeviceCMYK] add_csa0.9805 0.0859001 0.168 0 cmykf1 lw0 lc0 lj4 ml[] 0 dshtrue sadj231.756 122.252 mo318.953 62.8594 li0.9805 0.168 0.0781 0 cmyk@gsave % PSGState111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 liclp111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 li0 0 0 0 cmykf27.3474 lw1 lj111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.5117 0.4258 0.4258 0.0703 cmyk@25.6382 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.4883 0.4063 0.4063 0.0469 cmyk@23.9291 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.457001 0.375 0.3828 0.0234001 cmyk@22.2198 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.4258 0.3477 0.3555 0.0117 cmyk@20.5106 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.394501 0.3203 0.324201 0.0039 cmyk@18.8014 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.3555 0.2852 0.2891 0 cmyk@17.0922 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.3164 0.25 0.2578 0 cmyk@15.383 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.2813 0.218801 0.2266 0 cmyk@13.6738 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.246101 0.1953 0.1992 0 cmyk@11.9645 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.210901 0.1641 0.168 0 cmyk@10.2553 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.1719 0.1328 0.1367 0 cmyk@8.5461 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.1406 0.1055 0.1094 0 cmyk@6.8369 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.1094 0.0820001 0.0859001 0 cmyk@5.1276 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.0781 0.0547001 0.0586001 0 cmyk@3.4184 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.0469 0.0313001 0.0313001 0 cmyk@1.7092 lw111.998 134.481 mo112.595 134.481 113.08 133.958 113.08 133.313 cv113.08 42.8282 li113.08 42.1836 112.595 41.6602 111.998 41.6602 cv9.25049 41.6602 li8.65235 41.6602 8.16846 42.1836 8.16846 42.8282 cv8.16846 133.313 li8.16846 133.958 8.65235 134.481 9.25049 134.481 cv111.998 134.481 licp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGStategsave % PSGState106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvclp7.9308 lw1 lj106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.5117 0.4258 0.4258 0.0703 cmyk@7.4351 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.4883 0.4063 0.4063 0.0469 cmyk@6.9394 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.457001 0.375 0.3828 0.0234001 cmyk@6.4437 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.4258 0.3477 0.3555 0.0117 cmyk@5.9481 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.394501 0.3203 0.324201 0.0039 cmyk@5.4524 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.3555 0.2852 0.2891 0 cmyk@4.9567 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.3164 0.25 0.2578 0 cmyk@4.46101 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.2813 0.218801 0.2266 0 cmyk@3.9654 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.246101 0.1953 0.1992 0 cmyk@3.4697 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.210901 0.1641 0.168 0 cmyk@2.97401 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.1719 0.1328 0.1367 0 cmyk@2.4783 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.1406 0.1055 0.1094 0 cmyk@1.9827 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.1094 0.0820001 0.0859001 0 cmyk@1.48701 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.0781 0.0547001 0.0586001 0 cmyk@0.9913 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.0469 0.0313001 0.0313001 0 cmyk@0.4957 lw106 135.543 mo14.3023 135.543 li13.7588 135.543 13.3179 135.984 13.3179 136.527 cv13.3179 163.958 li13.3179 164.5 13.7588 164.941 14.3023 164.941 cv19.4297 164.941 li18.8863 164.941 18.4458 165.382 18.4458 165.926 cv18.4458 168.743 li18.4458 169.287 18.8863 169.727 19.4297 169.727 cv101.213 169.727 li101.758 169.727 102.198 169.287 102.198 168.743 cv102.198 165.926 li102.198 165.382 101.758 164.941 101.213 164.941 cv106 164.941 li106.543 164.941 106.983 164.5 106.983 163.958 cv106.983 136.527 li106.983 135.984 106.543 135.543 106 135.543 cvcp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGStategsave % PSGState111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvclp111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cv0 0 0 0 cmykf27.3474 lw1 lj111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.5117 0.4258 0.4258 0.0703 cmyk@25.6382 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.4883 0.4063 0.4063 0.0469 cmyk@23.9291 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.457001 0.375 0.3828 0.0234001 cmyk@22.2198 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.4258 0.3477 0.3555 0.0117 cmyk@20.5106 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.394501 0.3203 0.324201 0.0039 cmyk@18.8014 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.3555 0.2852 0.2891 0 cmyk@17.0922 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.3164 0.25 0.2578 0 cmyk@15.383 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.2813 0.218801 0.2266 0 cmyk@13.6738 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.246101 0.1953 0.1992 0 cmyk@11.9645 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.210901 0.1641 0.168 0 cmyk@10.2553 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.1719 0.1328 0.1367 0 cmyk@8.5461 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.1406 0.1055 0.1094 0 cmyk@6.8369 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.1094 0.0820001 0.0859001 0 cmyk@5.1276 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.0781 0.0547001 0.0586001 0 cmyk@3.4184 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.0469 0.0313001 0.0313001 0 cmyk@1.7092 lw111.228 134.733 mo10.3619 134.733 li9.76465 134.733 9.2793 135.217 9.2793 135.815 cv9.2793 165.989 li9.2793 166.586 9.76465 167.071 10.3619 167.071 cv16.002 167.071 li15.4039 167.071 14.92 167.555 14.92 168.153 cv14.92 171.252 li14.92 171.85 15.4039 172.334 16.002 172.334 cv105.964 172.334 li106.562 172.334 107.046 171.85 107.046 171.252 cv107.046 168.153 li107.046 167.555 106.562 167.071 105.964 167.071 cv111.228 167.071 li111.825 167.071 112.311 166.586 112.311 165.989 cv112.311 135.815 li112.311 135.217 111.825 134.733 111.228 134.733 cvcp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGState110.443 132.166 mo18.7461 132.166 li18.2027 132.166 17.7623 132.607 17.7623 133.15 cv17.7623 160.581 li17.7623 161.124 18.2027 161.565 18.7461 161.565 cv23.8736 161.565 li23.3301 161.565 22.8897 162.004 22.8897 162.548 cv22.8897 165.366 li22.8897 165.91 23.3301 166.35 23.8736 166.35 cv105.658 166.35 li106.202 166.35 106.642 165.91 106.642 165.366 cv106.642 162.548 li106.642 162.004 106.202 161.565 105.658 161.565 cv110.443 161.565 li110.987 161.565 111.427 161.124 111.427 160.581 cv111.427 133.15 li111.427 132.607 110.987 132.166 110.443 132.166 cv0 0 0 0 cmykf1.3674 lw110.443 132.166 mo18.7461 132.166 li18.2027 132.166 17.7623 132.607 17.7623 133.15 cv17.7623 160.581 li17.7623 161.124 18.2027 161.565 18.7461 161.565 cv23.8736 161.565 li23.3301 161.565 22.8897 162.004 22.8897 162.548 cv22.8897 165.366 li22.8897 165.91 23.3301 166.35 23.8736 166.35 cv105.658 166.35 li106.202 166.35 106.642 165.91 106.642 165.366 cv106.642 162.548 li106.642 162.004 106.202 161.565 105.658 161.565 cv110.443 161.565 li110.987 161.565 111.427 161.124 111.427 160.581 cv111.427 133.15 li111.427 132.607 110.987 132.166 110.443 132.166 cvcp0.7461 0.6758 0.668001 0.8984 cmyk@111.127 125.986 mo111.671 125.986 112.111 125.511 112.111 124.925 cv112.111 42.6641 li112.111 42.0782 111.671 41.6036 111.127 41.6036 cv17.7208 41.6036 li17.1763 41.6036 16.7364 42.0782 16.7364 42.6641 cv16.7364 124.925 li16.7364 125.511 17.1763 125.986 17.7208 125.986 cv111.127 125.986 li0 0 0 0 cmykf111.127 125.986 mo111.671 125.986 112.111 125.511 112.111 124.925 cv112.111 42.6641 li112.111 42.0782 111.671 41.6036 111.127 41.6036 cv17.7208 41.6036 li17.1763 41.6036 16.7364 42.0782 16.7364 42.6641 cv16.7364 124.925 li16.7364 125.511 17.1763 125.986 17.7208 125.986 cv111.127 125.986 licp0.7461 0.6758 0.668001 0.8984 cmyk@17.7623 144.814 mo110.402 144.814 li@65.2784 144.472 mo65.2784 161.223 li@106.683 152.676 mo107.227 152.676 107.667 152.236 107.667 151.692 cv107.667 148.191 li107.667 147.648 107.227 147.208 106.683 147.208 cv70.7061 147.208 li70.1626 147.208 69.7222 147.648 69.7222 148.191 cv69.7222 151.692 li69.7222 152.236 70.1626 152.676 70.7061 152.676 cv106.683 152.676 licp@104.29 140.029 mo104.834 140.029 105.274 139.587 105.274 139.044 cv105.274 138.278 li105.274 137.735 104.834 137.293 104.29 137.293 cv75.1504 137.293 li74.607 137.293 74.1661 137.735 74.1661 138.278 cv74.1661 139.044 li74.1661 139.587 74.607 140.029 75.1504 140.029 cv104.29 140.029 lif104.29 140.029 mo104.834 140.029 105.274 139.587 105.274 139.044 cv105.274 138.278 li105.274 137.735 104.834 137.293 104.29 137.293 cv75.1504 137.293 li74.607 137.293 74.1661 137.735 74.1661 138.278 cv74.1661 139.044 li74.1661 139.587 74.607 140.029 75.1504 140.029 cv104.29 140.029 licp@101.897 157.121 mo102.441 157.121 102.881 156.679 102.881 156.136 cv102.881 156.053 li102.881 155.51 102.441 155.07 101.897 155.07 cv96.6866 155.07 li96.1426 155.07 95.7022 155.51 95.7022 156.053 cv95.7022 156.136 li95.7022 156.679 96.1426 157.121 96.6866 157.121 cv101.897 157.121 licp@90.5845 141.561 mo93.7886 141.561 96.3858 140.263 96.3858 138.662 cv96.3858 137.058 93.7886 135.761 90.5845 135.761 cv87.3804 135.761 84.7832 137.058 84.7832 138.662 cv84.7832 140.263 87.3804 141.561 90.5845 141.561 cvcp@106.683 111.108 mo107.227 111.108 107.667 110.632 107.667 110.046 cv107.667 47.6836 li107.667 47.0977 107.227 46.6231 106.683 46.6231 cv22.5064 46.6231 li21.9629 46.6231 21.5225 47.0977 21.5225 47.6836 cv21.5225 110.046 li21.5225 110.632 21.9629 111.108 22.5064 111.108 cv106.683 111.108 licp@99.8042 120.25 mo101.14 120.25 102.222 119.168 102.222 117.833 cv102.222 116.499 101.14 115.416 99.8042 115.416 cv98.4698 115.416 97.3873 116.499 97.3873 117.833 cv97.3873 119.168 98.4698 120.25 99.8042 120.25 cvcp@93.9932 116.099 mo93.9932 119.518 li@88.8653 116.099 mo88.8653 119.518 li@84.0796 116.099 mo84.0796 119.518 li@103.948 108.16 mo104.492 108.16 104.933 107.684 104.933 107.099 cv104.933 49.8936 li104.933 49.3086 104.492 48.8331 103.948 48.8331 cv24.5577 48.8331 li24.0142 48.8331 23.5733 49.3086 23.5733 49.8936 cv23.5733 107.099 li23.5733 107.684 24.0142 108.16 24.5577 108.16 cv103.948 108.16 licp@16.7364 111.313 mo111.769 111.313 li@84.8047 132.166 mo85.3482 132.166 85.7886 131.725 85.7886 131.182 cv85.7886 126.997 li85.7886 126.454 85.3482 126.012 84.8047 126.012 cv45.0679 126.012 li44.524 126.012 44.084 126.454 44.084 126.997 cv44.084 131.182 li44.084 131.725 44.524 132.166 45.0679 132.166 cv84.8047 132.166 li0 0 0 0 cmykf84.8047 132.166 mo85.3482 132.166 85.7886 131.725 85.7886 131.182 cv85.7886 126.997 li85.7886 126.454 85.3482 126.012 84.8047 126.012 cv45.0679 126.012 li44.524 126.012 44.084 126.454 44.084 126.997 cv44.084 131.182 li44.084 131.725 44.524 132.166 45.0679 132.166 cv84.8047 132.166 licp0.7461 0.6758 0.668001 0.8984 cmyk@32.8033 144.814 mo32.8033 161.223 li@124.19 63 mo124.19 59.0118 li112.111 59.0118 li112.111 63 li124.19 63 lif124.19 63 mo124.19 59.0118 li112.111 59.0118 li112.111 63 li124.19 63 licp@23.8736 161.565 mo105.658 161.565 li@gsave % PSGState444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 liclp444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 li0 0 0 0 cmykf27.3474 lw1 lj444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.5117 0.4258 0.4258 0.0703 cmyk@25.6382 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.4883 0.4063 0.4063 0.0469 cmyk@23.9291 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.457001 0.375 0.3828 0.0234001 cmyk@22.2198 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.4258 0.3477 0.3555 0.0117 cmyk@20.5106 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.394501 0.3203 0.324201 0.0039 cmyk@18.8014 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.3555 0.2852 0.2891 0 cmyk@17.0922 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.3164 0.25 0.2578 0 cmyk@15.383 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.2813 0.218801 0.2266 0 cmyk@13.6738 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.246101 0.1953 0.1992 0 cmyk@11.9645 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.210901 0.1641 0.168 0 cmyk@10.2553 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.1719 0.1328 0.1367 0 cmyk@8.5461 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.1406 0.1055 0.1094 0 cmyk@6.8369 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.1094 0.0820001 0.0859001 0 cmyk@5.1276 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.0781 0.0547001 0.0586001 0 cmyk@3.4184 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.0469 0.0313001 0.0313001 0 cmyk@1.7092 lw444.994 169.549 mo445.592 169.549 446.076 169.028 446.076 168.382 cv446.076 77.8965 li446.076 77.252 445.592 76.7295 444.994 76.7295 cv342.248 76.7295 li341.65 76.7295 341.166 77.252 341.166 77.8965 cv341.166 168.382 li341.166 169.028 341.65 169.549 342.248 169.549 cv444.994 169.549 licp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGStategsave % PSGState438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvclp7.9308 lw1 lj438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.5117 0.4258 0.4258 0.0703 cmyk@7.4351 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.4883 0.4063 0.4063 0.0469 cmyk@6.9394 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.457001 0.375 0.3828 0.0234001 cmyk@6.4437 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.4258 0.3477 0.3555 0.0117 cmyk@5.9481 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.394501 0.3203 0.324201 0.0039 cmyk@5.4524 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.3555 0.2852 0.2891 0 cmyk@4.9567 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.3164 0.25 0.2578 0 cmyk@4.46101 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.2813 0.218801 0.2266 0 cmyk@3.9654 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.246101 0.1953 0.1992 0 cmyk@3.4697 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.210901 0.1641 0.168 0 cmyk@2.97401 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.1719 0.1328 0.1367 0 cmyk@2.4783 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.1406 0.1055 0.1094 0 cmyk@1.9827 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.1094 0.0820001 0.0859001 0 cmyk@1.48701 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.0781 0.0547001 0.0586001 0 cmyk@0.9913 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.0469 0.0313001 0.0313001 0 cmyk@0.4957 lw438.997 170.612 mo347.298 170.612 li346.756 170.612 346.315 171.053 346.315 171.596 cv346.315 199.027 li346.315 199.57 346.756 200.01 347.298 200.01 cv352.426 200.01 li351.883 200.01 351.443 200.452 351.443 200.995 cv351.443 203.813 li351.443 204.356 351.883 204.796 352.426 204.796 cv434.21 204.796 li434.753 204.796 435.194 204.356 435.194 203.813 cv435.194 200.995 li435.194 200.452 434.753 200.01 434.21 200.01 cv438.997 200.01 li439.539 200.01 439.98 199.57 439.98 199.027 cv439.98 171.596 li439.98 171.053 439.539 170.612 438.997 170.612 cvcp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGStategsave % PSGState444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvclp444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cv0 0 0 0 cmykf27.3474 lw1 lj444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.5117 0.4258 0.4258 0.0703 cmyk@25.6382 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.4883 0.4063 0.4063 0.0469 cmyk@23.9291 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.457001 0.375 0.3828 0.0234001 cmyk@22.2198 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.4258 0.3477 0.3555 0.0117 cmyk@20.5106 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.394501 0.3203 0.324201 0.0039 cmyk@18.8014 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.3555 0.2852 0.2891 0 cmyk@17.0922 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.3164 0.25 0.2578 0 cmyk@15.383 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.2813 0.218801 0.2266 0 cmyk@13.6738 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.246101 0.1953 0.1992 0 cmyk@11.9645 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.210901 0.1641 0.168 0 cmyk@10.2553 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.1719 0.1328 0.1367 0 cmyk@8.5461 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.1406 0.1055 0.1094 0 cmyk@6.8369 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.1094 0.0820001 0.0859001 0 cmyk@5.1276 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.0781 0.0547001 0.0586001 0 cmyk@3.4184 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.0469 0.0313001 0.0313001 0 cmyk@1.7092 lw444.225 169.802 mo343.359 169.802 li342.761 169.802 342.277 170.287 342.277 170.884 cv342.277 201.057 li342.277 201.656 342.761 202.14 343.359 202.14 cv349 202.14 li348.401 202.14 347.918 202.625 347.918 203.223 cv347.918 206.322 li347.918 206.919 348.401 207.404 349 207.404 cv438.96 207.404 li439.559 207.404 440.042 206.919 440.042 206.322 cv440.042 203.223 li440.042 202.625 439.559 202.14 438.96 202.14 cv444.225 202.14 li444.822 202.14 445.307 201.656 445.307 201.057 cv445.307 170.884 li445.307 170.287 444.822 169.802 444.225 169.802 cvcp0.0195001 0.0117 0.0117 0 cmyk@grestore % PSGState443.441 167.236 mo351.743 167.236 li351.201 167.236 350.759 167.676 350.759 168.219 cv350.759 195.65 li350.759 196.194 351.201 196.634 351.743 196.634 cv356.871 196.634 li356.327 196.634 355.886 197.075 355.886 197.618 cv355.886 200.436 li355.886 200.979 356.327 201.42 356.871 201.42 cv438.655 201.42 li439.199 201.42 439.638 200.979 439.638 200.436 cv439.638 197.618 li439.638 197.075 439.199 196.634 438.655 196.634 cv443.441 196.634 li443.983 196.634 444.423 196.194 444.423 195.65 cv444.423 168.219 li444.423 167.676 443.983 167.236 443.441 167.236 cv0 0 0 0 cmykf443.441 167.236 mo351.743 167.236 li351.201 167.236 350.759 167.676 350.759 168.219 cv350.759 195.65 li350.759 196.194 351.201 196.634 351.743 196.634 cv356.871 196.634 li356.327 196.634 355.886 197.075 355.886 197.618 cv355.886 200.436 li355.886 200.979 356.327 201.42 356.871 201.42 cv438.655 201.42 li439.199 201.42 439.638 200.979 439.638 200.436 cv439.638 197.618 li439.638 197.075 439.199 196.634 438.655 196.634 cv443.441 196.634 li443.983 196.634 444.423 196.194 444.423 195.65 cv444.423 168.219 li444.423 167.676 443.983 167.236 443.441 167.236 cvcp0.7461 0.6758 0.668001 0.8984 cmyk@444.125 161.055 mo444.668 161.055 445.107 160.581 445.107 159.995 cv445.107 77.7334 li445.107 77.1485 444.668 76.6739 444.125 76.6739 cv350.717 76.6739 li350.173 76.6739 349.734 77.1485 349.734 77.7334 cv349.734 159.995 li349.734 160.581 350.173 161.055 350.717 161.055 cv444.125 161.055 li0 0 0 0 cmykf444.125 161.055 mo444.668 161.055 445.107 160.581 445.107 159.995 cv445.107 77.7334 li445.107 77.1485 444.668 76.6739 444.125 76.6739 cv350.717 76.6739 li350.173 76.6739 349.734 77.1485 349.734 77.7334 cv349.734 159.995 li349.734 160.581 350.173 161.055 350.717 161.055 cv444.125 161.055 licp0.7461 0.6758 0.668001 0.8984 cmyk@350.759 179.883 mo443.398 179.883 li@398.275 179.542 mo398.275 196.292 li@439.68 187.746 mo440.224 187.746 440.664 187.305 440.664 186.762 cv440.664 183.26 li440.664 182.717 440.224 182.277 439.68 182.277 cv403.703 182.277 li403.16 182.277 402.719 182.717 402.719 183.26 cv402.719 186.762 li402.719 187.305 403.16 187.746 403.703 187.746 cv439.68 187.746 licp@437.287 175.098 mo437.831 175.098 438.271 174.658 438.271 174.114 cv438.271 173.346 li438.271 172.803 437.831 172.364 437.287 172.364 cv408.147 172.364 li407.603 172.364 407.164 172.803 407.164 173.346 cv407.164 174.114 li407.164 174.658 407.603 175.098 408.147 175.098 cv437.287 175.098 lif437.287 175.098 mo437.831 175.098 438.271 174.658 438.271 174.114 cv438.271 173.346 li438.271 172.803 437.831 172.364 437.287 172.364 cv408.147 172.364 li407.603 172.364 407.164 172.803 407.164 173.346 cv407.164 174.114 li407.164 174.658 407.603 175.098 408.147 175.098 cv437.287 175.098 licp@434.894 192.19 mo435.438 192.19 435.878 191.75 435.878 191.206 cv435.878 191.123 li435.878 190.58 435.438 190.139 434.894 190.139 cv429.683 190.139 li429.14 190.139 428.699 190.58 428.699 191.123 cv428.699 191.206 li428.699 191.75 429.14 192.19 429.683 192.19 cv434.894 192.19 licp@423.582 176.631 mo426.786 176.631 429.382 175.333 429.382 173.731 cv429.382 172.128 426.786 170.83 423.582 170.83 cv420.378 170.83 417.781 172.128 417.781 173.731 cv417.781 175.333 420.378 176.631 423.582 176.631 cvcp@439.68 146.176 mo440.224 146.176 440.664 145.703 440.664 145.116 cv440.664 82.753 li440.664 82.167 440.224 81.6915 439.68 81.6915 cv355.503 81.6915 li354.96 81.6915 354.519 82.167 354.519 82.753 cv354.519 145.116 li354.519 145.703 354.96 146.176 355.503 146.176 cv439.68 146.176 licp@432.801 155.32 mo434.136 155.32 435.218 154.237 435.218 152.903 cv435.218 151.567 434.136 150.486 432.801 150.486 cv431.466 150.486 430.384 151.567 430.384 152.903 cv430.384 154.237 431.466 155.32 432.801 155.32 cvcp@426.99 151.169 mo426.99 154.587 li@421.863 151.169 mo421.863 154.587 li@417.077 151.169 mo417.077 154.587 li@436.945 143.229 mo437.489 143.229 437.929 142.753 437.929 142.168 cv437.929 84.9629 li437.929 84.378 437.489 83.9034 436.945 83.9034 cv357.554 83.9034 li357.011 83.9034 356.571 84.378 356.571 84.9629 cv356.571 142.168 li356.571 142.753 357.011 143.229 357.554 143.229 cv436.945 143.229 licp@349.734 146.383 mo444.765 146.383 li@417.802 167.236 mo418.346 167.236 418.786 166.795 418.786 166.251 cv418.786 162.066 li418.786 161.523 418.346 161.083 417.802 161.083 cv378.065 161.083 li377.522 161.083 377.081 161.523 377.081 162.066 cv377.081 166.251 li377.081 166.795 377.522 167.236 378.065 167.236 cv417.802 167.236 li0 0 0 0 cmykf417.802 167.236 mo418.346 167.236 418.786 166.795 418.786 166.251 cv418.786 162.066 li418.786 161.523 418.346 161.083 417.802 161.083 cv378.065 161.083 li377.522 161.083 377.081 161.523 377.081 162.066 cv377.081 166.251 li377.081 166.795 377.522 167.236 378.065 167.236 cv417.802 167.236 licp0.7461 0.6758 0.668001 0.8984 cmyk@365.8 179.883 mo365.8 196.292 li@356.871 196.634 mo438.655 196.634 li@350.261 186.063 mo350.261 182.075 li338.184 182.075 li338.184 186.063 li350.261 186.063 lif350.261 186.063 mo350.261 182.075 li338.184 182.075 li338.184 186.063 li350.261 186.063 licp@1 lw351.145 183.784 mo231.756 183.784 li231.756 60.7208 li111.883 60.7208 li@231.756 139.011 mo241.011 139.011 248.515 131.508 248.515 122.252 cv248.515 112.997 241.011 105.494 231.756 105.494 cv222.5 105.494 214.997 112.997 214.997 122.252 cv214.997 131.508 222.5 139.011 231.756 139.011 cv0 0 0 0 cmykf231.756 139.011 mo241.011 139.011 248.515 131.508 248.515 122.252 cv248.515 112.997 241.011 105.494 231.756 105.494 cv222.5 105.494 214.997 112.997 214.997 122.252 cv214.997 131.508 222.5 139.011 231.756 139.011 cvcp0.9805 0.168 0.0781 0 cmyk@266.011 62.7061 mo446.011 62.7061 li@266.949 54.0997 mo266.949 42.0684 li262.449 42.0684 li262.449 40.4747 li273.261 40.4747 li273.261 42.0684 li268.761 42.0684 li268.761 54.0997 li266.949 54.0997 lif274.887 54.0997 mo274.887 40.4747 li276.575 40.4747 li276.575 45.3594 li277.353 44.4571 278.334 44.0059 279.52 44.0059 cv280.249 44.0059 280.881 44.1504 281.418 44.4376 cv281.956 44.7266 282.34 45.125 282.572 45.6329 cv282.803 46.1407 282.918 46.878 282.918 47.8438 cv282.918 54.0997 li281.231 54.0997 li281.231 47.8418 li281.231 47.0059 281.051 46.3965 280.692 46.0157 cv280.333 45.6348 279.824 45.4434 279.166 45.4434 cv278.674 45.4434 278.211 45.5723 277.778 45.8292 cv277.344 46.086 277.036 46.4356 276.851 46.875 cv276.666 47.3155 276.575 47.9229 276.575 48.6973 cv276.575 54.0997 li274.887 54.0997 lif286.722 48.2247 mo292.253 48.2247 li292.179 47.3916 291.967 46.7676 291.62 46.3506 cv291.084 45.7042 290.391 45.3809 289.54 45.3809 cv288.768 45.3809 288.12 45.6387 287.594 46.1543 cv287.069 46.671 286.778 47.3614 286.722 48.2247 cvcp292.235 50.9122 mo293.979 51.1309 li293.706 52.1407 293.199 52.9239 292.46 53.4825 cv291.72 54.0391 290.776 54.3184 289.626 54.3184 cv288.178 54.3184 287.03 53.8741 286.182 52.9854 cv285.334 52.0967 284.91 50.8497 284.91 49.2461 cv284.91 47.586 285.338 46.2979 286.196 45.3809 cv287.053 44.4649 288.166 44.0059 289.533 44.0059 cv290.856 44.0059 291.938 44.4561 292.777 45.3555 cv293.616 46.2559 294.035 47.5215 294.035 49.1524 cv294.035 49.252 294.032 49.4014 294.026 49.5997 cv286.628 49.5997 li286.691 50.6807 286.999 51.5079 287.552 52.0821 cv288.106 52.6563 288.796 52.9434 289.624 52.9434 cv290.239 52.9434 290.764 52.7823 291.2 52.459 cv291.635 52.1358 291.98 51.6202 292.235 50.9122 cvf307.72 49.1309 mo307.104 49.379 306.18 49.5899 304.949 49.7637 cv304.251 49.8633 303.758 49.9756 303.469 50.0997 cv303.18 50.2247 302.957 50.4063 302.799 50.6446 cv302.642 50.8838 302.564 51.1485 302.564 51.4415 cv302.564 51.8887 302.735 52.2618 303.077 52.5586 cv303.418 52.8575 303.919 53.0059 304.578 53.0059 cv305.23 53.0059 305.81 52.8653 306.319 52.5821 cv306.827 52.3008 307.2 51.9141 307.438 51.4229 cv307.62 51.044 307.711 50.4844 307.711 49.7461 cv307.72 49.1309 licp307.814 52.8497 mo307.212 53.3868 306.623 53.7657 306.044 53.9864 cv305.466 54.2071 304.846 54.3184 304.184 54.3184 cv303.091 54.3184 302.25 54.0528 301.664 53.5225 cv301.077 52.9922 300.783 52.3135 300.783 51.4874 cv300.783 51.004 300.894 50.5606 301.116 50.1602 cv301.337 49.7598 301.628 49.4395 301.988 49.1973 cv302.347 48.9551 302.751 48.7715 303.202 48.6465 cv303.533 48.5606 304.033 48.4766 304.702 48.3956 cv306.064 48.2344 307.067 48.042 307.711 47.8184 cv307.717 47.5899 307.72 47.4454 307.72 47.3829 cv307.72 46.7032 307.562 46.2247 307.245 45.9463 cv306.816 45.5694 306.179 45.3809 305.334 45.3809 cv304.544 45.3809 303.962 45.5186 303.586 45.794 cv303.21 46.0694 302.932 46.5567 302.751 47.2559 cv301.064 47.0372 li301.213 46.3389 301.46 45.7754 301.802 45.3458 cv302.144 44.9161 302.639 44.586 303.287 44.3536 cv303.934 44.1221 304.685 44.0059 305.538 44.0059 cv306.384 44.0059 307.073 44.1055 307.602 44.3028 cv308.131 44.5 308.521 44.7481 308.77 45.0479 cv309.019 45.3477 309.193 45.7256 309.292 46.1827 cv309.348 46.4668 309.376 46.9805 309.376 47.7247 cv309.376 49.9561 li309.376 51.5118 309.41 52.4961 309.477 52.9102 cv309.544 53.3243 309.677 53.7208 309.876 54.0997 cv308.158 54.0997 li307.979 53.7442 307.865 53.3272 307.814 52.8497 cvf311.93 54.0997 mo311.93 44.2247 li313.461 44.2247 li313.461 45.7149 li313.838 45.0196 314.186 44.5606 314.504 44.3389 cv314.824 44.1172 315.174 44.0059 315.557 44.0059 cv316.11 44.0059 316.671 44.1836 317.243 44.5391 cv316.662 46.0723 li316.262 45.8409 315.864 45.7247 315.465 45.7247 cv315.109 45.7247 314.789 45.835 314.505 46.0547 cv314.221 46.2754 314.018 46.5811 313.895 46.9717 cv313.71 47.5674 313.618 48.2188 313.618 48.9258 cv313.618 54.0997 li311.93 54.0997 lif321.925 52.6084 mo322.144 54.086 li321.672 54.1856 321.25 54.2344 320.877 54.2344 cv320.269 54.2344 319.797 54.1387 319.462 53.9473 cv319.127 53.7559 318.891 53.504 318.754 53.1915 cv318.618 52.879 318.55 52.2208 318.55 51.2188 cv318.55 45.5469 li317.3 45.5469 li317.3 44.2344 li318.55 44.2344 li318.55 41.7911 li320.238 40.7872 li320.238 44.2344 li321.925 44.2344 li321.925 45.5469 li320.238 45.5469 li320.238 51.3086 li320.238 51.7852 320.267 52.0918 320.326 52.2266 cv320.385 52.3633 320.481 52.4717 320.615 52.5518 cv320.749 52.6329 320.94 52.6719 321.189 52.6719 cv321.375 52.6719 321.621 52.6514 321.925 52.6084 cvf328.844 54.0997 mo328.844 40.4747 li330.532 40.4747 li330.532 45.3594 li331.31 44.4571 332.292 44.0059 333.477 44.0059 cv334.206 44.0059 334.838 44.1504 335.376 44.4376 cv335.913 44.7266 336.297 45.125 336.529 45.6329 cv336.76 46.1407 336.876 46.878 336.876 47.8438 cv336.876 54.0997 li335.188 54.0997 li335.188 47.8418 li335.188 47.0059 335.008 46.3965 334.649 46.0157 cv334.29 45.6348 333.781 45.4434 333.123 45.4434 cv332.631 45.4434 332.168 45.5723 331.735 45.8292 cv331.301 46.086 330.993 46.4356 330.808 46.875 cv330.624 47.3155 330.532 47.9229 330.532 48.6973 cv330.532 54.0997 li328.844 54.0997 lif345.804 49.1309 mo345.188 49.379 344.264 49.5899 343.033 49.7637 cv342.335 49.8633 341.842 49.9756 341.553 50.0997 cv341.264 50.2247 341.041 50.4063 340.883 50.6446 cv340.726 50.8838 340.648 51.1485 340.648 51.4415 cv340.648 51.8887 340.819 52.2618 341.161 52.5586 cv341.502 52.8575 342.003 53.0059 342.662 53.0059 cv343.314 53.0059 343.894 52.8653 344.403 52.5821 cv344.911 52.3008 345.284 51.9141 345.522 51.4229 cv345.704 51.044 345.795 50.4844 345.795 49.7461 cv345.804 49.1309 licp345.898 52.8497 mo345.296 53.3868 344.707 53.7657 344.128 53.9864 cv343.55 54.2071 342.93 54.3184 342.268 54.3184 cv341.175 54.3184 340.334 54.0528 339.748 53.5225 cv339.161 52.9922 338.867 52.3135 338.867 51.4874 cv338.867 51.004 338.978 50.5606 339.2 50.1602 cv339.421 49.7598 339.712 49.4395 340.072 49.1973 cv340.431 48.9551 340.835 48.7715 341.286 48.6465 cv341.617 48.5606 342.117 48.4766 342.786 48.3956 cv344.148 48.2344 345.151 48.042 345.795 47.8184 cv345.801 47.5899 345.804 47.4454 345.804 47.3829 cv345.804 46.7032 345.646 46.2247 345.329 45.9463 cv344.9 45.5694 344.263 45.3809 343.418 45.3809 cv342.628 45.3809 342.046 45.5186 341.67 45.794 cv341.294 46.0694 341.016 46.5567 340.835 47.2559 cv339.148 47.0372 li339.297 46.3389 339.543 45.7754 339.886 45.3458 cv340.228 44.9161 340.723 44.586 341.371 44.3536 cv342.018 44.1221 342.769 44.0059 343.622 44.0059 cv344.468 44.0059 345.157 44.1055 345.686 44.3028 cv346.215 44.5 346.605 44.7481 346.854 45.0479 cv347.103 45.3477 347.277 45.7256 347.376 46.1827 cv347.432 46.4668 347.46 46.9805 347.46 47.7247 cv347.46 49.9561 li347.46 51.5118 347.494 52.4961 347.561 52.9102 cv347.628 53.3243 347.761 53.7208 347.96 54.0997 cv346.242 54.0997 li346.063 53.7442 345.949 53.3272 345.898 52.8497 cvf351.484 49.2188 mo351.484 50.4883 351.742 51.4268 352.259 52.0333 cv352.777 52.6407 353.403 52.9434 354.138 52.9434 cv354.886 52.9434 355.526 52.629 356.059 52.001 cv356.592 51.3731 356.859 50.3985 356.859 49.0801 cv356.859 47.8223 356.598 46.8819 356.078 46.2559 cv355.557 45.6309 354.936 45.3184 354.213 45.3184 cv353.497 45.3184 352.863 45.6514 352.311 46.3165 cv351.759 46.9825 351.484 47.9493 351.484 49.2188 cvcp349.984 57.8809 mo349.984 44.2247 li351.515 44.2247 li351.515 45.5137 li351.876 45.0108 352.282 44.6338 352.736 44.3829 cv353.189 44.1319 353.739 44.0059 354.384 44.0059 cv355.229 44.0059 355.974 44.2227 356.621 44.6563 cv357.266 45.0899 357.754 45.7012 358.084 46.4913 cv358.413 47.2813 358.578 48.1465 358.578 49.0879 cv358.578 50.0977 358.396 51.0059 358.033 51.8145 cv357.669 52.6231 357.142 53.2422 356.451 53.6729 cv355.758 54.1036 355.031 54.3184 354.268 54.3184 cv353.71 54.3184 353.208 54.2012 352.765 53.9649 cv352.321 53.7305 351.957 53.4327 351.671 53.0733 cv351.671 57.8809 li349.984 57.8809 lif362.069 49.2188 mo362.069 50.4883 362.327 51.4268 362.844 52.0333 cv363.362 52.6407 363.988 52.9434 364.723 52.9434 cv365.471 52.9434 366.111 52.629 366.644 52.001 cv367.177 51.3731 367.444 50.3985 367.444 49.0801 cv367.444 47.8223 367.183 46.8819 366.663 46.2559 cv366.142 45.6309 365.521 45.3184 364.798 45.3184 cv364.082 45.3184 363.448 45.6514 362.896 46.3165 cv362.344 46.9825 362.069 47.9493 362.069 49.2188 cvcp360.569 57.8809 mo360.569 44.2247 li362.1 44.2247 li362.1 45.5137 li362.46 45.0108 362.867 44.6338 363.321 44.3829 cv363.774 44.1319 364.324 44.0059 364.969 44.0059 cv365.814 44.0059 366.559 44.2227 367.206 44.6563 cv367.851 45.0899 368.339 45.7012 368.668 46.4913 cv368.998 47.2813 369.163 48.1465 369.163 49.0879 cv369.163 50.0977 368.981 51.0059 368.618 51.8145 cv368.254 52.6231 367.727 53.2422 367.036 53.6729 cv366.343 54.1036 365.616 54.3184 364.853 54.3184 cv364.294 54.3184 363.793 54.2012 363.35 53.9649 cv362.906 53.7305 362.542 53.4327 362.256 53.0733 cv362.256 57.8809 li360.569 57.8809 lif372.435 48.2247 mo377.966 48.2247 li377.891 47.3916 377.68 46.7676 377.332 46.3506 cv376.796 45.7042 376.103 45.3809 375.251 45.3809 cv374.48 45.3809 373.833 45.6387 373.307 46.1543 cv372.782 46.671 372.491 47.3614 372.435 48.2247 cvcp377.948 50.9122 mo379.691 51.1309 li379.418 52.1407 378.911 52.9239 378.171 53.4825 cv377.432 54.0391 376.488 54.3184 375.338 54.3184 cv373.89 54.3184 372.743 53.8741 371.894 52.9854 cv371.046 52.0967 370.623 50.8497 370.623 49.2461 cv370.623 47.586 371.051 46.2979 371.909 45.3809 cv372.766 44.4649 373.878 44.0059 375.246 44.0059 cv376.569 44.0059 377.65 44.4561 378.489 45.3555 cv379.328 46.2559 379.748 47.5215 379.748 49.1524 cv379.748 49.252 379.744 49.4014 379.738 49.5997 cv372.341 49.5997 li372.403 50.6807 372.71 51.5079 373.264 52.0821 cv373.818 52.6563 374.508 52.9434 375.335 52.9434 cv375.951 52.9434 376.476 52.7823 376.912 52.459 cv377.347 52.1358 377.693 51.6202 377.948 50.9122 cvf381.77 54.0997 mo381.77 44.2247 li383.301 44.2247 li383.301 45.628 li384.025 44.5469 385.07 44.0059 386.436 44.0059 cv387.029 44.0059 387.575 44.1133 388.072 44.3262 cv388.57 44.5411 388.942 44.8204 389.189 45.168 cv389.436 45.5147 389.61 45.9268 389.708 46.4043 cv389.77 46.7139 389.801 47.2559 389.801 48.0303 cv389.801 54.0997 li388.114 54.0997 li388.114 48.087 li388.114 47.4043 388.049 46.8946 387.919 46.5557 cv387.79 46.2178 387.56 45.9473 387.23 45.7461 cv386.9 45.545 386.512 45.4434 386.068 45.4434 cv385.358 45.4434 384.746 45.67 384.231 46.1231 cv383.715 46.5762 383.458 47.4356 383.458 48.7012 cv383.458 54.0997 li381.77 54.0997 lif391.73 51.0997 mo393.386 50.8809 li393.479 51.5469 393.737 52.0567 394.161 52.4122 cv394.584 52.7657 395.176 52.9434 395.936 52.9434 cv396.703 52.9434 397.271 52.7872 397.642 52.4747 cv398.013 52.1622 398.199 51.795 398.199 51.3731 cv398.199 50.9961 398.037 50.6983 397.711 50.4815 cv397.484 50.3331 396.916 50.1446 396.008 49.9141 cv394.786 49.6055 393.936 49.3379 393.46 49.1114 cv392.985 48.8848 392.625 48.5723 392.379 48.1729 cv392.134 47.7735 392.011 47.3321 392.011 46.8487 cv392.011 46.4092 392.112 46.002 392.313 45.627 cv392.514 45.252 392.788 44.9415 393.133 44.6934 cv393.393 44.502 393.748 44.3389 394.196 44.2051 cv394.644 44.0723 395.125 44.0059 395.638 44.0059 cv396.411 44.0059 397.089 44.1182 397.673 44.3418 cv398.258 44.5665 398.689 44.8692 398.967 45.252 cv399.246 45.6348 399.437 46.1465 399.542 46.7872 cv397.918 47.0059 li397.843 46.4961 397.628 46.0977 397.274 45.8106 cv396.918 45.5245 396.416 45.3809 395.768 45.3809 cv395.001 45.3809 394.455 45.5079 394.127 45.7618 cv393.8 46.0157 393.636 46.3126 393.636 46.6543 cv393.636 46.8711 393.705 47.0665 393.84 47.2383 cv393.976 47.418 394.189 47.5674 394.48 47.6856 cv394.646 47.7471 395.137 47.8897 395.953 48.1124 cv397.132 48.4278 397.956 48.6876 398.422 48.8887 cv398.888 49.0899 399.253 49.3829 399.519 49.7657 cv399.785 50.1504 399.918 50.627 399.918 51.1973 cv399.918 51.754 399.755 52.2793 399.43 52.7715 cv399.105 53.2637 398.636 53.6446 398.024 53.9141 cv397.412 54.1836 396.718 54.3184 395.945 54.3184 cv394.664 54.3184 393.687 54.0479 393.016 53.5069 cv392.344 52.9659 391.916 52.1631 391.73 51.0997 cvf407.16 54.0997 mo407.16 40.4747 li408.847 40.4747 li408.847 45.3594 li409.625 44.4571 410.606 44.0059 411.792 44.0059 cv412.52 44.0059 413.153 44.1504 413.69 44.4376 cv414.227 44.7266 414.612 45.125 414.843 45.6329 cv415.075 46.1407 415.191 46.878 415.191 47.8438 cv415.191 54.0997 li413.503 54.0997 li413.503 47.8418 li413.503 47.0059 413.323 46.3965 412.963 46.0157 cv412.604 45.6348 412.095 45.4434 411.438 45.4434 cv410.946 45.4434 410.484 45.5723 410.05 45.8292 cv409.617 46.086 409.308 46.4356 409.124 46.875 cv408.939 47.3155 408.847 47.9229 408.847 48.6973 cv408.847 54.0997 li407.16 54.0997 lif418.995 48.2247 mo424.526 48.2247 li424.452 47.3916 424.24 46.7676 423.892 46.3506 cv423.357 45.7042 422.664 45.3809 421.812 45.3809 cv421.041 45.3809 420.392 45.6387 419.867 46.1543 cv419.341 46.671 419.05 47.3614 418.995 48.2247 cvcp424.507 50.9122 mo426.251 51.1309 li425.978 52.1407 425.471 52.9239 424.732 53.4825 cv423.993 54.0391 423.048 54.3184 421.899 54.3184 cv420.451 54.3184 419.302 53.8741 418.455 52.9854 cv417.606 52.0967 417.182 50.8497 417.182 49.2461 cv417.182 47.586 417.611 46.2979 418.468 45.3809 cv419.326 44.4649 420.438 44.0059 421.805 44.0059 cv423.128 44.0059 424.21 44.4561 425.049 45.3555 cv425.888 46.2559 426.307 47.5215 426.307 49.1524 cv426.307 49.252 426.304 49.4014 426.298 49.5997 cv418.901 49.5997 li418.963 50.6807 419.271 51.5079 419.825 52.0821 cv420.378 52.6563 421.069 52.9434 421.896 52.9434 cv422.511 52.9434 423.037 52.7823 423.472 52.459 cv423.908 52.1358 424.252 51.6202 424.507 50.9122 cvf428.33 54.0997 mo428.33 44.2247 li429.861 44.2247 li429.861 45.7149 li430.238 45.0196 430.585 44.5606 430.904 44.3389 cv431.223 44.1172 431.574 44.0059 431.957 44.0059 cv432.509 44.0059 433.071 44.1836 433.642 44.5391 cv433.061 46.0723 li432.662 45.8409 432.263 45.7247 431.865 45.7247 cv431.508 45.7247 431.188 45.835 430.905 46.0547 cv430.621 46.2754 430.418 46.5811 430.294 46.9717 cv430.11 47.5674 430.017 48.2188 430.017 48.9258 cv430.017 54.0997 li428.33 54.0997 lif435.918 48.2247 mo441.449 48.2247 li441.375 47.3916 441.164 46.7676 440.815 46.3506 cv440.28 45.7042 439.586 45.3809 438.735 45.3809 cv437.963 45.3809 437.316 45.6387 436.791 46.1543 cv436.265 46.671 435.974 47.3614 435.918 48.2247 cvcp441.431 50.9122 mo443.174 51.1309 li442.901 52.1407 442.394 52.9239 441.655 53.4825 cv440.916 54.0391 439.971 54.3184 438.822 54.3184 cv437.374 54.3184 436.226 53.8741 435.377 52.9854 cv434.529 52.0967 434.105 50.8497 434.105 49.2461 cv434.105 47.586 434.535 46.2979 435.392 45.3809 cv436.25 44.4649 437.361 44.0059 438.728 44.0059 cv440.052 44.0059 441.133 44.4561 441.972 45.3555 cv442.811 46.2559 443.23 47.5215 443.23 49.1524 cv443.23 49.252 443.227 49.4014 443.221 49.5997 cv435.824 49.5997 li435.886 50.6807 436.194 51.5079 436.748 52.0821 cv437.301 52.6563 437.992 52.9434 438.819 52.9434 cv439.434 52.9434 439.96 52.7823 440.395 52.459 cv440.831 52.1358 441.175 51.6202 441.431 50.9122 cvf14.4952 193.122 mo14.4952 200.114 li14.4952 200.683 14.5699 201.057 14.7198 201.236 cv14.8692 201.415 15.1846 201.504 15.6656 201.504 cv15.7608 201.504 li15.7608 201.926 li12.542 201.926 li12.542 201.504 li12.6373 201.504 li13.1182 201.504 13.4336 201.415 13.5831 201.236 cv13.7325 201.057 13.8077 200.683 13.8077 200.114 cv13.8077 193.129 li13.8077 192.557 13.7325 192.183 13.5831 192.005 cv13.4336 191.828 13.1182 191.739 12.6373 191.739 cv12.542 191.739 li12.542 191.317 li14.9932 191.317 li18.9815 198.955 li22.6485 191.317 li25.167 191.317 li25.167 191.739 li25.0586 191.739 li24.585 191.739 24.2735 191.828 24.125 192.005 cv23.9756 192.183 23.9014 192.557 23.9014 193.129 cv23.9014 199.848 li23.9014 200.6 23.9756 201.063 24.125 201.24 cv24.2735 201.417 24.585 201.504 25.0586 201.504 cv25.167 201.504 li25.167 201.926 li21.3702 201.926 li21.3702 201.504 li21.4517 201.504 li21.9371 201.504 22.2559 201.417 22.4078 201.24 cv22.5596 201.063 22.6358 200.688 22.6358 200.114 cv22.6358 192.418 li18.5499 200.887 li14.4952 193.122 li0.7461 0.6758 0.668001 0.8984 cmykf29.8604 191.848 mo28.7803 191.848 li27.9688 191.848 27.4083 191.958 27.0987 192.176 cv26.7886 192.395 26.586 192.824 26.4903 193.461 cv26.4698 193.598 li25.9073 193.598 li26.1729 191.129 li27.3511 191.254 28.5796 191.317 29.8584 191.317 cv31.2842 191.317 li32.5626 191.317 33.7911 191.254 34.9698 191.129 cv35.2354 193.598 li34.6885 193.598 li34.6612 193.461 li34.565 192.824 34.3614 192.395 34.0508 192.176 cv33.7403 191.958 33.1783 191.848 32.3653 191.848 cv31.2823 191.848 li31.2823 200.114 li31.2823 200.69 31.3702 201.066 31.5455 201.242 cv31.7208 201.417 32.0938 201.504 32.6641 201.504 cv32.7666 201.504 li32.7666 201.926 li28.376 201.926 li28.376 201.504 li28.4786 201.504 li29.0533 201.504 29.4268 201.417 29.6006 201.242 cv29.7735 201.066 29.8604 200.69 29.8604 200.114 cv29.8604 191.848 lif38.4141 198.051 mo42.5752 198.051 li40.4502 193.053 li38.4141 198.051 licp38.2154 198.583 mo37.5772 200.163 li37.3902 200.61 37.2969 200.893 37.2969 201.011 cv37.2969 201.29 37.5313 201.45 38.001 201.491 cv38.1104 201.504 li38.1104 201.926 li35.5059 201.926 li35.5059 201.504 li35.6153 201.504 li35.8887 201.504 36.1143 201.408 36.292 201.213 cv36.4698 201.02 36.668 200.653 36.8868 200.115 cv40.6192 191.004 li41.0518 191.004 li44.9395 200.114 li45.1807 200.68 45.3721 201.053 45.5137 201.234 cv45.6548 201.415 45.8257 201.504 46.0264 201.504 cv46.1153 201.504 li46.1153 201.926 li42.9844 201.926 li42.9844 201.504 li43.1006 201.504 li43.379 201.504 43.5655 201.477 43.6612 201.422 cv43.7569 201.368 43.8047 201.26 43.8047 201.1 cv43.8047 200.968 43.6954 200.639 43.4766 200.114 cv42.8204 198.583 li38.2154 198.583 lif49.0235 198.051 mo53.1846 198.051 li51.0596 193.053 li49.0235 198.051 licp48.8248 198.583 mo48.1866 200.163 li47.9996 200.61 47.9063 200.893 47.9063 201.011 cv47.9063 201.29 48.1407 201.45 48.6104 201.491 cv48.7198 201.504 li48.7198 201.926 li46.1153 201.926 li46.1153 201.504 li46.2247 201.504 li46.4981 201.504 46.7237 201.408 46.9014 201.213 cv47.0792 201.02 47.2774 200.653 47.4961 200.115 cv51.2286 191.004 li51.6612 191.004 li55.5489 200.114 li55.7901 200.68 55.9815 201.053 56.1231 201.234 cv56.2642 201.415 56.4351 201.504 56.6358 201.504 cv56.7247 201.504 li56.7247 201.926 li53.5938 201.926 li53.5938 201.504 li53.71 201.504 li53.9883 201.504 54.1749 201.477 54.2706 201.422 cv54.3663 201.368 54.4141 201.26 54.4141 201.1 cv54.4141 200.968 54.3047 200.639 54.086 200.114 cv53.4297 198.583 li48.8248 198.583 lif68.4249 200.973 mo68.4249 201.629 li67.5499 201.962 66.6929 202.129 65.8545 202.129 cv64.7032 202.129 63.7676 201.776 63.0494 201.068 cv62.3311 200.361 61.9717 199.438 61.9717 198.3 cv61.9717 197.072 62.3643 196.062 63.1495 195.27 cv63.9346 194.479 64.9385 194.083 66.1592 194.083 cv67.1221 194.083 67.9708 194.37 68.7061 194.942 cv67.7471 195.989 li67.1485 195.042 66.4395 194.567 65.6187 194.567 cv64.9566 194.567 64.4307 194.865 64.0411 195.459 cv63.6509 196.055 63.4561 196.854 63.4561 197.858 cv63.4561 198.967 63.7105 199.834 64.2198 200.458 cv64.7286 201.083 65.4356 201.395 66.3409 201.395 cv67.0918 201.395 67.7867 201.254 68.4249 200.973 cvf74.1622 197.95 mo73.7725 198.073 li72.7139 198.405 72.0196 198.704 71.6895 198.969 cv71.3584 199.236 71.1934 199.619 71.1934 200.119 cv71.1934 200.446 71.3062 200.73 71.5323 200.971 cv71.7579 201.212 72.0235 201.333 72.3292 201.333 cv72.8399 201.333 73.3116 201.094 73.7452 200.617 cv74.023 200.303 74.1622 199.869 74.1622 199.314 cv74.1622 197.95 licp74.2715 200.569 mo73.8702 201.088 73.4449 201.479 72.9957 201.739 cv72.5464 202 72.0713 202.129 71.5694 202.129 cv71.0679 202.129 70.6504 201.959 70.3174 201.621 cv69.9844 201.281 69.8184 200.854 69.8184 200.339 cv69.8184 199.77 70.0821 199.286 70.6104 198.887 cv71.1387 198.489 72.0108 198.116 73.2266 197.77 cv74.1622 197.497 li74.1622 196.427 li74.1622 195.959 74.1348 195.633 74.0801 195.45 cv74.0254 195.266 73.9073 195.11 73.7247 194.983 cv73.4473 194.779 73.1055 194.676 72.7002 194.676 cv72.2813 194.676 71.9668 194.766 71.7579 194.944 cv71.5479 195.124 71.4434 195.393 71.4434 195.754 cv71.4434 196.098 li69.9747 196.567 li69.9747 196.362 li69.9747 195.814 70.2911 195.293 70.9234 194.801 cv71.5469 194.322 72.3223 194.083 73.2505 194.083 cv74.0196 194.083 74.5743 194.24 74.9161 194.553 cv75.2569 194.872 75.4278 195.385 75.4278 196.094 cv75.4278 199.328 li75.4278 200.151 75.5 200.702 75.6456 200.98 cv75.7906 201.258 76.0787 201.398 76.5098 201.398 cv76.6456 201.398 76.7955 201.387 76.959 201.364 cv76.959 201.754 li76.5157 202.004 76.0743 202.129 75.6358 202.129 cv75.2554 202.129 74.9512 202 74.7227 201.739 cv74.4942 201.479 74.3438 201.088 74.2715 200.569 cvf80.1216 201.944 mo80.3296 201.737 80.4336 201.485 80.4336 201.188 cv80.4336 200.897 80.3296 200.648 80.1216 200.44 cv79.9136 200.233 79.6636 200.129 79.3711 200.129 cv79.0787 200.129 78.8282 200.233 78.6202 200.44 cv78.4122 200.648 78.3086 200.897 78.3086 201.188 cv78.3086 201.485 78.4122 201.737 78.6202 201.944 cv78.8282 202.151 79.0787 202.254 79.3711 202.254 cv79.6636 202.254 79.9136 202.151 80.1216 201.944 cvf88.1143 192.723 mo88.1143 192.305 li91.504 191.004 li91.504 200.442 li91.504 200.897 91.6299 201.188 91.8829 201.315 cv92.1358 201.441 92.7042 201.504 93.5879 201.504 cv93.6016 201.504 li93.6153 201.504 li93.629 201.504 li93.629 201.926 li88.1133 201.926 li88.1133 201.504 li89.0274 201.504 89.6094 201.441 89.8614 201.315 cv90.1124 201.188 90.2383 200.897 90.2383 200.442 cv90.2383 192.363 li88.1143 192.723 lif99.6885 191.489 mo99.0499 191.489 98.5342 191.743 98.1421 192.25 cv97.75 192.759 97.5538 193.43 97.5538 194.264 cv97.5538 195.075 97.7588 195.735 98.1695 196.243 cv98.5801 196.75 99.1158 197.004 99.7774 197.004 cv100.48 197.004 101.038 196.764 101.451 196.284 cv101.863 195.803 102.07 195.157 102.07 194.346 cv102.07 193.535 101.841 192.856 101.385 192.309 cv100.929 191.762 100.364 191.489 99.6885 191.489 cvcp97.5069 201.591 mo97.712 201.668 97.9424 201.708 98.1973 201.708 cv99.3692 201.708 100.324 201.319 101.063 200.542 cv101.477 200.105 101.819 199.492 102.088 198.7 cv102.357 197.909 102.492 197.117 102.492 196.324 cv102.492 196.096 102.466 195.825 102.417 195.51 cv102.129 196.226 101.701 196.794 101.13 197.215 cv100.561 197.637 99.9332 197.848 99.2491 197.848 cv98.4009 197.848 97.7032 197.549 97.1558 196.953 cv96.6084 196.356 96.335 195.594 96.335 194.668 cv96.335 193.648 96.6866 192.782 97.3907 192.071 cv98.0948 191.36 98.9546 191.004 99.9708 191.004 cv101.119 191.004 102.055 191.479 102.78 192.428 cv103.504 193.377 103.867 194.604 103.867 196.106 cv103.867 197.877 103.346 199.342 102.306 200.5 cv101.265 201.66 99.9502 202.239 98.3604 202.239 cv98.0874 202.239 97.8028 202.213 97.5069 202.164 cv97.5069 201.591 lif109.02 191.489 mo108.381 191.489 107.866 191.743 107.474 192.25 cv107.082 192.759 106.885 193.43 106.885 194.264 cv106.885 195.075 107.09 195.735 107.501 196.243 cv107.912 196.75 108.447 197.004 109.109 197.004 cv109.811 197.004 110.369 196.764 110.782 196.284 cv111.194 195.803 111.401 195.157 111.401 194.346 cv111.401 193.535 111.172 192.856 110.716 192.309 cv110.26 191.762 109.695 191.489 109.02 191.489 cvcp106.838 201.591 mo107.043 201.668 107.274 201.708 107.529 201.708 cv108.701 201.708 109.655 201.319 110.394 200.542 cv110.808 200.105 111.15 199.492 111.419 198.7 cv111.688 197.909 111.823 197.117 111.823 196.324 cv111.823 196.096 111.797 195.825 111.748 195.51 cv111.46 196.226 111.032 196.794 110.461 197.215 cv109.892 197.637 109.265 197.848 108.581 197.848 cv107.732 197.848 107.035 197.549 106.487 196.953 cv105.94 196.356 105.667 195.594 105.667 194.668 cv105.667 193.648 106.018 192.782 106.722 192.071 cv107.426 191.36 108.286 191.004 109.302 191.004 cv110.45 191.004 111.386 191.479 112.111 192.428 cv112.835 193.377 113.198 194.604 113.198 196.106 cv113.198 197.877 112.677 199.342 111.637 200.5 cv110.596 201.66 109.282 202.239 107.692 202.239 cv107.419 202.239 107.134 202.213 106.838 202.164 cv106.838 201.591 lif116.919 201.926 mo117.385 199.659 118.835 196.543 121.27 192.583 cv115.263 192.583 li115.263 191.317 li122.326 191.317 li122.326 191.716 li121.192 193.536 120.333 195.208 119.748 196.736 cv119.163 198.263 118.714 199.993 118.404 201.926 cv116.919 201.926 lif115.792 10.0626 mo116.417 10.0626 li116.765 11.6895 117.325 12.8721 118.1 13.6114 cv118.874 14.3497 119.761 14.7188 120.761 14.7188 cv121.733 14.7188 122.424 14.4649 122.834 13.9551 cv123.244 13.4473 123.449 12.9102 123.449 12.3477 cv123.449 11.6934 123.235 11.1602 122.808 10.7461 cv122.525 10.4766 121.952 10.1241 121.086 9.68946 cv119.695 8.98438 li118.313 8.28711 117.338 7.59571 116.77 6.91211 cv116.202 6.22852 115.917 5.38477 115.917 4.38086 cv115.917 3.3125 116.293 2.31446 117.044 1.38868 cv117.795 0.462891 118.946 0 120.497 0 cv121.286 0 122.049 0.120118 122.786 0.359376 cv123.523 0.59961 123.944 0.71875 124.049 0.71875 cv124.286 0.71875 124.45 0.653321 124.541 0.521485 cv124.632 0.389649 124.705 0.215821 124.761 0 cv125.417 0 li125.417 4.75 li124.808 4.75 li124.524 3.64258 124.023 2.68848 123.306 1.88868 cv122.589 1.0879 121.718 0.6875 120.693 0.6875 cv119.972 0.6875 119.402 0.888672 118.983 1.29102 cv118.564 1.69336 118.355 2.18262 118.355 2.75879 cv118.355 3.44922 118.551 3.96583 118.944 4.30665 cv119.33 4.65626 120.196 5.16895 121.542 5.84571 cv123.154 6.65626 li123.873 7.01954 124.446 7.42188 124.874 7.86329 cv125.674 8.68946 126.074 9.69336 126.074 10.875 cv126.074 11.9795 125.645 13.0215 124.788 14 cv123.931 14.9795 122.558 15.4688 120.668 15.4688 cv120.234 15.4688 119.795 15.4297 119.351 15.3526 cv118.907 15.2745 118.467 15.1553 118.034 14.9932 cv117.614 14.8418 li117.516 14.8145 117.421 14.793 117.331 14.7754 cv117.24 14.7588 117.163 14.75 117.1 14.75 cv116.876 14.75 116.722 14.8126 116.638 14.9376 cv116.554 15.0626 116.48 15.2393 116.417 15.4688 cv115.792 15.4688 li115.792 10.0626 lif128.98 0.560547 mo129.311 0.228516 129.709 0.0625 130.178 0.0625 cv130.639 0.0625 131.035 0.228516 131.365 0.560547 cv131.695 0.892579 131.86 1.29493 131.86 1.76563 cv131.86 2.23731 131.695 2.63868 131.365 2.97071 cv131.035 3.30274 130.639 3.46876 130.178 3.46876 cv129.709 3.46876 129.311 3.30274 128.98 2.97071 cv128.65 2.63868 128.485 2.23731 128.485 1.76563 cv128.485 1.29493 128.65 0.892579 128.98 0.560547 cvcp127.548 14.625 mo127.926 14.5626 128.186 14.4678 128.326 14.3399 cv128.536 14.1504 128.642 13.8067 128.642 13.3126 cv128.642 6.8125 li128.642 6.38575 128.568 6.09571 128.42 5.93946 cv128.273 5.78516 127.982 5.66993 127.548 5.59376 cv127.548 5.0625 li131.735 5.0625 li131.735 13.4063 li131.735 13.876 131.805 14.1778 131.946 14.3106 cv132.086 14.4434 132.349 14.5479 132.735 14.625 cv132.735 15.1563 li127.548 15.1563 li127.548 14.625 lif133.624 14.625 mo134.012 14.5733 134.28 14.4874 134.426 14.3672 cv134.662 14.1778 134.78 13.8262 134.78 13.3126 cv134.78 6.8125 li134.78 6.37208 134.7 6.07227 134.54 5.91407 cv134.38 5.75586 134.075 5.64844 133.624 5.59376 cv133.624 5.0625 li137.749 5.0625 li137.749 6.67774 li138.11 6.19922 138.461 5.82715 138.801 5.5625 cv139.432 5.08399 140.134 4.84376 140.906 4.84376 cv141.778 4.84376 142.455 5.05079 142.937 5.4668 cv143.207 5.70313 143.461 6.08887 143.703 6.625 cv143.852 6.625 li144.265 6.11719 144.66 5.73438 145.037 5.47657 cv145.635 5.05469 146.286 4.84376 146.991 4.84376 cv147.759 4.84376 148.437 5.08985 149.024 5.58008 cv149.611 6.07227 149.905 6.84766 149.905 7.90821 cv149.905 13.4063 li149.905 13.9043 149.985 14.2208 150.146 14.3575 cv150.308 14.4942 150.592 14.5831 150.999 14.625 cv150.999 15.1563 li145.834 15.1563 li145.834 14.625 li146.233 14.5684 146.512 14.4727 146.669 14.334 cv146.826 14.1973 146.905 13.8848 146.905 13.3985 cv146.905 8.10547 li146.905 7.53614 146.821 7.09571 146.653 6.78223 cv146.485 6.46876 146.166 6.3125 145.694 6.3125 cv145.316 6.3125 144.918 6.48536 144.5 6.83008 cv144.082 7.17579 143.874 7.41602 143.874 7.55079 cv143.874 13.3985 li143.874 13.8711 143.945 14.1739 144.087 14.3086 cv144.23 14.4415 144.498 14.5479 144.891 14.625 cv144.891 15.1563 li139.775 15.1563 li139.775 14.625 li140.159 14.5762 140.433 14.4825 140.597 14.3448 cv140.76 14.2071 140.842 13.8926 140.842 13.3985 cv140.842 8.10547 li140.842 7.55079 140.764 7.11329 140.607 6.79297 cv140.451 6.47266 140.127 6.3125 139.636 6.3125 cv139.188 6.3125 138.772 6.49805 138.387 6.86817 cv138.003 7.23829 137.811 7.47071 137.811 7.5625 cv137.811 13.3985 li137.811 13.8711 137.878 14.1739 138.014 14.3086 cv138.149 14.4415 138.416 14.5479 138.814 14.625 cv138.814 15.1563 li133.624 15.1563 li133.624 14.625 lif159.462 12.7022 mo159.609 12.1221 159.683 11.2872 159.683 10.1993 cv159.683 8.93848 159.57 7.9336 159.346 7.18555 cv159.121 6.4375 158.664 6.0625 157.975 6.0625 cv157.511 6.0625 157.096 6.27051 156.731 6.68555 cv156.366 7.10157 156.183 7.40235 156.183 7.5879 cv156.183 12.9385 li156.183 13.1534 156.357 13.4317 156.705 13.7715 cv157.052 14.1114 157.444 14.2813 157.88 14.2813 cv158.661 14.2813 159.188 13.7549 159.462 12.7022 cvcp151.871 19.125 mo152.341 19.0772 152.662 18.9727 152.833 18.8126 cv153.003 18.6524 153.089 18.3497 153.089 17.9063 cv153.089 6.8125 li153.089 6.37208 153.01 6.07422 152.851 5.91895 cv152.691 5.76368 152.385 5.65626 151.933 5.59376 cv151.933 5.0625 li156.121 5.0625 li156.121 6.51368 li156.417 6.01172 156.707 5.64258 156.989 5.40528 cv157.498 4.98926 158.148 4.78126 158.939 4.78126 cv160.076 4.78126 161.021 5.2129 161.773 6.07715 cv162.525 6.94141 162.902 8.23047 162.902 9.94336 cv162.902 11.5352 162.498 12.8536 161.69 13.9004 cv160.883 14.9454 159.9 15.4688 158.744 15.4688 cv158.151 15.4688 157.59 15.2979 157.062 14.9571 cv156.779 14.7764 156.486 14.5186 156.183 14.1846 cv156.183 16.0157 li156.19 16.9893 156.197 17.5362 156.204 17.6563 cv156.254 18.2344 156.403 18.6299 156.65 18.8438 cv156.897 19.0577 157.311 19.1827 157.892 19.2188 cv157.892 19.6563 li151.871 19.6563 li151.871 19.125 lif163.938 14.625 mo164.336 14.5313 164.618 14.4083 164.784 14.2579 cv164.949 14.1055 165.032 13.7911 165.032 13.3126 cv165.032 2.125 li165.032 1.67969 164.955 1.38868 164.8 1.25196 cv164.646 1.11524 164.358 1 163.938 0.90625 cv163.938 0.375 li168.126 0.375 li168.126 13.3126 li168.126 13.7891 168.206 14.1016 168.367 14.2481 cv168.527 14.3956 168.812 14.5215 169.22 14.625 cv169.22 15.1563 li163.938 15.1563 li163.938 14.625 lif176.202 9.03126 mo176.187 7.74415 176.085 6.84376 175.896 6.33106 cv175.707 5.81836 175.329 5.5625 174.762 5.5625 cv174.18 5.5625 173.782 5.85743 173.567 6.44922 cv173.352 7.03907 173.23 7.9004 173.202 9.03126 cv176.202 9.03126 licp171.518 6.23633 mo172.417 5.3086 173.499 4.84376 174.766 4.84376 cv175.489 4.84376 176.169 5.03321 176.806 5.41016 cv177.443 5.78809 177.934 6.31153 178.277 6.98047 cv178.535 7.48633 178.713 8.14258 178.814 8.94727 cv178.864 9.32422 178.889 9.61329 178.889 9.8125 cv173.264 9.8125 li173.314 10.6846 173.458 11.4395 173.695 12.0782 cv174.126 13.2754 174.884 13.875 175.97 13.875 cv176.487 13.875 176.976 13.7159 177.436 13.3965 cv177.716 13.2051 178.064 12.8829 178.481 12.4288 cv178.983 12.7374 li178.303 13.8477 177.516 14.6192 176.622 15.0528 cv176.042 15.3301 175.376 15.4688 174.625 15.4688 cv173.544 15.4688 172.531 15.0459 171.587 14.1993 cv170.643 13.3536 170.17 12.002 170.17 10.1456 cv170.17 8.4668 170.62 7.16407 171.518 6.23633 cvf185.218 14.5938 mo186.023 14.5723 186.542 14.42 186.775 14.1348 cv187.008 13.8506 187.125 13.4307 187.125 12.875 cv187.125 2.50586 li186.457 1.75977 186.045 1.32032 185.889 1.18848 cv185.732 1.05665 185.519 0.972657 185.25 0.9375 cv185.25 0.375 li189.883 0.375 li197.393 9.53126 li197.5 9.53126 li197.5 3.09376 li197.5 2.35352 197.364 1.8252 197.093 1.50879 cv196.822 1.19239 196.281 1.00196 195.468 0.9375 cv195.468 0.375 li200.187 0.375 li200.187 0.9375 li199.503 1.04883 199.046 1.19922 198.815 1.38868 cv198.584 1.57618 198.468 2 198.468 2.65626 cv198.468 15.5938 li197.859 15.5938 li188.243 3.8711 li188.093 3.8711 li188.093 12.4376 li188.093 13.1094 188.185 13.586 188.37 13.8643 cv188.66 14.3145 189.255 14.5586 190.156 14.5938 cv190.156 15.1563 li185.218 15.1563 li185.218 14.5938 lif207.167 9.03126 mo207.152 7.74415 207.05 6.84376 206.861 6.33106 cv206.672 5.81836 206.294 5.5625 205.727 5.5625 cv205.145 5.5625 204.747 5.85743 204.532 6.44922 cv204.317 7.03907 204.195 7.9004 204.167 9.03126 cv207.167 9.03126 licp202.483 6.23633 mo203.381 5.3086 204.464 4.84376 205.731 4.84376 cv206.454 4.84376 207.134 5.03321 207.771 5.41016 cv208.408 5.78809 208.898 6.31153 209.242 6.98047 cv209.5 7.48633 209.678 8.14258 209.779 8.94727 cv209.829 9.32422 209.854 9.61329 209.854 9.8125 cv204.229 9.8125 li204.279 10.6846 204.423 11.4395 204.66 12.0782 cv205.091 13.2754 205.849 13.875 206.935 13.875 cv207.452 13.875 207.94 13.7159 208.4 13.3965 cv208.681 13.2051 209.029 12.8829 209.446 12.4288 cv209.948 12.7374 li209.268 13.8477 208.481 14.6192 207.586 15.0528 cv207.006 15.3301 206.341 15.4688 205.59 15.4688 cv204.509 15.4688 203.496 15.0459 202.552 14.1993 cv201.607 13.3536 201.135 12.002 201.135 10.1456 cv201.135 8.4668 201.584 7.16407 202.483 6.23633 cvf210.779 6.03126 mo210.779 5.42188 li210.969 5.24415 211.206 5.03418 211.489 4.792 cv211.864 4.44336 212.217 4.08399 212.549 3.7129 cv213.207 2.98829 213.804 2.20801 214.341 1.375 cv214.904 1.375 li214.904 5.0625 li216.998 5.0625 li216.998 6.03126 li214.904 6.03126 li214.904 12.6495 li214.904 12.9571 214.95 13.2149 215.042 13.4229 cv215.185 13.7452 215.419 13.9063 215.746 13.9063 cv216.03 13.9063 216.269 13.8067 216.46 13.6055 cv216.652 13.4063 216.844 13.129 217.037 12.7754 cv217.56 13.0313 li217.305 13.625 217 14.1094 216.646 14.4825 cv216.023 15.1407 215.262 15.4688 214.363 15.4688 cv213.853 15.4688 213.407 15.3731 213.024 15.1797 cv212.288 14.8106 211.915 14.1348 211.904 13.1553 cv211.904 6.03126 li210.779 6.03126 lif230.537 9.96876 mo228.45 4.90626 li228.284 4.90626 li226.336 9.96876 li230.537 9.96876 licp222.332 14.5938 mo222.859 14.5586 223.283 14.3184 223.604 13.876 cv223.811 13.5977 224.107 12.9834 224.492 12.0333 cv229.335 0.0625 li229.962 0.0625 li234.852 11.5508 li235.401 12.8438 235.811 13.6778 236.083 14.0528 cv236.353 14.4278 236.739 14.6084 237.238 14.5938 cv237.238 15.1563 li230.144 15.1563 li230.144 14.5938 li230.861 14.5655 231.332 14.504 231.557 14.4122 cv231.783 14.3184 231.895 14.0821 231.895 13.7032 cv231.895 13.5313 231.838 13.2696 231.724 12.92 cv231.653 12.7129 231.556 12.4629 231.434 12.17 cv230.875 10.8438 li225.982 10.8438 li225.659 11.7198 225.451 12.2911 225.357 12.5567 cv225.165 13.1182 225.069 13.5274 225.069 13.7833 cv225.069 14.0958 225.277 14.3243 225.694 14.4659 cv225.94 14.544 226.309 14.587 226.8 14.5938 cv226.8 15.1563 li222.332 15.1563 li222.332 14.5938 lif238.124 14.625 mo238.541 14.5762 238.831 14.4766 238.994 14.3282 cv239.156 14.1797 239.245 13.8926 239.259 13.4688 cv239.28 12.8213 li239.28 6.8125 li239.28 6.37208 239.202 6.07227 239.046 5.91407 cv238.891 5.75586 238.584 5.64844 238.124 5.59376 cv238.124 5.0625 li242.28 5.0625 li242.28 6.82422 li242.744 6.2168 243.204 5.73633 243.66 5.37891 cv244.117 5.02247 244.644 4.84376 245.244 4.84376 cv245.693 4.84376 246.098 4.98731 246.458 5.27442 cv246.819 5.56153 246.999 5.98047 246.999 6.53321 cv246.999 6.95899 246.872 7.3086 246.618 7.58594 cv246.364 7.86133 246.033 8 245.626 8 cv245.16 8 244.757 7.78711 244.418 7.35938 cv244.078 6.93262 243.84 6.71876 243.705 6.71876 cv243.411 6.71876 243.116 6.89551 242.819 7.24903 cv242.522 7.60254 242.374 8.11524 242.374 8.78711 cv242.374 12.9376 li242.374 13.6504 242.478 14.0958 242.687 14.2735 cv242.896 14.4522 243.312 14.5694 243.936 14.625 cv243.936 15.1563 li238.124 15.1563 li238.124 14.625 lif247.83 6.03126 mo247.83 5.42188 li248.02 5.24415 248.257 5.03418 248.541 4.792 cv248.915 4.44336 249.268 4.08399 249.6 3.7129 cv250.257 2.98829 250.855 2.20801 251.392 1.375 cv251.955 1.375 li251.955 5.0625 li254.048 5.0625 li254.048 6.03126 li251.955 6.03126 li251.955 12.6495 li251.955 12.9571 252 13.2149 252.093 13.4229 cv252.236 13.7452 252.47 13.9063 252.797 13.9063 cv253.082 13.9063 253.32 13.8067 253.511 13.6055 cv253.704 13.4063 253.895 13.129 254.087 12.7754 cv254.611 13.0313 li254.356 13.625 254.051 14.1094 253.698 14.4825 cv253.075 15.1407 252.313 15.4688 251.414 15.4688 cv250.904 15.4688 250.458 15.3731 250.076 15.1797 cv249.339 14.8106 248.965 14.1348 248.955 13.1553 cv248.955 6.03126 li247.83 6.03126 lif266.078 14.1075 mo266.223 14.3067 266.533 14.4063 267.007 14.4063 cv268.294 14.4063 269.352 13.9493 270.18 13.0372 cv271.008 12.1231 271.422 10.3702 271.422 7.77637 cv271.422 6.23438 271.2 4.90918 270.753 3.80079 cv270.032 2.01758 268.815 1.125 267.103 1.125 cv266.537 1.125 266.168 1.2461 265.999 1.48731 cv265.885 1.64356 265.829 1.94532 265.829 2.39356 cv265.829 13.1377 li265.85 13.586 265.933 13.9092 266.078 14.1075 cvcp260.454 14.5938 mo261.007 14.5586 261.406 14.4805 261.651 14.3594 cv262.082 14.1397 262.297 13.7383 262.297 13.1563 cv262.297 2.375 li262.297 1.81446 262.092 1.42383 261.683 1.20313 cv261.446 1.07618 261.036 0.987305 260.454 0.9375 cv260.454 0.375 li267.135 0.375 li269.832 0.375 271.887 1.09376 273.303 2.53223 cv274.591 3.84278 275.235 5.60157 275.235 7.8086 cv275.235 9.78711 274.587 11.4649 273.292 12.8389 cv271.834 14.3838 269.856 15.1563 267.359 15.1563 cv260.454 15.1563 li260.454 14.5938 lif277.772 0.560547 mo278.102 0.228516 278.501 0.0625 278.97 0.0625 cv279.431 0.0625 279.827 0.228516 280.157 0.560547 cv280.487 0.892579 280.652 1.29493 280.652 1.76563 cv280.652 2.23731 280.487 2.63868 280.157 2.97071 cv279.827 3.30274 279.431 3.46876 278.97 3.46876 cv278.501 3.46876 278.102 3.30274 277.772 2.97071 cv277.442 2.63868 277.277 2.23731 277.277 1.76563 cv277.277 1.29493 277.442 0.892579 277.772 0.560547 cvcp276.339 14.625 mo276.718 14.5626 276.977 14.4678 277.118 14.3399 cv277.328 14.1504 277.433 13.8067 277.433 13.3126 cv277.433 6.8125 li277.433 6.38575 277.36 6.09571 277.212 5.93946 cv277.065 5.78516 276.774 5.66993 276.339 5.59376 cv276.339 5.0625 li280.527 5.0625 li280.527 13.4063 li280.527 13.876 280.597 14.1778 280.738 14.3106 cv280.877 14.4434 281.141 14.5479 281.527 14.625 cv281.527 15.1563 li276.339 15.1563 li276.339 14.625 lif287.845 13.585 mo288.014 13.4571 288.214 13.2559 288.446 12.9844 cv288.446 9.78126 li287.87 9.92383 287.364 10.1495 286.928 10.4561 cv286.19 10.9776 285.821 11.6426 285.821 12.4493 cv285.821 12.9278 285.928 13.2911 286.142 13.5372 cv286.357 13.7833 286.597 13.9063 286.865 13.9063 cv287.216 13.9063 287.542 13.7989 287.845 13.585 cvcp284.031 10.7745 mo284.983 10.1973 286.475 9.61622 288.508 9.03126 cv288.508 7.45118 li288.508 6.80665 288.369 6.33204 288.09 6.02344 cv287.812 5.7168 287.319 5.5625 286.61 5.5625 cv286.212 5.5625 285.887 5.63477 285.633 5.78028 cv285.38 5.92579 285.253 6.10743 285.253 6.32618 cv285.253 6.41114 285.268 6.48243 285.296 6.53907 cv285.325 6.59571 285.368 6.65528 285.424 6.71876 cv285.552 6.86719 li285.652 6.98829 285.732 7.1211 285.792 7.26563 cv285.853 7.41016 285.883 7.56446 285.883 7.72657 cv285.883 8.13672 285.747 8.45313 285.473 8.67579 cv285.2 8.89844 284.882 9.00977 284.521 9.00977 cv284.102 9.00977 283.745 8.88672 283.451 8.63868 cv283.156 8.39063 283.008 8.03321 283.008 7.56446 cv283.008 6.72852 283.403 6.06641 284.193 5.57715 cv284.982 5.0879 285.953 4.84376 287.105 4.84376 cv288.342 4.84376 289.376 5.08204 290.208 5.5586 cv291.034 6.04297 291.446 6.93165 291.446 8.22657 cv291.446 13.5196 li291.446 13.6758 291.487 13.8096 291.57 13.92 cv291.652 14.0303 291.744 14.085 291.844 14.085 cv291.93 14.085 292.007 14.0694 292.076 14.0372 cv292.144 14.0049 292.25 13.918 292.393 13.7754 cv292.727 14.2344 li292.3 14.7315 291.827 15.0792 291.307 15.2774 cv290.98 15.4043 290.634 15.4688 290.272 15.4688 cv289.625 15.4688 289.151 15.2793 288.852 14.9004 cv288.681 14.6876 288.556 14.3692 288.478 13.9473 cv287.873 14.5547 287.189 14.9834 286.427 15.2325 cv285.964 15.3907 285.508 15.4688 285.059 15.4688 cv284.46 15.4688 283.902 15.2774 283.382 14.8965 cv282.862 14.5157 282.602 13.9219 282.602 13.1163 cv282.602 12.1329 283.079 11.3516 284.031 10.7745 cvf296.903 10.2305 mo297.114 10.8692 297.518 11.1876 298.115 11.1876 cv298.655 11.1876 299.027 10.9483 299.231 10.4698 cv299.434 9.99122 299.537 9.29102 299.537 8.36915 cv299.537 7.39161 299.429 6.67969 299.215 6.23243 cv299 5.78614 298.634 5.5625 298.115 5.5625 cv297.545 5.5625 297.166 5.80176 296.977 6.28028 cv296.788 6.75879 296.693 7.45508 296.693 8.36915 cv296.693 9.20704 296.762 9.82618 296.903 10.2305 cvcp296.158 18.585 mo296.634 18.8399 297.325 18.9688 298.229 18.9688 cv299.034 18.9688 299.698 18.9043 300.22 18.7774 cv301.202 18.5352 301.693 18.0899 301.693 17.4434 cv301.693 17.0665 301.553 16.7833 301.274 16.5958 cv300.995 16.4063 300.489 16.3126 299.754 16.3126 cv296.195 16.3126 li295.968 16.4971 295.806 16.6543 295.708 16.7813 cv295.531 17.0157 295.443 17.2657 295.443 17.5293 cv295.443 17.9766 295.681 18.3282 296.158 18.585 cvcp293.889 16.7149 mo294.146 16.3829 294.59 16.168 295.222 16.0684 cv295.222 15.9209 li294.796 15.7569 294.489 15.5899 294.297 15.42 cv293.957 15.1133 293.787 14.7051 293.787 14.1924 cv293.787 13.5811 294.054 13.0586 294.589 12.6241 cv295.125 12.1895 295.647 11.8877 296.158 11.7168 cv296.158 11.5684 li295.42 11.2696 294.826 10.8438 294.373 10.2891 cv293.919 9.73633 293.693 9.06446 293.693 8.2754 cv293.693 7.28126 294.09 6.45997 294.886 5.81348 cv295.681 5.167 296.757 4.84376 298.115 4.84376 cv298.626 4.84376 299.095 4.89161 299.521 4.98633 cv299.948 5.08106 300.278 5.17969 300.512 5.28126 cv303.391 5.28126 li303.391 6.45313 li301.621 6.45313 li301.905 6.73047 302.124 7.05469 302.276 7.42481 cv302.428 7.79493 302.505 8.19727 302.505 8.63086 cv302.505 9.99708 301.853 10.9336 300.55 11.4376 cv299.867 11.709 299.015 11.8438 297.998 11.8438 cv297.776 11.8438 297.631 11.8399 297.564 11.8331 cv297.497 11.8262 297.395 11.8223 297.26 11.8223 cv297.046 11.8575 296.822 11.9708 296.587 12.1622 cv296.345 12.3594 296.224 12.5967 296.224 12.8721 cv296.224 13.0918 296.284 13.2618 296.405 13.3809 cv296.526 13.502 296.693 13.5762 296.907 13.6036 cv297.013 13.6182 297.24 13.6358 297.588 13.6563 cv297.937 13.6778 298.208 13.6876 298.399 13.6876 cv299.818 13.709 li300.621 13.7227 301.296 13.8399 301.844 14.0596 cv302.889 14.4854 303.412 15.2481 303.412 16.3477 cv303.412 17.7657 302.631 18.7403 301.073 19.2725 cv300.25 19.5489 299.216 19.6876 297.969 19.6876 cv296.949 19.6876 296.07 19.5879 295.334 19.3887 cv294.115 19.0538 293.505 18.4844 293.505 17.6807 cv293.505 17.3672 293.633 17.045 293.889 16.7149 cvf304.314 14.625 mo304.731 14.5762 305.021 14.4766 305.183 14.3282 cv305.346 14.1797 305.434 13.8926 305.449 13.4688 cv305.47 12.8213 li305.47 6.8125 li305.47 6.37208 305.392 6.07227 305.237 5.91407 cv305.081 5.75586 304.773 5.64844 304.314 5.59376 cv304.314 5.0625 li308.47 5.0625 li308.47 6.82422 li308.933 6.2168 309.393 5.73633 309.85 5.37891 cv310.306 5.02247 310.834 4.84376 311.434 4.84376 cv311.883 4.84376 312.288 4.98731 312.648 5.27442 cv313.008 5.56153 313.189 5.98047 313.189 6.53321 cv313.189 6.95899 313.061 7.3086 312.807 7.58594 cv312.553 7.86133 312.222 8 311.815 8 cv311.35 8 310.948 7.78711 310.608 7.35938 cv310.268 6.93262 310.03 6.71876 309.894 6.71876 cv309.601 6.71876 309.306 6.89551 309.009 7.24903 cv308.712 7.60254 308.564 8.11524 308.564 8.78711 cv308.564 12.9376 li308.564 13.6504 308.668 14.0958 308.877 14.2735 cv309.086 14.4522 309.502 14.5694 310.126 14.625 cv310.126 15.1563 li304.314 15.1563 li304.314 14.625 lif319.418 13.585 mo319.587 13.4571 319.788 13.2559 320.02 12.9844 cv320.02 9.78126 li319.444 9.92383 318.937 10.1495 318.501 10.4561 cv317.763 10.9776 317.395 11.6426 317.395 12.4493 cv317.395 12.9278 317.501 13.2911 317.716 13.5372 cv317.93 13.7833 318.171 13.9063 318.438 13.9063 cv318.79 13.9063 319.117 13.7989 319.418 13.585 cvcp315.604 10.7745 mo316.556 10.1973 318.049 9.61622 320.083 9.03126 cv320.083 7.45118 li320.083 6.80665 319.943 6.33204 319.665 6.02344 cv319.386 5.7168 318.892 5.5625 318.184 5.5625 cv317.787 5.5625 317.46 5.63477 317.208 5.78028 cv316.954 5.92579 316.828 6.10743 316.828 6.32618 cv316.828 6.41114 316.841 6.48243 316.87 6.53907 cv316.898 6.59571 316.941 6.65528 316.999 6.71876 cv317.126 6.86719 li317.226 6.98829 317.306 7.1211 317.367 7.26563 cv317.427 7.41016 317.458 7.56446 317.458 7.72657 cv317.458 8.13672 317.321 8.45313 317.047 8.67579 cv316.774 8.89844 316.457 9.00977 316.094 9.00977 cv315.675 9.00977 315.319 8.88672 315.024 8.63868 cv314.729 8.39063 314.583 8.03321 314.583 7.56446 cv314.583 6.72852 314.977 6.06641 315.766 5.57715 cv316.555 5.0879 317.526 4.84376 318.678 4.84376 cv319.916 4.84376 320.951 5.08204 321.783 5.5586 cv322.607 6.04297 323.02 6.93165 323.02 8.22657 cv323.02 13.5196 li323.02 13.6758 323.061 13.8096 323.143 13.92 cv323.226 14.0303 323.318 14.085 323.418 14.085 cv323.504 14.085 323.581 14.0694 323.649 14.0372 cv323.717 14.0049 323.824 13.918 323.967 13.7754 cv324.301 14.2344 li323.874 14.7315 323.401 15.0792 322.881 15.2774 cv322.553 15.4043 322.208 15.4688 321.845 15.4688 cv321.198 15.4688 320.724 15.2793 320.425 14.9004 cv320.254 14.6876 320.13 14.3692 320.052 13.9473 cv319.447 14.5547 318.762 14.9834 318 15.2325 cv317.538 15.3907 317.082 15.4688 316.633 15.4688 cv316.035 15.4688 315.475 15.2774 314.956 14.8965 cv314.436 14.5157 314.176 13.9219 314.176 13.1163 cv314.176 12.1329 314.652 11.3516 315.604 10.7745 cvf324.922 14.625 mo325.311 14.5733 325.579 14.4874 325.724 14.3672 cv325.96 14.1778 326.079 13.8262 326.079 13.3126 cv326.079 6.8125 li326.079 6.37208 325.999 6.07227 325.838 5.91407 cv325.679 5.75586 325.374 5.64844 324.922 5.59376 cv324.922 5.0625 li329.047 5.0625 li329.047 6.67774 li329.409 6.19922 329.759 5.82715 330.1 5.5625 cv330.731 5.08399 331.432 4.84376 332.205 4.84376 cv333.077 4.84376 333.753 5.05079 334.236 5.4668 cv334.505 5.70313 334.76 6.08887 335.001 6.625 cv335.151 6.625 li335.563 6.11719 335.958 5.73438 336.335 5.47657 cv336.933 5.05469 337.584 4.84376 338.29 4.84376 cv339.058 4.84376 339.736 5.08985 340.323 5.58008 cv340.91 6.07227 341.204 6.84766 341.204 7.90821 cv341.204 13.4063 li341.204 13.9043 341.284 14.2208 341.445 14.3575 cv341.606 14.4942 341.89 14.5831 342.297 14.625 cv342.297 15.1563 li337.132 15.1563 li337.132 14.625 li337.532 14.5684 337.81 14.4727 337.967 14.334 cv338.125 14.1973 338.204 13.8848 338.204 13.3985 cv338.204 8.10547 li338.204 7.53614 338.12 7.09571 337.952 6.78223 cv337.784 6.46876 337.464 6.3125 336.993 6.3125 cv336.615 6.3125 336.216 6.48536 335.798 6.83008 cv335.38 7.17579 335.172 7.41602 335.172 7.55079 cv335.172 13.3985 li335.172 13.8711 335.244 14.1739 335.386 14.3086 cv335.529 14.4415 335.796 14.5479 336.19 14.625 cv336.19 15.1563 li331.074 15.1563 li331.074 14.625 li331.458 14.5762 331.731 14.4825 331.895 14.3448 cv332.059 14.2071 332.141 13.8926 332.141 13.3985 cv332.141 8.10547 li332.141 7.55079 332.062 7.11329 331.906 6.79297 cv331.75 6.47266 331.425 6.3125 330.935 6.3125 cv330.487 6.3125 330.07 6.49805 329.686 6.86817 cv329.301 7.23829 329.11 7.47071 329.11 7.5625 cv329.11 13.3985 li329.11 13.8711 329.177 14.1739 329.312 14.3086 cv329.448 14.4415 329.714 14.5479 330.113 14.625 cv330.113 15.1563 li324.922 15.1563 li324.922 14.625 lif0 24.9131 mo458.022 24.9131 li@0 217.914 mo458.022 217.914 li@248.827 104.956 mo222.761 118.375 li232.389 120.88 li216.921 136.862 li242.502 123.416 li235.423 118.358 li248.827 104.956 li0 0.9531 0.8945 0 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (tim whidden) (wavexpress, inc.)%%Title: (Simple_Net_Art_Diagram.eps)%%CreationDate: 4/12/04 9:21 AM%AI9_DataStream%Gb",KpKmI$[ci,?^I'CM![P:B;!fO*6g24Z!J*(*B(%a0gh4ApEplWrcC&a')pe"^>F(S@<gT,::2AZ_Vr$cfC>FC&;j*;QAMGKM%8kP`[.\/b:?8`#%+ur(m3)hLX0WYD2jW)Oln-@5$'NU=SZXUC%C,\2kEkbgo$jME'X4n`W;h_t:S^_B8'Ac\d%ujVjqlc78WmlKr%[!F.5l-36rn+PM$@7n\ikSa,L5J7rM2t/j(gN\+uWO54g7N"C-e.:='H@T<mDtre%`c)4Q6Al6P;`K1bFoqeAc"lG*ZLQTf%/Z;u%ZeKcI(j01Eg:^NufYH>)B]s&c;ZuaIq:dG,!96rc$SN>$IYfnP@g,:r8Ur3i1s.iBB`-Csr$r:;W&6ZSmbl:P?b';q0VJ,p=3^bs%Y)3VqQtD>UQ_RTVJ(&*ATgKYKMXfA6\)(f[;lor"hQ!5De+dCrIqdp^iU+5)s(i*P4M.^-l>Jj4e)m^;;>[0[GGB(a$oN"\CNQ_k%[i!gM,LOjqR?^W&TsLJ\;HP%V&N:r2Gh-\n_6#I^V5O`#JQ9#Z@o8!.3U\mkS"2Z3V`;L0[/GH[mYmRPVI\^'mQsZlrNB?')c/kV%LVlU%)!=ep?Keg0Sq.[*)N8J;L:u.91u?o8j#>??W+Wo&n))F%:`9NA@%bg7)u6Vk)SrKQIWs:'m!NoS't)o#2H",9BYSWFJNpkH%>(8C(8mQYQX\?lA^jK_CJmS/+maA@W5hYAtSVebo]234LR\0ONn#KS!X$5UXh+lJ/YmnQ(oc$XHpt#F'p<0KT7V*F$hH+m^+^`0s%n9;LuD)DQ8Vde6kkO0[RJ:VGm3q\&0NH+7aG1-<3H5L!lZ1.i]co&3*BrU]*UXebBctGYCFR#j;9"u0B/V<Dcfr5'SY"$ZE_\qZU%]8'pDlKYFu6]V<q%1WF,EUu[Y)oFXE9'`unn+S@*-Eq#E[=T_'HKso+.Sa9disH2hkYkl:2Pns'-YeRfFhOReon'@2WikQk0'T)_%ke,4*XNp$O8M??$`DWD*Q.1spP"S\E/.!W:`0Jsf;kf1rYuE7i$Uq1r(6tUf'r@X,'T.:#/$_U@8/LnbWDG,[$<f_I-j@.('uY]#%i!We@/MI?3e$Y?>e-_YAWLBR'R\Ye/T^`quYo9CbPcCc1[AXj?9iY1^PuUBj<C,_H:1[EpV%m8b.7L)+BSrf<TKFMh<!7nV3"VgC%6HcrFP)F?Hemqc]A=8T,=d0)XQT5VfN(cmU<0E,:6..#Y;C#D.,Z,1"?K*52!nf-i@S&,."]5q5;%[A:&k,Y/H'&bCOV);"d"RWZ%'FKF=W.H57Jg?/(+RfF[YQ=oQ>N\Y,OY?2BYOW#Ro+E_I!mgHXcghK?F#mC^MHk_]30dE%RGoJej91M+30*);Nb3FB`"q#-X0F.T%YVI`6+tKl[bHWVAYV`+2-)S`t(l_B1Kom70&K-/Y)3/,CL7p%7#*O_GTJ[W!7RNe^OTrU7W#L['RbFJ!<;K>T"&7.NJeQKqnFVT1%^\OI9",aOP&j1_+]Hpk0Tr_;%.G^`NE$?oVHbDljkgoY6C6C,G"XG<L)i-t^7`\'_7L2L47n?-`7u0[6a2l<b7g"9r!"AuJ"uHl@%"_3*Q"-!O(&S"M]W1\,r,6MG.7gG"a)Bgq,BU"HqJrtXX_LmPs9;'Xu*/@#nN>mfr*]mm(d.j:H6t;$B&WJ"R8Ml`H1spOd,DsJT%7[9f!(g&W%BQ2AgU&d_NN!:./ZSBg?W6o"JiC3p0L7Ef,h4dStn?R_6.;ZH.>iFfQ05"\LTPWc[ZA4c4]I[MIM9-uK/s.OmUNfq\%b:HtCEAJ#8)2huQ+4GJf`lg>JegY!c+c/!JJOA+hSWU^]>f`Fl^nKQI)c,C"N+%<Z0)lIL]g*-SYEJ?(;BVmm=!;Ns^.\-)MYEi1%gj(QpGDX%,n6N^$U9NGF?EET&o\9-AN%p'Wh4c04XG[NmN9c(%:hF?^q^S"8dC]h]ddX*m9/5*7OdLgD$kXC%27P&uHP-95(b[oo%4G-E:"IK-Y[4fM3AFks4,[h,&1b@Gps(b`d,)M/p*Zf&:1FHX-`1R<m+so2"e7)Bb<=0%8Rp0`Y`P@+s&q7rR96+;R*X2/Pq?/5N%$JRTm[W`Q^ZT>fmf^^b5+(Y<mqo>pk$ld9nJh0")[Y-%B8NpVi"-:EgF+qt0i"CI)i4=.?WuXS#=;Pa'+]At]Njj+mToBJ/jCffC%-W-6T")>qPqB3J%PVBG;Jd<b7di>)FoRgfh;5JlD'N#%.>_IMncT7qFe-tU`0ScLk1r+#A"rdtR&-NCQ!!fkR?s8nI656(-%E8EG%:J')fU):ZrLM9J5<[>Jj!glJB[QZAPG[D7pS4]4[dYNJ%j'Wi1!)S9p<FM[20]o3`%[=a/9lN?C!e;m(3@U986mt@"&MTqU?]`8r%(dsb@0P1oW&[h`/GRPEO.VO4VBVE70R$1Y*NEQlK8D^!MOBb*R$]-QjCP4P_b=!U%&N_.MMWbc]?4b+Y<&&XED>:%0L^&B,+>TW5%8siYAnY&k5"@?(K3!O)10T`LM7?+$[3G_/.)\*/s1qq&V6M;0mp):BU&DJ@t$qp[/$Y9GmC(u*>@s\4g'Jf$:JVOXs,T"fu(GO_j%HP#O1/Dq,6,%+9;]HC%D8eE?n1C"eaaN-ch-5&t-CQ$7F`<1sZD'<)u.$e`B(,03?N)BkTe/3'.NuH"\`h+uu'LnUD2@1U%[;f3`%=CNt53/epkA&c<BL2d:i0Tj0iBV9/].(K!TX67"E/FG0P].;j#>+J&ee1l/N]I@6kPUW[f<6UG[)0O/^$t_jJ&;E/G!fKMK@B>$M%6\;Wil(E/:TE#I]"e\ftMb"&q84<`G#*r.!/1)Ac'6+![4lQM*,1oo:G#_58D'RenC+l<pBQbWR7'VSW^b=e9YSXujjEa[=,8T=i%McH<g+k;KK01&t.o]";S8W!!\dYgRR'"o.Si_OQP7EQtm]e\!"L_d:u+2977M&63R2i0N/c,AAbaFF!p0M>Sp096]X=`m?XjYmIq%JB;I25M&?Wda3@:%9-8,qQD$%W.6JDR)7Br\OF!bq_JtifCa2)5:P+PZYXFXP;97Qb=5NKj4?&,H/!LRbUC7BAHa5Na#;3l8<-%;%S<PrH&Vri.`?Mah?r1Ar(W?mkjU[1Z6puP5_Iu13,5S!rMtfJT)bjA;_[(H'!=pF9@0A`PYQnfEG)YBVgAqj1"C_L"E#=6`]keYr%_1&*n%P\#/7S(Je]oBg`&K9V%H]bQ7,c4)7;ck7`E=sKo@`:r=1L=NY9OuVK&ZrPL*`ae5_O3kA$l!8@:s9c6iQ`C)'I/oQ6rT%h%M@i]_4BA`Ag;P2p61oL5No+6Tpt0Gfh0d+[coe!9bMC2K5@s`iQIg%C<4jq#DcF[_!#QjZ.gTO;<[]a:^`%Zm)%A!_Y+'/fCn`T&%@Kcspd!uiN!1KVJkSWcH[9.F#Jk6-'*=R!50!$&tZU/&giC3Pd^XEC9.=^E&g,KN&O8M`lLS=X.heD+)L6.6%L6s-HcmoqL0kEK_%WpPC!0dK_-??3QU%;Otnn4@j9`>)"=r"52*gEA\\&ft:d*&77Wd5`,"-q3;90UC'M%#8FQ6'u]/:c1gI'^Et`U5\5'7@H`c70QE-%k.k48NH2>_<1-u*f>n>5IQ%L4-Mg4:e0"_o!<pap/uLCnR$(_)&sanr<of(1Kq`ahh[KL*I-@(#4N;4oS0C66aNd9T#Rj0NX-a08%5#*_EoE?':5pe&E]dsI0.ON7!#dLP8,aB?^,3#oVlr:Usb#%e=cr&2^24MEUR9NuqZ^<1_b=cRc1M(HL8^1_AbUkKI=j3,@NC%@q%1M(I1ORh.[BU11SG[Z`a%[V)I?W<gG1uUmJZ8-?P;2Sc*MjdX7i>)3arY&OfW<5NhN^[9;4dQe&WA0`O?'OrYGnjek@a&E_:o3*2%*draP[C1Et>a4o:k@.pR0(QmA-`-F.QOn4pOVc(d8s^_S3Ta5pQP#u=N$=AgOXSX+&nqo6,)me/#*C=^-k])_#t<)fiiot`*&n1o%WDT<NMa6,[=N([s<=Y7o!(p;/bbnp!6+!h*Jn6Zr$(*9j#QnJG&_)jqHc[lQ0ema[o04C5s(A^^1b.!*SE"-mr8j9^&]/h9b?n\J%MBKL/Ys4)o=E%,/"ie67$KXi46SNSf^&HCoiXd'Jn?]h-BbfWIS]6'bo:DmpgnujpM42G4$M0jfC##U?mtmLQI1#S;W+k$7>4Ds\%C$4g[Q52@FI%B0CU8FKbo35DJ[.AEh98eZ_[3i;gW$kRpg!VW,.C-KHpQ]Ei,hkg\-CQI%8VMm^_ZHVg;hMo#_Q\m6jCuNY.7>Z6%j[tt_MYM2R*SH)rW4K2U-<94b2+sf#SAoQ;6a&IR1![t&]Vp(aI/KTk*I7D@'>dV/p8H.VW=N,>3SbDg#FfF8m>o6&AeYbKG0\*O%+#,.h.QVF7=4F=Ge!>8JbpkbkR9.n>U=5ER7Em;CD4+JTXJ40EE1/O%?Shd/3Ll,m_.X/<oZ8k[dfDhZR]GsRJ]/DBF"iIs$EbS3%,$IEG=%0BjN-].@c`]nqO./Hl2!-oa]:QN17Qmgqi"A.i&FaM$i8+(EQ,<22SM`^P(plo>D?RqD1?r9bN'`YmI3m\!`"X,&B'Qtb%m58[E<pFGL))R'c.e!Qj'TAG0)D,BWA'?4E-\OFX!.29peBO]tPD3Y6=IcBhhW59)Wui$s\[o3JJTn:q7fd)AZO"Fj'T13M$>'W*%\O%4r>9FTe4N:PI@kEgO4`7Dql/=M#`WBZ+\mgUnlXH#1Wk]6R*8*bhmpWk%LqBUQQf98,(&D%$r1`[6^[i@m9c-kV[7\H/59/#A%MREA6VIK=0N9JI"87Sq?FI&OZK,)-r"G*#dMI.`_5g<o[Y7j3pB!^LKM',XbP;Q2L"Lh$;"_&eTZ;QVaq_D4jQHZae-.]fSg_&WF%;WbhCh7O^DandI=QY'R(IJL3l!)libMN3st_\Y?1@U6N*N0U[.b1b5P;n$;8mhdK9erQ*PUtV/E?F"u^P/NJP[a]AOUa9G$H0bfV%CFtmUq7JYUZbiSJ9-I@kE-\eojiZQP?Y[ZY">8AS;>/^Ss!<D)6HBlS=UkguLP7P$IY+W+6\?tdbO.\4gk@>h,@,'I?<=@"\ME\C%:F7.G:W0S;n][5$YGG`A78p@3_VR/eT(Tq6[DB<!'=<$5Qc\8n%;_LmSn.(pa:_n,nmBPKp=Dp+Fsg%OI*'jooP&4F[6WE%Ci!K*%]f2'7,]V'tWAZ&#2RV61j<>G!,b._U7b(E1`l-qfdT?F[dT=EpLJt!!&)tIb?4f?T!/W1%ZON!e7;B73&sP"-df9\YUnRr:%OYC.%N_Y2$7!mB%S`Iepe4.:"CW&igS^pnb-05;/)U4dF/"P(Qc"Q8q;HSVJ;]-l_\t1j?;0Sl(Gr$;^r'`(tI1[FtN6/G%.\GqH>P)GX%RVB5>jib5XEc)>,G/oa7g0D#U=:P]\KtfLr%-JnPquq!u+U?*K;M(,88`a8G**Xs;:*U$)Oc`4E2.fEiNA:^+B:RMq4J,Psc;d_`%&R9tT?M_ko3CI/ua.[FlM=K@Z]<0(,<Vj=iU"hT*7b>pK`fE@D?h@S,hkg-$e[d1+:F0t6XdKQ$A*7!T8""j[YMopspW(<*(hBV5%FbZS:Z$f'bYu*+]OCU+XXEg9)kDdKORNbqD2#T2,RBJZ?6%ouR3h#k"VZ0UT<J<Nck$o]9885O!O_n5FfHPmSpt0+EMdJ<1*masC%4")8>F'G.THEcB<<g:FW/m'h3CVLB-JA>)qj</>aO.n-UTXo=BDup'7\_@?+K9XRPGJ!g^_iLq<'"/L6bIs0uGP`)EBh2Z";@764%@Vh^sCnbAAqcS8%'lu_WHW([8g001cH-?T)32$gp#8d,qijr[P,oIM1-<Ri4_/o.<Mt:5Us.VhH'4DApL`S?2KCN4]r[2_f(c)IT%l-c)[Eo.!PFo7.Qs-VIM(&:=jm%Pj*n:,G3fGU)KoKI*i_mBe%lkLH!0)8&JS-m<-&;[ipl/i^IdQtppgF'T3)_.BKBC)/mr_qd*%.PrO)^^<FE(p^h#CiP$.Krln:>p6feR8_1g63\,ZS<19l/.Y(5Og4Hq=[5I'9;&MC@mmu2GaB04Z=7*7UrunXi!j_;6<oa&`^R2M%3\nWb"M#pBb2nY)3K^K&I[0VeQ$+_7Zb\&$L<mOp.EM4kU4R#^;;/F5V)LlH=?E]_p>-W0>Dg"$j!9b,d><hRXps5Y2g<_udm*P*%O*>'R5CqjeW<nuVnP6kr+nI<`Rm+hdX9>i-8.qE/[;kPBa!=)6QKF[A?C@@7QsE^AW^>;Q3A-dbQp)ek/hq;Oren([Zh_DTG&W&f%5LI`cVnA"IZ6pH:;7_j.;"2MsNAgJlS2p\i.i^"4$%OaR4/&NG5;Ao4hLP56'j)?HH.E//p[*'Jnr\qpT'?j@V,MP_m_!nE:=igC%7FO+q9ns^8iKWSUg["1l\Xd3n^-fOr`P_Io*ASTun6E&GFq(ja)5ss&VmWq1A8enibtk:03JrJ1(Fd[bMsbkJP&GD-CDtTh8@56,%SWtpS2N\>_1$G$'%%U@VSQ;Q'&t8c'f$-[g`4YshociB9-gu0<5CX':l1TB1Y*kktVmfJr"E>$<O$RkqKMXjk"E>'m8l/R"&4>-<%$0!:fSKN@_X3.D<*!NV.gC`oS2ckDW0bF?#NdLU:+5)jQ=\^Zrmh'V3b,&2`-hFEM9c5:B1)@R`aip9JM!di+--$*<],&*#Pqo3h%5tdlQUNjU)+Yl'/PD,7Bk<L"[Y'J70U:<ZYAC4FNGd0DK:Uj#=Nb*K;D=PUCgIt1Z:)"NoFK[.Zh)J?5p]Qh(j#jCOjh4C9s#CYP%56mq0Ym7"b*HXVoGY077NcPsI55`VaLs%ai$clTOY>N&s\jT&:!L::c;Cjjt%K@&Oo,#2#_XL^+RGIn&Di`i&Dg;&\'V@E\4h]4A%3duO-$3*!X[&lDpi<e;m2*6#l^kq59FP">D?5c.'&Fl`0/D@lKY%&^id>F$8_&kdV<S=hKGdnDt0u^CXSu7hfIY_dZJ(;p/E$m&m%nUPh3_csOB;WpT7Tb<)U=^O^o<>kcD'slW1%rdNZ7h0L:gqX!<`X]`#27p]4U%JM'5-mGW$X0do)I0M$FPMK^r6+rX.I;U#s0?(p%BJ6I4T\3[UNS@aC^>[me?p)nEE#j8/;.d4g*uNY+?/XGe%6VSZ[dL4o`?0AOm3%&li6(u=$OOPR`msq,)0),_XJYIhr3c3[".og-%Ri(Xc27>E]2SacdX\Z&P]VC#WY_L`X7rS,bR)'>9+$%,^^pWFC-qo!(Fbn<AdV@Qgchb^UR0L6:0>t#5Q[KE,kd3No$<n''K@%'p%XO5"^ip!s?RrSL7Q?;U]iam8c72!+d9bLK*p]:A*IH2+95\uVe^9\$rL=c^_&$H/>/Kd.XiT56,+2-M)?j8u+IH1Ck!S8Y)UG2'=%f3om/'%ni\giCA,S6gr:>pSCj-*&I"mFFc;HksXZ<6<LGkYOl=08=5a6D`KYIC(JrBT8SK-=uPB$NEhr*RWJUr%HQN'HO@!qMW1>%0]p-)%Qqcm&8sqZ1T[.I$LRn-^`TVW[d-#e,,]=j\IW2Z=9U9^b^mH]'s$j8CX`PJjE\_Ie%@OfjMdW7F0+iUC;]kqBo+RmI2O8D%=.od$YJ1bsUG2rkB35NhjrL(X(k>0!Z"UZpS!.E<ZgM3`_;`A-Bg,tP*jH^3#?kj,^#=";`*)p@4cj\tD)j)"U0E1qQH@M]O;M#.%eh]LFHOLY<ZMtD\/.0$i*^'R*iFiOr1afN7&@`Hr1_7S7Q=K&%,q%(kK?gZc_86];o,J1&BJa-\P&doPMCF'^7"":5(!pDmd6Nie%LsLXMc2eUl=SdSQ)8>9:'.Ebar&>C*"#PlZ`rp8`5T=S!eTdnN(pNI-ee#\]a2koA%l@-K10t#4%U_(a`4E?KK05gCOLK#3mp-CV%cV0^6$p64Ip[2A@cchE%j3.c1(VFscc?a)2([@*udgb.qj't6XL(HU]^qC$1];WMoAeGG$juA&2!r$S1Z_&,R#lfE^,R83m`,%TC%#bD4V8!F^tGB&T?b[`.<q=K7M\9DqgouLZHCNrR&[VcsV$4cA`_EqZK,j/8T*oN&;p3]=9qFF`X%,/,BPSN<iWZ&-(?qWs$&_+%$%hmu(Z*n^Sr"[VpFHah5'Ss`]42SmXL"8?\,gWthp!9t,@R1J*4d538eH=i,GLo:KIBI.olU)NnHVCYtA'):CuM`C)o-N3K:+@HeD%pMM%VT:()D,=)h")n:+^Re=mj)5+TD=UErsKo#EGjEkre/[8^?RPI9-J0Y8%lWCVmQtI:uAt2`%"E5bCYh$K9k!TD]`_t*.`Yoek%$URTX%->6Z\q(XADldRo[qQV#LITG1Ig`rSAHUuD1GE&N*q^#^\2YXV%sAmZ)m.c=BP:+,!%=ooq/88Ba3'^d[[qJH*e=A*5WFQD%)n9Mq&5JPVZ(:tf8YQ7!K(PK2*_;AKKoYg7[(Idhh[1q(3mt#,HN>Z2dJ1_1`oK)pl31]i]Z:6D,oD).YgA=NEB-IN;qBmt#)cTm%L'4dCJL*QP9tQ$qVt"u5gTH->kPU=@Ajln2@\>RZKI'Hn9ESp`B[_2lT$6!]e_,+/1[E$<qqCU'ZbAR/WQuY9iDGONBZREa'OJUV%*Xk,fRBSYY,4],k!JWmTE=+:,OK<(;TkP&g-cXei>Qj\N)WV?.6Ysmi7W_7*O0$LZ?\4AL3/KNhibS2)[)S6Y#uDRlA49qsehH:t%a*<OC&!2Bn9FG6IR8XOYDa"8l7Ro8E>NLETBX:PIAVbb?V6!0fAKH)ATM!5>WP;:8?31N;Hh*>/oTdJdRSOLS^g]G]bR7#$GltbB%f^d*Wp6;j(iMma7o-H^VDkb\7iY]a*Wf1B"aL.VMct9]M67rM98\>;=eg!-%ChR+qof"oIE`#7LEa40ics[`-f/)JVnq(=jMCA((%Vf;]e@X182&k3mnkUDSbT.Ch-oX?[feUm@H#@M^/+K>mF2'*oR)BIDf!E)8,8MV1f5q<ihTO#ihAl\$n(;)=)XBU<n]rd<K=:$Dk%$$V]!,QhTC)5']i9dp'O8YiUu`1T\s'18BAN%B42=jM&0U>Z"bPU+/84nH-D#)WTZPQbfThL]%O)F5hD)'D^Q(f.3Rr'W)Q36$[i%FVhBU=k1&Hj\`I[-"hV-NeLt2>eCTfeh]8U^fZ6Z<]inWq!g<2En3$*P-&XWQ8pbLmV@"T/44KQ%*jbMbLSI.qJ;6*RMgaB!H1*C%M0,)jStZ!s=^li<nZ8+p`7OE&&m0h`"@[<g?m&*FZnQ5d2$qYTj,pk>En3%I3qp)rH=p^:fBNKJ(`C;KkM9Sa=[WnkD,nAK+HOll%(W4Qao30[i!![BV>4;f,G<'+P>:SHgAF#X&Ha[C,@G*CTguYVMDY.)h]!:U?G61^[NFqLE)h1np/i6deK=dNDb`+e*@MbL3but[B%g8d`=c=a2?\f1:3]`sq7o0!)'!-BZ1LkNmIm#:BB/qH'bfV.mQA($WQrT2\%9Zh#V@p(_#%me]'5)$aTn<\8%PHe'e=Bjk1O-J:8%89&b*W&N\]I\kMlFAg`8(.M9U;e3i95][?;WrP=D#TjiHGQGhp-GlCY`jYK[XOWJSY(k_mX:J*YFnt%4-;Zo22DO>j>ZehiHHC1]%cjC,J1EMsm%PeY.As"r]5=+iVlm%3a$mN_6Jus]!S'TG1@USQ_8$ZqoEj]S9DbLrMa)5k-^+mA%"S`1p(rT/,O?-Qe@"SY]$>a[C%pj?VI@DIHc/@,[A3#.H3Kem?i5$X]P5(b1I5MMfN=Q#oR#Yka;Ce71s?e1M+nSj:,MGheG!NSJJQCSdZ@oir_;%=^"TF!cFB[2?6%QEZ?%15trFC;Mb'c0cP,MkJCldJ.(tOmoXF%sL*e/4,d2!<gG&-,Fu)=>m.7#SV^0H(X%29NrNe$dULPk-HaNN#RlYID'W[$@4,Q%nSjCf/;$D[Ch>G1g[utR:D8!)=.=nC5GHljLp@.TaJ1F']:XM]A<SIFg/PGh8!=S%7j2oup#s;IHZLUiY")oZPe^P<g-#=Q38MjW%DGE-5<6-<!M""#rET3MM^\a:>Z]5G;qbL]&WIbll-ke6&Ei-'\4W%"r6J%duB?4&\2'n3JF28,"gHgH\o]&ncU<T4U'sK^^1t$CO%[Of_MM2'3jA'<="#ON0&j1l@400FIDGL^A%O0\n2IorIp)Qg[NEMF[ZSI7ngFhE=<b(8nM=f-.u79^B&G^:1^pCK1"d)4M:"ipU-%1#Al-iRRF9YcXmaj%f>U*IO'n;_(Y_`^aUi)ST`[)eYFZ,IL9`>W(9L<l6D=BYmV.8:4W7+ce&_<JJsJVFZC%q`;,^XoNF?9e*OO%c,.445j4=4?=G#"Pu\"VLOgjTER!]NH+J[<K42MMCj%lnBL2.dJ-nCjfBb/>W0P4X>4d)tIm;lKa65H7k&_JuTgG[`.c>d#"CM&?%ccO!IZF>K(/0T=4nA,aM[fdX$_-//SdWFZc]<cZ,XrY1AJoLI7I^t@C`rAdW!ECIklb]Z`ob:n5?*(*0S8:6_\;4r%mK!]tW:<,!%>/f8njm\.+#:eR[jG"!F*]u]m<[eh]N*-VWV@C@#mKTOJa]/oO52?G9jt13j_(6nbGjrM&m;R80(=`UMbsuVQ\G-[)+%7em(boF4%@:TK#L]R+,,82ho(bj9$@_9\49uW/M"#/,^21Y"7>P)FMfX/na%c37)'/VZ)!&Ebm%r_/2DI,(+&6XP#BKq%Oa=BM]!RgO2$d\$j%$sm?"r.OJao.VZgd<GqRCK66d"]?_L<U^ckF@uF`g,.'HARX(rM+6k?<JFk_Vf9K%AYn7bZkDX4rPAcAd-^KErIcZ%6M=K`1VR?_%ZV-!p`4\fNCb>(,2?4mj35ec.-k5j&LVhi3(tXtP`g9XXi]C,5@o<rhiY4kS\gH5>^3,]1+8^\_"?#s=6.L4#*sh0$PXcIuf7Xca%mk,*BQSmM9Z&F]_9W\u445BO0^t?I,-F)ePg3@c5GIuRGTkaRfq%tUP4cH>pKXKI7NS9B;YZMcD^e3Fem_S6WGKh$]Rk"BONViV%%PI#/?JT"R)l=O0Q*7:^-5#X!3DRVZ'+H(\k^mN>r248n$J,`TH2)5OfWJs8Ye+7n\GL(ZKT`Se\6-sKX.s1i>H2s>S!;NVCDcWlG%.6!!6If^2]j"UCT@U[_7;u:=<lMX2m/E7sZ=$^f<qT\;=L]C`$YL\>SaU]lBrBW")h`S-]?1L=@^.ANMAZ7J1X,R>$DL416YR>(:%^NUNr4p6WC^W?FDeif\D_*>>KW"82>j>\:t5i7,tcS.\KE)gaulL:D@kFp&SM]aa]]!\/"4h6%_0Lu+fIC#UHP>j5j/GLSK$R(\G%I33k7l[MS1%U.-2rtjr2GN>bclIQqXGLWVl,Q$O*q<p]_=ddIT]I]p</fW_irDQ8cmne_)fGf[nnM8Gg_`IDXYg.VRR\*s/Ft&=b%:J0&"X\0H%_1)?`=W`)=G)I.?1c)uI_n'C\+7*"83s=m=V"$0%ml/'E9^El1R+C[(F*\Vg^ct6=Jnk-hY%hUIDe9-b/,k'jcmJ21%6\\1c@19@d8%mDDV=Q^IHo=maDK"%rOY6X+gi!T>rP'8Mlc-\pWD^DiXAk[kk0T@>U*+E,h11ZgoS:t7V-d$K\ufj7`ME?r?'e[a%Zer"`Rom+6;[1qm7?0"C3WLFkF9.J*[MmNO_.$a!7IQ$18nZMO^pqtpL?=rte=cVE%==HnZn&+^V:XqKbP%lgkN@dJ*)0W=',<PM%%==jYlEW/^2Yt\u_?El)NBt$2EkYrbcSqb]_,nJiZtK:g>"UZG<+X^4Si<m3'O1@1!u?;$JG\\W/\5,26IFF_gXY5?Mt=j-;fA?9%i=;L^PMn4WEdrHf@?Cq*hF,"e@D:T6k'YNV>0VWe;7eUY1!sfA6bQ+JnOh<KPWB_+D<tEc:V.I&:4:b;pMmb1?]EbN8>]R)<B@PG%=F344N4#+F7VW4A7TOO`m!!q1hIe#>f36E?O<f_>r#>Fi'@<'77F0uimU(s&&&h%UnH,YgFo1i$4ZEkLNO/%lSCc'MD`DcRUL3I#%E^i12Dat%i<B?]=d-cfHC4S]P^BOeD6jshNF_V4O5^re>e;6`MrUIXL3Ci[peIDbo^%s.N^`]V2>1Y9jHj('1`#%W\@*"*-?,a6`%Q?6dTMjgl5+BZ<$L8,tcpAH9`+hXJ'SO,i\B8h38W'_^>/)G;!.I/Y`<N.qRNVN?R%-"Y:0X_PNDMTMlZ";XF%0pde**05kp]Nn^%=!N#nThr.RGgNLRr.$a*C:'^>qWJ?/K2Hb&dkOgthWjbu]!f6W"32h@#4'7Xp7^^LD#`SMQ2]+&qsfe)bZEf`IE+Dm-p?qjLs*6B%K!l7&;&J@]U[Eo+TXYAEK$lR,"D'_m#KImN`>2+SdZ5Vj<3G[n23^qE#DQfro?g9I\aSfTGS/^CZOE;AO6U\tnU\'AbDclG`jkM^%[lS=8>CfmN&4!=S5+8T5IRODFB^RXLN(8ANQ)aNC\KP)-QA$'n6)`##<pR[YUJ[o?Wr;=j;hB6MMH*i>gg>`r^1,.nQ0S'-Xh%ub%R.Z+=GZ:Kj*Alf5%$cG7mX96TrtSn@gII_E-I?S2e^)q2:=WIs&QdQ3PeHK=L1sIU8(<5k),OdoEI^Y\S&9EGk?!aBV/\.<"61VX%U>:(j[`_[qct?V"H=P>"lm/::fB_V(6PN$@W6c?:0YA#D^=^3AMRc)U0pO&B&1HTH4NcV\(^`.T+9k!/5Z!]8'Wu6<nh+4`YW8#1%05^"VL5dkM-iuts/F(6:(gWmE7A30U'WE$%4CU]&'M>h+#K)j1Wn4:A[top0/_]<\.tf+&03_lDqES1Oq2N*9]GK>8;;Q=+>RQD+%=od+-C1'!BEGmf'n-`D8XBL<VaI`fZJ:k")'Q9_c^l=Cfi'*N[rBUP9erT5Q.QR9<p-;Z%IZib21'W9^5=><le?'dDU#>4,'/b>-%V=IXOgujK>@Nf?O'BBb+rF)_SW>kB-fP$*:Q*j+6rlU%X6ocFa2b"3`j4<_e[4'qh"Pr_#Y8pCfZHQ=55Aq5d+A]^ZHLdD?:S&iC%Jng)JWA*`G<2]'Wri'K7LC]J9[`:$dER("qn(K5?['?J8+i&CoD4p([-]!Z1X2<hh//4f73a-Kp?J?'uMgL*#rI"/1W:lot/m*8b%=*n63GL,/jUcXU>D`71N%_ga]"<1Wr58c'=F)+RYn(HF_D0:JC>=1]i][j:\o">i.Hkb=r<-g(lY'4ksd,*nM]c,_.W1E5:_#.g-%\#g_/Pns5pSP!P0Fo,IphG5e(FhP]*D!j'fEcId:.MW<rcS)f.[@Q\kRNHL,(MgWi6Oj2bV$TC)"-DoM]&#M1g,i=>47^5=>u'iP%o!_T0e:2qCMi[_P[D&b\f>?J!l".;Ld(hrU^b0N>(NZ@b)c_35HOq9F9Nb`6\8Rf&e^UGT7k_cYf13`@o8H9\:QOs#6`B0]<6Un_%D>!dRYt;:]HuJIsq.e;*cHt[1Sf'.\9'\-C)k+:^cC=L>GPCt4c+u9Q]7*:,g$cS+XA/)fd%Jeh=WcM+YMGfsnY3;"-Hm2[kPWn"%rd&GY;Z,gpd"AG?GG;<W48X(lr.#fX!]7B,DIXgXoCDA42r&"#FFEDIk\]t&s)Rs`JK"b2o/7!69!:S\n22$9kj.6]8S"T*o6<J?%egQgOpUB9cq?&)#&*rOH/i1iO4I][eCNQenI[Z70<;9Xr/3fA<UJs;$=$H5g[`*]%KJklp^[_ak^",bWUU70EmtEVkV4h%3@Bn;-%Ckj7&Is@g_O0bnV7ec)SQC+GVld/,q&(k[Q.,t1JK%\28lZ_,4Z`7&!hGLuP5EBt_:nsMr0jT(_Sm"el)U5EHNC#-".@nhSg"5fc%ZEI+kBYX57)L^qdI!)S:)VqHMP.o"6Bj\1n.IFiV7Q#LraK98BLGue%pG,kGC0^TR"USZqHVqlNr%>ER_AZ_7Cuojb)ATteG9?S)%_].\Z*b\iQc[a$PqDtg08rK$Qp,oER>(:hF,8q:5dQa;OK!/$b`G2hJn#sL`L,Z\>X36J;kogbS_hIbhZdFQpM@[D4BDhHZAah0J%HN);TI=9nF:S]Oo)Vk`WHI1l5Q^'*0NRCsZ:J[Q'/&"Jm.qW.bT=Y"?eS((/?%#Se)a4,DmsXrV/jgSkg0Ecj/&V66/fZgQ3'*e]%V_!8hQC/8%o_>)!p@O_TE>k\%Y%DU=4.hXp?@?+l=/-\iVf.WC>N(R5E+peMU[N&:L\CDLG;LDpkj@.(r%P.uF8BeK\EGaVI;q,k%\l3p%]m+f/D=lrfk:j3hmg#Ph7l:&NdZT%s['JY=4o=ZTcP;iUD=m3LgPKaRT>"KuEuIJNbg!1IFK*qW$>ia+bKeH$]jsd_.$sN]%c0.lJ1E3H:)'@=(l-/0ZAJI/I0(5k]Gl)eR^TZd"eEDpr;5j3cf+Rr>L;2,%GA5fJFL\pej5TIlgiMR+@l12K0S`t3\DA=_m*).m%pOY0b0Pg?'Mt&Y3(u%0?(QE$NRH(AE'X%3*1IKW1Mtt5p\'`0D^JaHl7Q#ZkqeDmA;6L0\k#^Z]GM^h+]D7AT&&Ikn`r!0;;]Cu\%d0nC=c-gAd+8-IcADuJ*Jna+3IJlSV]Ve8^DaF"2QQk;'#V<(md\aCI)rD+HpKj)P2[f&iO6hANq3o'ZHn1Hmo?Y_:_!&u.lK*BR%fCE#)FZK#pat>j._VU_>bfO%$Q]:q>UjE$F)>WuR^/dCQGUjje*GjO?/<#!.s!kadDq:ACH2>A$kP]>"7ou8&\$s>aT>'nTJ?c_.%F^m&plau=hIQR,fHhp`G%!uc!m!Dk&*CPATF3A;7O`/u=qT`m+><p`XVI3mbq#6*2GO?^5eiM?^PGkr`F%_;7X3hbg.]K>r7c`/k%m-ZtLoi@Vn(GkkXN!T`2Bm\CqFadoNa4"hU(P?#bD'?CMH[G_*^T+m&o';W5TNi>Z>Tp^_!8DPHH[R>jIU0^&XbOF#UDtg/b.:e3%^#e'R5/Q\+h!a'Jgg$i1fBG@JU=AMX3a\oZT@.LYGAu\,"2D.iIpC!60$hU[B3:PGXWDC9F6gfg]=IUhf;lIT\,,dQb#;o*r[J!V%rY4M#a)=;k.=Cni0=WMMTJ!<sGM<!-(FA/FH/bmkSE3hdaSOZ\\[&]tA*/\>CC>aE[AC=c/\V:S/h$>Xnof;VfN9`%1#F-uk/kJL%GWEnpM7bDd^*G>?P:o$],aJNkXL`ZPj-6=eOX4)X>BAW=)T;m.^47j`?"RCKC0^+ERr8Gkdc\m($:/%;"f0X`">qeR<cam6\V7Iu%pc+Eq:6-;+go`9.dUS1kI,k\aa,_g):?V`5;QnW2:*0f?W^/NkquPZ[^cI?SS:BHm996L<O,`:F2'Y;B-O6O+/1pO3"^Fm9^Gd#U%@=gk0=kS4<`Iiqnknaujk4M?l*E@muO4KB$b!,;]7tX#V^4u`EV54:N_]'24qhlX)E;LFZO"Qnd$9\."6S+A0Hao">%VX''g9]gD%'(AMi)r8M>;8$05=bI,7*]BGpq/oI8CKl6+bI^#JQA*rMa*!M3+S2OI>>@t^oc#7D1tj$k"e))]YkbuW@dA9U7b@4e@0ngF_e>as%dG@s`MgmP'"\d13?EmH[?].renT.[04Z)SdB9jN%/frTQ_,A]O/SXh9]Sp<XXSqi*r<5skO)bM&YQ*g?h>A!/G*chr=PMLX/H`@]%WsH]bme'=nV*6S#2;S>.dF6E`9>+K\7TKOQY?nX!qKb`Igb:6AX8T3gPaAu.$;tKqE.ut(5?t9+%C6opdl+oY`O,.Ckhlq#.uU:6%"msu1K"FlJ5mH0"NM7r'J@gqerB`+!hg`gpQYQ2DpH'.0Qn)[_X)\GRi.V0?)@7DKM[A6j"?]AOQn$?!O6!8-Nh#sId?!WJr44_r%CW(*W\dQg68UP`]ECOG`IR6peATD08p<.;@`1MjJ((@/e*apku<o-^IDp$uu/Z%tjG'TE<7"?92<F&^iY:N$!V]q'-3(UN3j%DXb%?"R+6enISc^A#.N7qBFfXk9n:CUt"NRSI)%pf3M$EQGpO"-J*%&#q<WRorVl;InRks84qf!Zc(36m8k"+/`]^#D&uMW#VM@V$D]a%+YZ<Y?%tp-Rk#T3H[[Np^":,3'!6h[flo,ZC?0?(llRmSQ7kTq^[un;oSo-_gJH&,Z,5Lk8k055:Q;i)">uX_.ecAbTS(>5Ik>Yu%S&ZnJZ!(6>*NMXi[q(Ll#f_&Z(T4UU=E0=>,aToX*eqjmf+JE)h"gU.p`NFJ"B:BqW!&3tB71$f.7@5aiJC;2WOoV+Qk3@6)#SCg%"(!/F'T94B`tWN70+M;l?rH5#rk42o8?-JkjX5+&*g]_&e\_frOF_UlX!_/I3O._GO%L?Km]Me7M+GabA58D/)%#+V"LH?qfS8qd%h231iqKYp)U56ti.3"=:`%N1#E4QNd&,5IopRJhVl_W^lrTiY83mD?aT>fUIc+5^eO'@@=DYfAe13I/q:5Uu?4Z2(,icQ6+p(1]=%Sb43<a1'g%FDQr3fiWj7(AgtkLhb_JXu^qA7^]2a5)SbMq.6j-Z]hm8SoOR0R.[s;MmFH@KugkDB3aN3ThCSC)WZQ\UmboIIY=N!%mlOQ#Q&[`68;*3fh#"S:aM@nF4:)t`#*_e4.]IMF)to]BipsoBW:\asJ4q^+FrXI^#=sb!>1mCIju5I]B`%ZD42W'_kE=&J4`JWt%"<)>TqbUdTeaC3M7V<Pn.$rBp55N0&,&]6&216=r,n_;1cLZVI4AUm?L\[e"?u0I@-@0KH.VPLp2@P\br`*S^cS6'.Z$k\P[fM'P%cl3?<@tlo^-mH2g!7G)DM"eS(G*Gl&Gn=Faa2H#7&,U+j48!]0<P,Z59!<:rp17(N$=D4IYBYHmX'(WD\C'b4]"VDu@:W2KE[Mj1%(()5JQU)ub!)VnkS/arTjSNo?Z*JnTr6%2Sn:h6]a]NkM9!^1g1bf;i\_4^b#+]RnQr<!Y%+ge:JYPb*"0Fl!))hWXp22uJH$?)E%$kj29'AjUAcb5@6(F,aR@=/@*D(1U1oCsIcCr&S#L^8PkLc,\DZ%01@aen`N([ZnE1.M@hL+n8r)X0EU"jnZU^2T#+Psmf9+NKXt%BE[*"2<OhJfr6VYqMF"`4rQY=(4e2Y&8bm8.DKtd?RCV2[>tS[BG;mlgb^02F-aiH.Op642P($n8>*p-B\jCQnPD?X%0XLM.aE,i%Q^jSX-4tInj^HXai\@2!&n+0_3IVJQ\1lJf\L?-(42#-2N%9K3Lg4Q9Pu-Ma838/,2"W;)X)P[0q%_dhJSc8G9$]%s.1h3<bcEK6%U5(*>m+n-f(S'HT6i[3X+3VFnOW\p]&efieEuQQ!5(=XT'i;B%dF`Dbg,"2!@5CrHPSG82%WV.Rq(-@Y/9FCBh-WUVmN`HaqrK_7%H5Z)HD#O_fEs_n+n$e@pjVXuB7>/??CgD;aoMAhM@,*)s>"dd[KJm`BpA1"ioTRXf=\4XhPOKTiNBf=]["$p<$1opCM+Lhe%:[=s%gnpsR9OM<lKH_gBm>Ga*SYbr0kG#5C\W>A"R(99rWt),'UXB:F%ZUJ\1t,1-O6hF;*0HXa&=KI\i0VBm_PA);Jf;_ebW*$@Q1eBC%"cs"86FJ"=5&u.*SJ3W=Vr`oS:P+,'.@G9i"9cO8"qTulKZSjS9UHtKPYO/n?Y88t+HY0+nP-?R.)Tp2Ob20<XH27'4/1p`N*p1:%,5lQ:`U:m-BP]7KCYWn1]FrXSEL\F9&_[k1Gs'Qq'Y3O]YS]B?N7:btJ/Q!aer3*"?6&[Z)RZMg1;H%gs5j6'VQ0t&6=8XoC_Zsg%kEMR1r;kD=Zr-'IEeiVFM%bO6$W'>IN]:JI_AD]Dq3>I2^>#mUiP[Q2dFu3O[>ZoO;2l0o%F`NY+;)&:eM<C">KI;jjb+0m,\e4#%l((98&AcVQ8JlKUr;8XB>,DoV&I:jTC:.kKR(F68AH4.uVNrIh/E3)$14M@AlFFtA$1r.:CAIZA8XNZ!&M^R8eZr]&N2r8^eoO9Z%AYbHj21B(Nq5ka6QLcWfdZR!M")q%-c?`uFZOuIK789l?hhS<"O'SmOnFkCEUeH7'cWoqrcW9MLouGGV;=Q.)E/QOF`6l.>'&VPG%?W=*;%<?J3`24Q<J=eR2T?R0X.p^&eI]R_mT]2mlPn)*`h`o=ClA*q>3H;e>JfSn].5E(EU*jJ`KP2g6Rk1rDTDA8E1hT:6_hnFB%Bi*It<Wn@M9FW3`L]3/1A4%\C6lEZ;5d$5@8@LYLRFe\omGjK\+l$o[Rb&nJfTG$$hUh2Q&q^V/L$9G4?G19W/]Xa8o$,eZHhD.P%^8kR`WlJ:Dm[a[QAFH5Rh^sa,I*Q:b(N37kAP\ZTZ7>T0QT\5=B&`HFnh@QPomMgKjj5e(V-4[S^,=V1@S=E2Bn)@^GIo`^QP.H^%Hmi$uG#%['rr@aS(ROgS:Nddj;=gZ]A0b9D&$F*P[/mbtBNfEQ]6[SZB(po![V*4=c</&M.rWe+][uA1(\ogP\c1eUQOPH8V1U)c%$q\Y6qJ0c(_/f2XZG+QKhh3TU324-[%C-,2)Y^RqX'AW$Ck%OR)n>SbM,*-nn%VWar<]22H+2p;+qo7LS:t`LQlH-OCKm:qb=(:,%KnWlRo^'f78*:aSOl^8c',&C2S\]!QH[STghU5!UX.Ggah=(FMhJ6eRqq8qO!Uf1"g!`.$^f"lBidWe0(DA/cYAS9gBT+nm)eEMt%Nn#PCG4csE2`++$I&:^:C5*L!me?9u\miNabU&+:hUUI`F*Nc2^+$1deoU+:Z[2r'7e8eW.qUh3+8$<GIE*@a[c#&nVXdVHC)KLg%Z0Ds&%^-MB;$QS/]tU+S-IFtb)P&`(#cEaa(Zcs.QNC8a:/m&Q%S<$Q_U^OOpkp:*=4*XC5DI?]?7*t@+j8gRg4\LKMKafa][S63%,7[&$/7j*DN:iJ^`(-8ai\_":ZbAdRZkF",f3?7+I1n2':-p(<`C+-B2K0!-nLZ;Mafp[h@$j?/=RSXL[$%[=."S9g-IEmc6O!)V%&bsu+p]29XP:LC^*GV+d_D5p!9@"+TIP+KVnf\s`'Q4VCNB\d(^="&sUl\&h&i654KkE(iMEiAUGp`VBBpD).<%&Ypd5)@(rbr_K%)P_6@DjB]ZnZP+cpP,amWNnq8_hk9gWn]`,)F]8-/KMn)_RRnH%lP\2QlKV=kbK*d<(PUS1O-^lhM]J5WUDnd4RkEVj>j,p8Ju,?%k%k)rU*Pk()/?X7Y3XgigoZ>kQ'9k/o^Y:iDK0=kUIQYp\/1`V$#6*3a!H!ETQ/#+b[_`0>f_'i)CJbB5Ac)u,h$STKX-l,1RY33%fT=I)oqTslD*EnmaS#`\5c&24+ClhE5)tOn-`8CW-ZNtCI(8beV?WU(=2,rLgbBo=psiadNS11W3$!AfN9,*4H`@3<s+!q]XW,j1%48\jqadO!b6JUa\S`et7?d2B*0t^D2-5[s@4cVZ@719::PsIPRj#KS]1q&Gb#ukk1O9d+57*u3r8?NMSjS3Q]]^PNt,:4hd,ZA*m%9R(s/k@#`TF4:#BhWEs3nEF;u5c'[8n<bJ7_I9/Edq!t,?KYG+q.AKu&*'"FNba)1IE9VUh%q[mIuA^mY!h`_&04],ajD/"\0S2a%7S1de7"@V:)abqo`X@Um]Bcdi6?`YAd>K_.b67[#$F4mb!Y\Zu&qQ_llsX">k*QGHfH+#Gbg'aZ##S.jdF9<rDe;.R*,n+hbNgJ,%Ir$\(L)Q7CBG>`8k$jqPDfII.p(Lgb+XN%/':O=)78hhoE>D%A%YlGGH5;?C<#Pcpr>JWKUkfT9(qZ?Ka7![Ug^53:Xdd#X2JJ`5%IInd/8dQffjWTN=+&BD6ftATH8tolf<[SJtKs5nK/I2!\)/DH6?Y43:<X@aInf1H8N]@MXl,<'A@4&@p'nU4UGJ`ug&mh?Sd^,iV%_JK)G#Ukj)TS,s'O2GV3``u(O\o>48NjR0\?I4rrU2534`^Mna3PWs!d4PG*m]iXk>WGiIBqe[-Y:C)n$I<6A@"bu%&aAL,ToF0^%MBYZ"Si34^Yf:[g1%@HHM4*3$-[T;@)f''h.QPlmeOZ:o)lh/B<e?1Bhi3oBP7d$TdPaZ<T;1Ud]cXce_07,D_rSc#-H#,T@:[LO%c(,ato@K\M%H;e_,&7V1?gid'3qi!=-q-!)_[9l]U?*Uj9tI3X/I=49Sh]J!cGVL`.,4E*1nh`!OXV9?CRHleQ^c7&9fRDY&Dmn'%Bhso+S@f#)AH,?Fn"_TaVCE-iHKSm1@hBBp^1h*//5PgtI?aDqP_U-fPQ5F&`"Wlh=*Aa2-B<(tC/W9,)Ipcss.MC1W;5JqKsAoj%+Nj^draf`QMP(NkG/pqHJ;A7fHGPEs7/Oh9`]=eW0mWT'9Bu$nol!lX6Q)<KJ`u(21mWME!kB\2lXM8&0.BaM&(fh7Jd/8pQ>.9W%7<7]<Sr2qAe?YXa8Z7q*o5B:tk1j]3/lR!QC)PAFb[rLcS@fi:Q@1hj-D`@kW0RMt&tHZu,ILdE5Fp3IP8IFoC)QjEj(3Z@g;[1:%`"Bt/gj1TCa;Uh>.CU*^UmBp7j6(iFpViU04PjhlYe8;49SS^1P#I:[omV@DT;gZP#_*U]ofg3ph^IZ7N4_pf:].=j^5+]ln'd6g%iV\/QbYR62cfOOu-COVK=R#+-qGdd7W1V,:5cLh@N;Bg5I=7?ikO=j38Q"Jk`-)<eR??\B$R3Zd3Znk^'(8$Y0^IQXWWV7b,0>!3%Kq't(musS!O1jF>oH94,>laup"8,I%?%K!L%CP<=L)of9;_Pb0's/c&\$srPibJg(fEYC]O/-*m>a/()oG,N95,$DG=ZQ?pH;O;"%[44pr:pobZC+B0P%]]4C;iN+'ljp,iQ(ucWjIg8F1"GfBRJ<H?aM,mjTPE@=eS$=f5B'GAfLau,5H*9@*0pLJ#?@sQO/[lJr/$'+%IDFeYm-G7_p)R(KjhB"7TPE@=eS(6%+#p4Qf-i[#q[XZGNF6]G;f,#>Ap[@^=8TKPn?Y6UHJFe'$#,V9#??Q',e>Or.1`G=!m^6\%OWIIrRQs%ZbMf#YTP@h^_7_lC>qV:mWlN9@,s/%dR8f-Z&0FkGS?hKEVE0%:,q8A<*`S]ChK%>&W^@=7H.)GSMoXiiM"^0Zg+8GP%6+UK;m"As&&L/t@3_A$O+MmH)9@'4"/5JZ[2F6+NE2)t5pWmoDZUmr*86T.7T:A&>$oT:mHP2:^B$4FdEqV>rU1S`F$s)0qUh:?k%KZ@Z8oPB-?lmRfe(po/kcF-K4T&o)A_;ss=PDmLQcR)tn3)t8_5t!;FQA7RcRij`GiQ@#+ZO*F4A7*F,Z\_I0T.2ucA.\^]g!M_%%(c<Z&/r")F1"3I7<#_*m*A]=Dl.KR*b7s3oTigs429]T9'!:%GpZ`/[c^t+=G*;K6!b9,.Q"f7MCkC_apM@^RRI8JEfotf<mRb_O%5\8IAj>#)h$'MX8SeV^3B+q'ZLTTk]1Hh3M3BLYV30NoMK&gb:WgejnZR<cFQl2-Fak98`6BH@aTVX)(TZ53ioRUPV[[fND3s\a*%]()cKZO&GRVbGE3:<n$d[75R]p_ODQpG?^L*W,3iYW]SRVe;4VWlL[$9lusdES>Z%@.ND]Ob,OSg"AqIm:UK`[\Ju&:X>VW1d#D`%'CV_Ue_/Va(2R4s23CHDk\fJ7k[.j>\KiMrj"+s3mnXMH)t3.[d(MJs&P-NTORK7>(!)=YhS'-:+]k36ps3N18*n_dj,@u0.,54d%`e1grIj/Ab)Ip+t(n\VSLBJLTUcTPkQSIo7F7n]O`^ro^Qp,#M8m$$hRuHmq$DKbI0lCXVKdIbb.V%8U'UB"BD3BkJ8^FU[04R*c%A$a;p8*c?dc^c9))#)@irgA`8d*2?SB8i&C75.HU\2Pr*:M#L*XW<s<`qWY_%o/WL*dLr?9Ja\$PF%Mu0g8'5dM*SZJMlqH,\)3+%1e*Q]:6B>L.5Jn+2"nsF`lC*GIe&HfLbn@0S2$%J"D(/;=!u60Vp`C;cY&k)5,0*uKT'me-'P7(NL_eA`;63%SloW`)qG0O/$qa@%VN%5B3_@>9GjJnj)<8&uZ/Al1E::Ut;q&b1(oPAo>pdf5p[?f.B/7K%GA<[[`jhT<ZqS.4g&r;Re*M3EShWtP*-aW[Z!j2,:6<mZ%7E0T%\NI4C(ltT"@)huOq;%XuJO0lqQsI]k3eKM1^%?+s`f2cPVdI%NT/#c#0RkEZS4\f0bTLENQ8$NFl)CHlA;j<o2q434j"V./%).nh[2/_T9s,i7[XHoVW!1@E<\8q_m(hX#5SM<kn1GXTAnIRA<%qLXZd>psKSlNe?/*iT[?p-fqpgcH+NghaeQ7"k9`d#QG&Utp5%*+o]9cLPcs:Xm_7(oPg@8)2EK@iY>SkD]GON:G8_OdTj@4#8,"@DrO.`ppXSa<U+cPqd1JIN^*;\W$'3Q1d#V(a!PnZ&(9V,PE4;%cPR2P.4/OEjbBNd\GoNO\<@jA]`6$X_jtfR@t,sigaPais'0_lHs^KN*U]/edXNl2ge"p`T(G1Xlu4=2grUJ%I<N+&SECUK)/"_g%A_'YH*U_+Ps$PJuM4+#maUWOC[)(o)A(fg9DRcNMr^:q>W=iC,,J_qRb78_)6dn^),MD$QCZ&ip*U^7Br_RdJ5Gn'cZGU=!;I3UO%p]UD%'4cm=SmFIalu4=2I"F5h`7a*EG=,0NQr/$OaGTCMO<#CRU3l%UiQa9'6Cu.qg#6@Gd`f#7/_l'A=o<j;E!I7[,!AYl*?N;\%r?L"SAF%:5bmns$,5?64iPDVY5EQs-[mk@\g#5LY]X,]iGB1S7<ngB7*?Kp>fk-"$\`"eaLF:=VO'"P)j6U_Tf:1G5Ij@,26*tQ;%KpcP.4,]6"oUj;:O6k%`Zbr?hE'K?,1-7VPL7)UrGaK89I<KkZ\BHWggrU"tmC5P)h*&`eN,`r`N5ml"G.9?\+ZBAEZGW6L7W[R=%.Q]aAMfUf0i>u@mO(F([mAiL%SFFk0W-#ufb`9<uO^/>?W3is#U>:Vh^fS-t*WH,d_arYa4IB+m0B'&PNj]J+n=Y7q6mhuLZ`bct%eL]T6$)FBQs8$rY*\3L3J?^h-3MS8t]&,q3`e$;PNj35`Ve_DIr)b*#RD_%Yj[dMVV+1lnk]M<9GT&ApeDn7=J=9j^\#>-9HicBD%^*eKVO*V^H]7YFpZ2$aLok7!JGGWrQZLeZUIeqQl0UDiTBG$E"/DGBCTO[%XhuI*!.@qmM#kb%7312'Ik]dp^FGsQ3)a,+_@kg]0%QZP4?QBZBWocZuFVE4k7<es_$(-<mk"dZWE&K#KtD[Z\W(2cVd0[b\Aam2NV_h\n\>!^9r8cFC"]+>DhZ=7qF)3as;/LioHbQb?i%D#5VsoI!`UGVo"js,L]<U&dfA!+SfjqWt<XSebgm#QBk)/Q)66N6XsW_CN?u?T4!2$<cX7[Sn[WSeC'WhBdM</l0t0/X3n3jmf9m%FOZN@`pI(CM\4@5hXQ9"]Ye6`h!WFUIg;?4L+.U\c&*jMW?YF3q28oERpa;$j7*q17q-9r1D>_l=nuN*/u1ZX=@>W%i[4eBR^LtS%3POOXfZ&Sho$&)lcgi>!q'^BVA2tbiIY($BB#+O@N=B=OM0GIZo0UAe5#aQlVjL0@`bSi*q8`g0H%3>8nr4hilFOsJXr6)Q:>2h_%O_jMP&Z0"N.GdT.G>;R9H0_fh/],S4pTj:a]5$9*p%@"cfXTWo9_UUI$a-a,9OhQ`*l$t_R2cf/7"HDR2""mCkD]C?-ZV;EnY`W(%KWC-S9XHBW2+FEfi#6+7eY1Co22:7jY,]?^<"dDLBS9pe\PQ+d"R:sji=1<A-R$4F^jRo_!X&MfhD7R1WN0bo\G+oLl!q3YptSip%kU36:Y>4:Fq;TM`3bFSFMUJ]1@-P&p"_Fe`kGFEjfOeNBKKk8,[fR`4bk_m]kmrFY,g+dRj&dX4qfDfZ=!JN>18X.8M,P6,EsV0V%m9!S(`F]etSm=uOCBj4q9_Z%a0TNX"6hL2q[q"fl'q^;!A_0\j8OLu?V,34+q5!URU(:\q=/*A#M)NTc6WVi'MI@Z+_S\')ND\.H%@5Km^Q4]DXrS8m0I-7Hi"DLH+QCiZeeaaRRV)!Nr'%IChb7XW5_!%!Q*Jmt>H*>a9`*<l-,1U^QoFhc(-FWOeedIbbG;E1@./b(6%ndK]h1pY\Beacg!G+,qW6\JX'40sBZC,li&7+8=)O_PbA]HM:>Htk[Q0DES'R5f9<nWMc*M2#$gbk'onF`u>^s/eLq]q8XTh,#<_%R7W?/YO>/qeY:Y/^E4[3@b)BQ4'rhX+R;$j9qqRYADS]U?k8+j^!4MbrMm"f#i\!eZDcYN+d_+3U,YibQ4%[]c!O$]/pLIU;?V=b%4A6br%.'`+[O,^GYi8%6HHV.h+3(;Gj;OHQ\FU/=o@h@KM,7EM98b.LE5B`p%jZ/oEP+k5Bqb3c-[[OMD7p?A'=J-%]+K6>K\(Ra%a_sSU7keEofq,mPNYuh)GW`Mh<B"Z0[8Y7l<M;92p#uJ3Ph'T*o\S0Fq6RfHFD_DOR^uJrk[bV(q!R[j*bXu*SBQ>DMu:QOc^`ui%@3\js`6$-3ero3`_V*a66f0@VkFd<K.sg?0<VLsMf+jO<@^lO6e(pIQC+Sgj?=/XfIe82]SQd"tm^0Sd06<D:[="fWWkFbArB<;>%k>jhE(E;%LIYkZu'i[J()giZDF@R&q]mS1gQ.=]g`Q.eb_dR.PeLrlD+'uqaimljO1&]S33a$?Jos3T-amY_k;a:*5qftF'3c81O%b1ZC&n*Lk=48ubd\nJNip,>`:[r;/3Q++6>>3>]Jpc`V_f/>jlFDpPdDqIimXXs5Dgu@+:\'a#&du.S&RE(NFm@(>(]!Cq>fKRE`%n!DcY]sT`Tn*fD^F/ptkVfSq_hHJ[8nU%W<n*\R!opnkH06GP(rU[A!I_WF_m>nu)5["Y`f?^HWmR50t<stYD3/&@KpKYj5-VN@&%Zs,N@>11A.:>U_s?=*dCNVZi"L'o0j*/p#Ud\0ktA=>)]DQUlbT]S7iFRs<[q-n7mHb^R,mE=5PAN5]S%"IqmZhW;4l\K1QHLC4f%GV&qbU\ER'l;IJm]I7^,Zul+Ys(M6,l>W4oQ;0m4Pr>OHDcCpXK)G;qp."`c!@R8O^:^n37k6+%piPkX$bCF1^%DW&7gh/#n[tMe%07/]<@=.`t0Ah-0njW+87\9UFf&]1m.3DhPD=2Po3Tu0;_-m[#D6_('WMA<a[PchiI#7"s0NNg-'uo7Y;pSB'XDU8Z='tUIh"oXs%4kfAap9c`dIX63&\!!l;UKoL4d'(^)XNHgkZ5ZH?BUEu*ZCQp:\[>U960Jm0bNn?Q;O-+'E8Aq_8([:V(\k2Y`bYAXV!m+HoP.eB%m07t-nPX2qqs/"/HSU+Xh>O'\FhOHmc0p'6W3&CmZGFo[i-hS,4b#Oljn2r(X`So>!/9n)TtRjXK`4@4m@_0g1Tq1#XaU0mlNME1%g$9*7Wcd=aN`]L=eS5JmH^dMi_"Pgh6gQYWltEo5f3bKN[B/.EURC5fVg;?I*iTsVnu^X5k"_#3\gT`^GE2FgkCrBQHhMNj\$aDW%MqZ9i%J</ade`jqGu)++5-dHAleBAhq>kI!TeO![kk9FC9:Y;m[`I+Ig09uYP:Ncc=jEbaDU:o]g<X\$X^.l`U;d_qT(J<94&c'u%5+Q3*s3:^DeVC)pLZ6@tSYW[e=raOScNh]0^7K)7r95-oK]q>2!tXIX4jm!$\$A3,I];XORAXP7fR#3f=RE6n+EK(1_m`qeH?IOY%R=$hpgY4iY6i6/O/ejA-%j^pr+m5h;A_@ul@NT`?TGJO"-]Jp'),(+_R,4_K?eN?n_*Tb+3TH'Cs8?mXJ8[5Z`V&jo?TC).bb&UE%VrH[ohNIJHo94Utd11%T^IES:kTL>)XNrss`(0@p8\P&slk_lE(>h`lKqDZ+'_DP/aQTJXkIeNt=^MgYo(Q4^gA4k$e&aB])V$l.%FQC69rL@23!$+2rd9ZqZ/DH%(g7>;]Kgumal/>#`Yo0cS>j,Q3hL>/XD<'B\ANlqC5[.?0Fm/U?^ZtrM>Q6k%UBX*VFKsF>l,u=#%&%=AS2_Ptgk?gY?LgZ9lZo8fOMn+U=k_=1Y4F/)#J\KlfU"T*.9,%'fI^+?uRI3EM7+;*24_M'%k2=a9(O1>P,$MCZGPcB$#6K&D%7([]rV_Kq\NIASJ?FI'0kC\tQH="r>MT:Kn[t,?foF^6Rm?R&7]D->cZ_tPr(*AEhXgPLp8%66C#VL#dC.\;M]XZeq(mPJbE1_^U%&T\lA'c(5$U$\*WqnBhq>H-iTR=#T@\"0!B5-=gKes_XeEM7@N('$q-%q/^d(SU!/%cWgZgm@2jm?ck]7e&:H;H7:*b3?m#lZGI^%oL-%'9iWX?5OUOl[+_(b44l4Pn$`fW(fT$K@OY$batB8$::E:g;d.[G#27&8q2JG@N*abKOZT2]>cE$hO)2YmS@C*+mh\T_r6Q^?%j+g[/I^ac-r4!TV+X)6.Q^Ib]EP:q$HLR:RDH+'1nt2K7)h:R`.5hCB]SX6\?GT)BfTmM(1=Y44DtD&/]l:Rm@Bh9Tj:6ue;b#eK%->aXm91[fI\#^C[Ugl2IM^04^C&Jra5Xi?=7_8`%2bTY/\.I@ej:6TZUp\Y&f7hPs_&U7=.O4HD;GDD^8@P^bI>;1*gP_tFpslP2%>Ph4n=IA&[q6SDlB"n'jJ%uErqI23*!)RJg]2/=grTEWIosuD.Q%;?PDT)EEmhQEm,0m5uj$(B6\*r#]]00dUOb75Poh/S+jY#0#%$[Tp&)CmB?c1<60V6TolG/)=(9b5Hn;?)(p<@WU+UE$RF"1+m1[m,6<rAN:=RFd@+m]sjl[pGQ=JE6>1o]>]1q@.7VFZ[O-c+CjP%+Je-c[,*A%D0FYEgA.s.fPKWt*Q%t@*-=F;pQO"1ZV&#YB(+<\o@q8heUZU,/a&J3/.[L*n*SuOE4*3Q#lGJ9[<8jc1$J#AMpnH\%W)>g7(YcR5Z?TM*]GrLC?is'5c-DsHn#&gA)0G5Ei$E[%oGg,.8#=r"2HGj)TZ+A9Ld.AB$kC)hi&D^g5TG95=\d\Ph.M/t8o(Ke%LUd:g4Y0U>H\]W+NlB8(K8j[>SF2pl69@#'q5DP<@Ea5)nP1f`="]R9pB>B[!h]'7+AdQ'f\"j!^?]';pF]V5DLABa_qmpIIa#m[%(IW_TVjEsHk>HG:p$H/aRCb9!iUbr#9fjFKY977s;#GR/s#F2kgs:P9J%e8h"9%L88)GhIQ7d#T27gR;#`ME[Dbt-PL3s4U;cjT]%T*ld^Q]GO%J![s4H!!os>J8QbmH7OO$V8O:VOCUU!AgfAK)"5ma&IZ"(Y[0iXYhh:E-JQ'LlP!JRB(1mrRW#]GU^o'V.)pbQ1P;3%R-WlAJ4+m<Bf,jdAb3l06VuLO^aX*D5m<VHlGZod)gJ"T*7_\IJG'A4]>^PqVa[PYd;rH=2%?oN6GLCP4^Ds-58KmaijuY^d\".<%>BfqddS$oG]fI4"ekU6TVQc@=*c(57r`ih.`1rBb0d$HSLL:7WcRCHZp:T(gaY^EZmsO#W(5qbd4]?7\f63tEK>RMH[T[L[Numu'%iE'eJYGWoEMg6c],3<CVO<K\Ek;1b#a"D-3]H:#!Mlh+h&L,6G`8U6*>CUF*bjFLbRq5UQ4O.-*]A<_Gj)_#smJOQ'qpFT;2ekL9%gYgom0>"_QaP>)XO,k@>$d;=lT[0`HAXsY$ABCU-:De.=d_p:j*n>M2r@jL?;1Ce./?O?64sCJa`t>49o39uMS*=f9oso^PG4O;!%#@>V=K-L>!";uL)n)_lE'^`QgCP#-A?W+W8F&,ch,UGg2IF)/uh9-_<lPS98[0GIUDf;9m$XgMm*&EuAS]V@rAP))HgLEBsQFi[=%1CrRjd+EUe]7UPd2"2u8gp>'hTcLXqmIf)$B\)lLCU4?Br1)O=<>YB&[asbe]]g5m'eK9?UJiZ01+%Y@Q!HIj7H)2;ql6m1>Dhbr%N5!]k8+n@4Y9>JN,keUWlK]mZ_h@[tI/C:Z=H)Y3"_gcKYN-1cg2;tFrd!J?/Yh4l1NqDBbHo`Y-M#h>aFX-+q@(OLlUCL!VsP&a%_u%^)\b(*Fp@-@BXeUk6\:m!GME#A7E.J]$4l>Ao'h-?2Z>89fj'up_fCOe7+-jOOMtDD\\$$l%P7%N8Z'9/BMI0K:,*fopK]i3o%a*Rcj:qs\*2*KfedQ2F('Q>Al!K0s(Z2!j/_:a9RVO5OIY&Db#+*17hj42Q%<*D;srB/\=T=]gjb+I(`2fWr]h1<=j=GM4F!fi#.%r>*3Rmle@ak9gLqaL&_/hcWr5BP_IjI7^aMkG.&9:hjZ10mi6!"cR<Lc;-_>Q+N]GPR9t@g;&4DRfT:.`jOQn)^Ne&d3(UF6-n7-%J^*WgW]7MG"DVe[F`TH)88.Y=9C3"XN-utt,4XaMXmcaHW4.Jor#j`_"+O-N46p4*@rhhqT3?,>IHlO?AHBbu*YHT#L$#hP(>@t`%Rsh\r`Pk.5BPhlXj6p(Z\Xp0S2<\9G;/M7SrS-A:(<_Y%WuTsUAj),cSm?a,Fo\!J##]TO=:7R.J^hT[4`1u38p@Ue-@DVE427R9%*GC]9]Pu,S\Bp+.2El--)XLfV;PDLO]@@5m$.s(m'u*3-1$_!VX7Y'Fl=+o-3K1Vf5QY0Rk;3OA<t#`4/>@Y]R.(.<]L@0d^6!pL%r8I^aHTaKL#AQSeW:X1W3?Y#@cO?d4$K:qCJMa&[_Qgh1hH8:r@l]_rL\c(*UPKp&NP-<[)CDS!+<D^Dntcu>kJ2$[>`RAaRFS#@%=d:!aqR)DSn"%je,.Ua1kh/Bd!Zch-RiV)hZ6!+rUdXlQaCQ_51GJZT6D4BNI>o50MU5fe7((9o='L-6VGsTL1"Ab8l13R^.0BR0%O[Ik?6rltHRWok[/!V1"l^r8e[GAC8fbIo&fbNnG*Pnu?ZKqC#,eKebllTn\CAFP:;/P\PZ<BN?[n@&N#ns8ggm/h3KVX'\/f.:W%T&r]KF1Ai:6>0G.P0s_GoC(NO5H\@Z$QhJ-Mnh\1LIU4rqIk,3)"%Au4mZR+hjB/n2([P&E"@ZYfX>,.$9s6J[DrG$5`VHWcgP]l%hg`.@Df=jXMVFEYp[\&/9e@mi5Ku0H/2to3%X.-`"onK.a$+%LJ/12"O6s,+EdNdbpX]2>G_\@p6so:/q.AZuF_AaC$m,S]&pY@a%a,:HcgDWT5e)IZ>r;LpoeQ1k9i0IRK03>e9A`p?Xeh)*FY8l$Uio0WMaa3Z*kr.mj2t>9jK758>r8&ujC19ZZ:>]tS>n]/%VR$7d%c-9_fY]^!.p_2L%RsVPaYki,;YA$3KhgH_5Ai^$<?0!6^lP]Bl(*%tE_b2n0eceR'$6LqUqWgf:a]4BX30)<chYfF?8ALbf^p`@X%\gl45IKA^%Mq1F?)<<8jJ1PTISLL(,FfCp$7C)Wnbl6JEKe!Y>[D'0NNTn6M60TLaV@Q^d3=Yqe>V4B^?_#ZrUC9=,X.[j)F50di%>fsl75^Rq460jd+2D'qG;&.]Afap!.JQCQ34D.=Qf<oHP)`B6(Sr_`Y)&>$282%aRHJmT$f?`0Ap64J%\]=R^i(BonGAV]@mSmsb%eTs2mM9#^F*ci"p]>mDd7ToS9(,q9rIgSH7kOUYB$bIQGmnI\\Sdp[6mIl.dTmd`#nEAjU<*B@`#O2nnDN0L4]4sN>TYm?G0dBHA%C=S^Nn\1*6(O%T=Vq/M;f\a:j*+,`/%"4.K<Qm#>i5A@OemM4Z1^Ep8G*/Nm_rfOeVdAYH"(9#mWOQqt+ZUYG,pT)DhE!aFIYu<U%eu\,^1S/pG3`t&emAhlnG6Mm]HH/Dm+CT&2d!.uX0<a*Ul.VjkYJ4B,Wu7>A+^cj0e8B4%$;\N@O^<)9k8>CHfNLQ=hpXc)XXC7%%c'2pc="fo?)im/>7"Y1^efRPGoqQY>_?#PdNE$@&lRH1D=#-t+S+J9rCHu-1!/"r4O)\e:L(Q.>5!BlU\;nd9K#%?oFqi5ld>2TQ%;6m+Q=Z!]H<3JcLMajomjOb"6/?X_=OO)1C0J"k8p0Sm&:K48!5a?'-@th,6jkX7WpR3f\bLSMm-(^iN9p25b)m/e7jD>K`T=s1H%BOJ[\!AH!no^Z#T\o@87[H%MEk.l8\D's\"m@AhdH(mN:/KoOUh6u3\`71<9'/u4RjJm1o:u%Ga85/^;0LN2"Q(`MQ4?1bamt<I;%p3jn^DW\SkaZ_oVD)Fi'#)a=to[gsa=_t0Gc>+uc.N=b_ee_WNBTH6&cBk0>AA.e*J^Lc)^Rh)i`,2n\Xh6_6`0df-Z\>to?EB\9%;iCocXWcnm8diVXV3cr@96\dA.f]?ii[O[`gAB\FD4*mj)!)fYYY?l3f/K:4Q\usNEZ$=;>>#D`.p+A*=(^R^$^uu%RL:N!]e0ea%>:!X*m:h;d9<#P#*e'&."Om(sq*ia@>HShQp>QG(o'F%Rp$HIS9i(t:ftB\KS_[*->SC29c`Q=NC$mV"+oA3H=:3>Yb.6*S[8sn'%&*D"%U.nqrUT)/KqaI;f2RJcr[=6O-4O&;B3?7%6KI1+k>dG&5_KOM!Q&lD98guE1I/s)UIX904QTE$o'Y^u;i0aqge"CC2e!g2&%N4XaJNb9IGof58=J1#![Pg)BDrV`k2.,OomeVlMH3VAiOBk[Dh4]8K6m]*,UQ<-\Db/.!8L!Q>H-`%(f9"!=H55Kiu<fFhl,4<W]%Kp._sY?!80Ns0^sjp=:&9<K!AF68(bS'"1iBWFc./#i-of@a.uCEB%<+tH>C?8.**DlK>cB`mr]Qc4qV8b0[iZF"hH;]CP>.X8N+%cXT3j`_=D9koNR_2me5'ba1']Akmm;7TaH[1F'o(kPsA3GadT36Ah*H!WLc^*46^`o7$;;fh&;ES(*1=a=oQDH<9Po)V9su%u]8t%W86YG;u+ptH;ssq%W\T#XZ)ntg,&=tqf(*h3X_0CB1G=eZQI0[,F-7N@]jke2[="JjpI(Gk9)IN\l7k[[r/s]gAC,gWigQ5Qd&gu%<\?#S8#9\Ri;(>1gR^X=LIr511'SlU<HZ!!G-lIp%!L]aXh1+[IH5<4d.O"Ql/JK;E34&ZgU/_[XGLP*^R6hPZ*9&6>l5Qt?es($%m(ja7?JbRh\NWq&`:l'^3Tf@o+^X#Vdale&C9'.OU+gN*h!rXi?4hC-:M2:Q!'N+i_BjJ@dC*7oC>$kV4J(n^r#KDJo5b/cR'Hei%Tt+/c52KK"Cb1KUeD:kE5u,3EBWn2]/nK+GMm8B%708m`dQi`BOP!iRRSHDS!lfWXJ2Te,6Pj,!A.)FZ:CY"1.BCHN"m.,tJ+<!\%(ZW^Q2"9YG[^G>EnXH%]q."#H_rII6)ru<\!L^I`07s23UK4,@Q?bWgXo6hr6`Jd&!&rrCHg9.jD;4AQbkYu7o`)>nVJC>ha4B_p%oK>%`_Mju,3>4(h[3PrpCbo5<;^3tc@Z]M2ch[0<qj2(ejA<NoKBXWZWolK.BWnS]arrO;N/7BH`nK\F.;J-Y/Vc&j2dh,_Z?tX'%c^oUMjQ?@>r:#[<Z9Bmfs#fo9kgE,mI/WJK_IUYYhg"=N\(LMaR=Q%:f7'9qgJ@k2qU;@7m5h#s?,-6^:L9R:VdY0W!VFt1^ESX(%f#LSqb"C-.q9N,[h7R3'^\s4#hUM_3n(oLW<E0KYV^-;0ek5ZY<K1tnOV)Z%r9LlZ-N'AG^DNYsHruBG]?e6@kD.N!>5'Z,\banM%:S)Ae?eNh+T*KK7l_QOhq=>CUB]j`4j$38-?,k/UR(i&=K#?\RZD!j4\9*5llLh'HH1sr+f=SdT"(:[Iilpc>W\utdj4ETm^\-!$%I<",kT[4K]Iu??^?%&6;2nS(%Du+Rgd*.b&^8.tnN;qlZrqbcb5JQ^V)s;m>^"r%9cZZ?C[a3d;>I9@Cf)4SBqj1BVIWKu!7euK;%pWrg*CPc8JmFEk]=0A+.qY?cKkb%n=9UDb/p$O3Br.)l*h3B(SId\ZP(E@2&)fONG[Yqo8=)K'_0;![lf?aGFo%32o:VT+_0\P@0%Qp2!NMgmM*N>LJts$o'R](,\5s8/(*Vbf5Ao<3(1Y(K-F?N'`f[m,9=jk"t]D4&FFKn&F.0HR1i2pM@ecX")hqu59ls#g6tO++dg%9=opYo(f?5#VecG:S7Q(pD(T)Jp$):R0"j><4Do'a+)n9UMt+P5'u7L``GCsJ%rY/o)%6O93$gB'@+8cVn9,ppYj;>jIu5A[nlT9%%3\)@=[.Ph@(@riG&?*q%,JPer$TQsGZ.`^Ya[lSWj#e+ns=:p;hsmR(bQ79G\9@jF9g7nW&h%5E[Ag)o@qk\+$Z6poVX@HVC)Y0%W&dWNdq]5l34[jtd]-k#T07-?[6M=[DoMR`:$U>1J,Akj?QljAL.C@.r,l#>ikH!UZ25&NHN3F`U42peb;VZ\lFeZ`^V5+SM1`69%PPZT46`r\%qfd_'^2iCsrU$R3SpBGdreVFtr6)hdCju&65@;[=o[rcen;"KFGlH<%rdd;HL/@M\T6U@+O5>9DfjFc$Vln3)T@8jQ%E*S6:H#5RJ2<jY,Yq"5;%P)o%]3B3$J,T'/?iOrJ\]g=WrdF9@2$=J$;XV9=)pVL8fpu1]bb/m@+.g"9Q_0jq[s#l@H8^kul2jaW%r_iWcSHeT+F3j;mfDWR"Y*7?/?TK.bF`R*JY@25%V"`GHq<6l;[;U6GhP=j3Vr1QShc5<ocG/5_B^RBPSu>]1X09"B[&9PEOGR&2%HN0f`SpU.jT6H[#=.>V#j*0]$D_igAc+e_tYN=+VoTu_pnaYr&>lNuq-[r4O(B5ZUJaSf$rT3P9)]ufnlZ_7de4Lq_nBl/9aij\B%q3R\*L%Y'!%rV=@fkXs6?V^FX4d+=TT50dr6cd4G5]OB1b#JCjOr2qKUd"bNg,GA4rT5YTY4HbCj_[-OoW7BWq"u(\^%'q#l\k_j%O5F5ik)6FXYB'>h]@T6Wq:ehBC4:BkoiK"[i,Gh#i:GZp^V5ZK]%f'&Y5LaH6`b#Jf"M(2fDD2Cr;3O=5.gC'jj1ZPp<C2kGFbHs%W8776eS82Mq9sJ@Uf@NbR8_%arDSZ_X8GnBj[T.\;>NL"UA*JZc[YH?Mc7r@@pZ"h?T#!E1"E.+rp'/XhE9JbZ'R>.<EJpkC,<X(%e&`+bI.5n<-#+?+fC'+o?d_TI0mEBg1EYL_I_\b2?b-0<3NLMbD(qlE]m9;5'>HYj4`pPs^HQo.lg*0n]/M#jp3QbfpK7#-Y<8*B%e8.@^?L@_>ho?pjb9I?c.A'kAhnT%W%n-<a]Ds^#(C5-Znq5g`^\6GgpJbd6pQ(_grIH\%VbbRGf_sjJE1,h"pPkU;f0dJM[Eu*)%IXCqZrF;^j[m#.ff+*)p(KC/+2uigKbXeeiIrKef4\,A0PHV^o`dLARiTa=^qo4CCf3\9n[0MZ_k*+cCH]GJ8^'s&EMsibVJFLg]%hON&n?@1_CX1M[87/ZkFB9FX8J%.dYa4-A$n)WrHT<-&Sec/06=HE<)eii]sVe-s*p7KI0H9:J"*YDsrhEAFqDcc&o5Lj(dl)F!8%hn=HIT/`C12no'9WA<Xp4&GP*](X@'Dqu/Y[]5tgiJ@@XEoh304E[Iu+?8bhl^'gn:K7.0jbkT=V\JWC(<O89AaT6\54#g2:M%k*%)!tZ)6g(bI^N9FM@bCPoN9tkG/jY8\%u^Je#EQjmF"%%Xo2SijT1?,6rT"o9SVd'-JkR4"6o8964ILUFpQ&^O!bVG$#e!t+rV&SY%Pa2!$N53[B(Cm(=A,3lt=$j1U]B=>$kgDhPeQjl_AM31*GNu#Srq;*lr=6GmeB!Q'i;Dp(qm3'pn,3?CoEX'sRD&Xr<t@UqpS.U>%mMXQo<+:=MO2Q13\'NBYlDen)U2aHL&_.&AbdagBSpp[$`%H,sp!s*2M!CIVLGV.^T^;]D5Zs<#9aT&=K1,D.]gA15;X/O;q<oPf%^Ue>kir]CNn(HIEqaF,*qr4#5cN[m/HEUqq]?&2sSp\:,bWiUC?U#4WHZgsLmiPXAG5UYdc!H-]GO6GVi8`-o/GF#tp<-P&&GknE%c^3PhjGDcsfWX0-%qW*.Ac2Mf`@pF3?Y=&"5&((2ONII%!*m#<5b5.b<rogM%0-hm\UP?E$eGA<](?P6!1pf9%039+5H"q)KkgZ2%AE&/?!%qLYTQ6D)<rogM%=h&\&$>tQi>M\dQQDk.^kHP(^iT1a.KIe#Zj$NU`?&+bi5.>OOL4eu.KIe#Zj&d$r<HC)\8Vn-3gL"N%!N64l"#BBgR/RVCs1^'InDAXn1B2\Fq-i^ks'b')-=<C3qu;/5q*,5-*9@)`pOAP*NtPH]qgXW>ST5_EB56cQ#$4k$;5rs.ok0nG%k(hZGP8baFN;D0S)1J:*fBMl[?[_84YQ%d[T1N-f^AS!%5Q5q]\r*i]acHB^f09$(de@i0f<tHH"^RC?=c229g;WWP0E1J%5G.4L%'45p\3<eR4EQiA=iH=2TbL(b3_r^BirEfF(msasXSnMM5b*g8]bOoNJEp*1:liBEA<>>X$5',iZF&.38NW&7P?P!8;o1KA]Ia_VO%iR?uPZ]oCCJ,@r@GHX/Po'ao[o9YeFInq>mUIugQ%79d\>$[8_lh!FA]:L8Ioq1^C&8"+kGkKburDZ*:\$439Glm'uj8-;ZI9kQ,%?BS+_pSWK<\0$EpoI@:F[A/hpEFElA&FY\`rr)(j5(DbQ=2Hc`c5[G4GS()1>+SN_ZIc!UDdN>)06Ims+S:ZJf>$&>m&K%<jM.nr%n@.$<W]RFr`^<#K_!6DSYr?i+;0h-tlVE"s^HeOk2`MJcoZOSi7Va_nY:SY%^V,A]oYQI`o3]8D])2Ho7ofD5n9b&Mo).S[Y!)F[%UHl#3pQmhpor%h5H)M;#^AcQg(Foa(o$(sE>JA#(L3A`"j."XbGV?g]rTZ2r^8pSS%R;jO*%-akQi?1Jn("2".iH$3ba6q1qK@lF%41]O5,4FFemIsuW5ksomc0p/WC&dl+hRmo?Nog;,qLA;?W>lkHO)5.&(;TfcNh5CNa6&fMrD,qM^3oJAS_pULE;J<"5QCBKSc:j%%$.)32lp#m`lL@Nfo'D_9fp@blY2*6pXA@G44bF$K05DB=4BdaufDg9k5P>'Tj(R,2][X.PQ5iNqO,:DroZ-g;pVu(rmZs*ba1iWH%g>go.s4/91f73^r6N;,nO5Dtso^h2>>I=FeOY^U9Hn`SngKdK*+5]8&-1?^Mrn)S0>@R6F[uRU2rI4BSSVt\+*%fn6O%6(7qYB?8%?!;F.#?P7j`U6(d"#@jG7WKhRn;dl1]4d]r4uqnqO7etgV;qLm9A\C_f!pcYB4Hb<]a#Q<3QboG>tG.P+6C.nhS]Fp^k@qAb;6r[%T,]_epMrJa3gA37+)Un"#>WR4V>\ec\p2&Y<0tkaON2j:[(*]#VQQ:\46Melrh"&1s6s:NXn1n#G*q26:B+IE/9RP$fYpJ]gDjRB%NWVi*-#fV?T;6#`4D*75MCmQc?Z^mR4]I0OM%5(l!?@n1Z/&P]ni"N)S7>V_l.7PJs7$kG]JqYRnEVB<F*u@q(<X$F=T54Sb$soo%04pDj(S4r327>QLSE#^:9Q$l&[q;,b$VmkL#)pBe$s%1]N&&'I,&\-7(S4qT%?-\f*</s=9Ws(cP.'Vgkk(<4$qP<J*Ed$a4rgWU%gLg1hZYP`_loOFG`l04P$T;63g8=Urdp('Tbj.U_Ti/2Zo]BEZe(A:,K!WYrgb%3&7oPu6\B?LB@dTnR.rMoR&q&\gZ=j\UB5H;g%M$qW^r&F@6NiJNFVp;I"H':1.iki$+Q*KIaB`EW_gSJX]CpSJnfbLF_2MZd,%f^s!j63D9GE9o:e'B"`FQ;T&r\'dC/95(e0V8!F%.rM'\/;O(e>e^o0pb?\/'u.)oKE:J$lBEWf#?$&`-(,+unAP/<i(=`e-V#3J3pQYN@]*DAY1-d2g._Bc")9UqS?33u2Nr>FL$>QD%G_]e"$3]h?%%rIV/+-(Gn^<(Wn;!?T4PC3QM2gsR:mWGsSR&<7fUc49eM-EYagQXEL=,^JBEumb`sS:R5@k+!_`Gs)o6kf%qMja=%mHfG*">IM,G9p78m1[6$\2l!-")Eh)?Xm@*d<[$l6Q/"2i%[W_l/)bc,JZf?JG21$WGT6+2tG_Emno8*I87"U($X`;gB_aC^dgeC%pH.64DtpsOi/I^Y.06#ip)0l@[[ZpFB^_)3hK]@DITJkk`9p*?O-9)%EGFocH?-?ShF;gPMY,2T-uej+@2$-im6+A$4#bs3<N]C]%M7\o,UEmO"`1ko<i5YFJdX.dcGCH'Bh>*;k7XH*A4\FEi2i7p^`cdQU)sKLXd^r#.QeD2IOkrQRO-K:^%tL_<.qY!T)soddg,hM]%YkF`CNUL_kpBYK:"]'"M[Sb[%TWeZTQN#o<,n(.d+$rn#E?6rmdp?MgZq!N$$?]f=KIGGS2+;mN/S4V0(k\d=%_:;?6uMBn:n=8,%gtQscQZ9mt^YOE45lp8$*RGjh.rK[5dV_?M2ZT30qZDYdPT5Oj6V[uClrVPs@O8\DYhb"Bo'uLb!kRa7`e!B[LF!JTjAZk_0X\S\%fE&A01%".Q`cNn5lT3n%%t1%h;N?S8QAqMC/@P!;il2V4&?aL(dD4IVmai;A]XQ^1ifKI$ra<F$N?U<=HrLgUhc3\0-ul$#7nSUK%=*nO(_i5'H.2b<kKq=8:2bJI^Pka`jN&F;`..NEtikn`Bg5'\m_FI4O&$CbsOl/]\O-0VfWcH`]KGtLe;BgLUqJ$r]DFF7jM=;[g%cttVLdGUdq_2#&@[h7RgKTD?'+/5Lg7Y;Wh5#N;HE8AQo"?-s@PU-#XeM0!$gh?2>dbmLB&D_#=UVTGmK+CgnFecd4"s4ut:A&9Z%9%tc];,Q&\6`\gIeIqMC`+^5*K52Ya3m8msnjXEQgi_:qLVWIkG:>-N'Us<g"[=-Lbh)iY!L6VU%FP"eE4'm';#,!d,`r:V^N52f%gJ<pcji++WhJ`X'XAdS4hLIY:978eR4Kpt'I^`g!Z+HM;[I<Lcf\5HpE@DX2eM%-\a+_\t@uH36GdLdY0p(1:*uZ?!)a+;t'bf#t%F6]Y^.hWkbf(t?0%haCG=R5:%NQI!&l[@9r&(>q!24`m1@O6^f]ijTXQ)!)3$p^.P2M"hoej\CjO=pHE\^AD?9q<8P,BmPTD.<Xi%;^82JnLW=0Fto3f_r`YrJd.<n&LJVF)TV'=,(tR$2O^G2Wacp_AA)gohKIJmYh=Yh#bd[fOA&BMqn#4lne2u%BQsaVp"G9iXcN@1%kV-2HIA$/irq#3@q:XB!@l`tkF^ene`_*4O"=u-E@(20Q5;GFP/gWf3n-2[3XKH`HC:ZOL,ls:IX':u;%f1+-AQfaP6h%^247dY!%q+Z\"fh*s@HkhRFL%dB(Rm\-HWGRSW90.rZ?]j&CW;N[>:[O",0L'2tAXs#fZaW+0m6b`+@+s62N3s7Wen*(##Q0!j0MbT%rZCmp%ZTm$-4F2bS.:9>*dp)hYU?WRRZ&Pp/W)t@Cb@Q[oga/e+[3n/]"EuDJO^`$NlZMV9F*)^M'Ysp-SO%^&a"Y?D$JT6l2_/@qefV")%7/LqD1h#+ir>Lk3NRlj_7irF*3G6&ks2]Z3)8!ae_7PB==gU8/bCfo<#u&5!Sb:++&Rk\qOqTk9J-n<ke8hNt5"bO6IUA5k;Mqd>%*SV5`c:jTsPs&X:HK,*h%\TX)'#m-\16U%*)t!F7+t)Qt'8Y.;r?:*`g4>a4WX@;099fs^PQus:TWV\^@ru;a@O3`NO&(f@<1Apd%0D/oa=PNB</HP-0p#5`tNb@Vn;WWg81BSNP)Hc=PBW1\$m)VpVhS)i[Q#(D,FI&3t2HUV+&".Q!+ZYfC1Go[YK6nO1CFn4VNdL(U%<&KcC[.U+;U3cS9RF*^e*X8(2RGP"NZ^"#G1Vu>G*-J@WFhbq,7'6,:lIL`NS=DBB68b#s(0B\6DTO@g12!ja-]>So)MYq7%2=uJ%L_9d--3Rad<A-R"R]p&+(?G%"W?A,To\@3Z#jABS*m4BlFEhI\]qL"9cOHsuW]/H(I5&62Z?++)9%,(jl"mfMk]TfSlo][p'VDWo%&:@SC3O%%t?8!:dTBt5.UkiOdgS$5jQ"%"5N$:)@DCk5nOK'#G4r#B%'uI-[6RCkF[p>L:n:Xft7G_S@^<4]8_I4=Y$QT5lGoX&R%JaJ:GMt>DU<Da7RL8j\\@2D>.-e>o@?Xkjaf(p5*lU+0;%VKS7QEog`Q*>ObMC=r>M2q735EhKBr_m'i%3n5KQ6sc\LbQV:+a,S`%N?mu'#Qm`@Wo;5F=Ja8QV(HPtl@-aBj/EQHe@'1a`6bk\@'qRjB>m+Dk\jL48W$()"49<&*)2goFhbq,7&0E5lHtBii#g6Gf3G@g%>5r-bWb]Wb'[d49<ONN+h9hKIIH>B<*P"=CThe<?#L:<\h>KA$NNO@jT!saj9eLN.\]s<";73YrSNu-T0#4orD1js&+WJn(@-deX%(_6V,F$cUsKqB?-XRa*];L*ZWkmF11Uc7]nXR#)1HOi/XEo`?bj)B':_tFg$a?E9""&`,X2d0Q3m)-qBa*M+e1SuD^Xg^Uj/i;MI%E3Ana+GY01n-_tc_l'GN'7KD-IW,MR2Tlo/jbHG^ga;m7'E)nGF5')iI%h^I*k'>``TR$qfh^?2?[.;IR,#$mn\s\d6+JN#*++)R%+-;qr:%<q8pjnh<gDjRJNZSg7^J47;Vtg72j4auLG_R:S(;3H4`M`J3;8:j"?[R_Q&Ce9cnO9?X@lCfQ][0&1W7iat6ls?rT6A1*%oYR"IV/)XneHGW&RDEQQ`edX30SHr/5"le)\)8[]3<iQd!9Y1Y2R!?0B;sW#jq,$W)IMck9fsI[:nY8X/Ao%;;VQ2gIb.>5<M9=E%'(F#H&0+nh6QJPhQZLlF@L."QdkipgeHfC%n`YK)FbPbj'<bnm@L;4s*=LE52VCib:Pa/pD08Oa\t:\td+#XcH0R_cWNi7IWe)\3%@-\_jf8<NPmVB$nZ;d,2=Bj2O)T/kA[MrctdaWn"E@*+J]b0<pOH5MHms,lel\LJVaDiHFa%;<c3B)jXn&9dd&`cECO,5"JGJ4o;%`TKs'DZol<$1e"8fMEm)h5'^5MiX,=cTA>5r<[HWdi0Ss:.i1>\UGQ&g][7=MN=#:cOYN(_i8(<cl4Q#<a%UE9Z0r6=>gK!OlGCH%`I!9efNh&f=56@:Z'+,B;+Gb4Ojh(mi^SieOVZ7PcS@KQhB___MN<r8mh*T@V`o$p\<5c\-,oK9r>&@RgEcD\MiX,=cOYt>:tK7<%M]4637TsU?U`79i'_`FmmQmPTF57Erl<;)/YXj02,Y9A74:U"#auG(b0]G$c?r$Z66ts(EZ?U_tOi`8Y)l4BgVdhWYOH?o`eGnTc%@-@7RL7fiO0tW#(M7JQh?fTD<.gX?%;Wf^ZLlpCG-V#2`-1Bifqea39-0F7E\h0mV3,0)65'01/hcG-fR'+/!ARN?S-Ic7,+m]:T%VA8EFh9VIKW41VRh>8nNf3$KV?bisMVO9o$\Lf4Qe^e2`E5bS4#,Vd??UJ)sdC9h1!EG]g_<NQjBl9aBa@Z!<X(/Juj@5;nLEmtE%im1)T)a-A+H@4r18/k-<,l(P5o&6W?D'ZZSjPqE*LT.bj;<(-*O,"Vq>a]E'`JkWT$S=PA%C_<82em_&eG(`JmP\h8W:BCSj$V<"%gk]qp`lCE)%oko8UW/93*tL4m7'4Rj(cPoO4N.$QWgk"[DRB1@B^oNrQYsaO&`_mp`eUMb\e3slN/r`2+/1+M7Z89@4q;%lWX!Gf%[uoGj-b4R/J$/sh,oZNL[qC:s\u9VY:@G`:8M3<Dbom#HE.r,G,d?1e&dIJ=^5rY/D>VX]V]KuT40k)32,ROk:p+0@-Kr]T`7>Y?%hc9aE<"ggI!UU1R'E%K+fO\rO<1d_/_Z8shP-<4T^[l$!FrKEk!?h&E2!fBo$0?F.\fsJIZ2S0>6F3Ps71;_oBf&!Rm=6Gd#c-;3%Y94<dC0:a&ID3tR=N3NpJ4_R!!^1hH9FRKj$.1%3\ee$VE^)orlHsXIKgR=N_2[i\qi-r1R=U8oF#&KHeLSn"3+:GL9Au`/^9Xo'%eqdq.F:?C5'QV_=Q;Wl<l>.L-`Wd;?]?gPSbpAeg$#Q,E#?1r89@ciiY7Q.)]MPlici"dBBR8]e`4ZBr3B:`TqAlqkk?tgVE=sdc%cS9PJ(XW"Xq];;Y/plB240Z<ad8d:*Z:eAZ\[!&N#F$%(H]JgJ4(1B`r>^q\#W!].c8C:N$AKJi]Rb?[WlSAdnS#N9d20ojOWH?T%:2+m:Lqj*2[O5[7ShQce%pj9pHi02UUE)d,-he:M,8omWd>kChjQ)hVP03qKE(=oH:YQ"i;@.s,\DJX!9lU9QG.+)pFk56&3NeK\%\suaDlpB8;U5mnIY#HI%=+Jn9O"N6lo2=bh@;@_/'2p2o0mR.l$l;\YT)e8pajGcU:\SX`iu*ic0omqDjQ)ia!qdck.jI=5iNd.P%6u\X[>e[X/0HbKk<!dI-HK$FK'p>XNj+LuScL#6QHaW:>WHDREHnr`@*u(\k<L+MBQI<$$0k9g."`-3imb[e*Zk$hc_V!K=)Ntbm%f%[,n*u$^qB>-X2!C@*<3"F07l8k<OV)%i,rP6dO"5CX!K];QU5Z$K#rUad?l5*(0H`\UX2he#CheNMS>G-,kJbc>&V+@FL>FLZQ%]n)/L[?a;.c]7H.U[HkpA15MTEt`)'W)+e5F`EC;+.H@O'Q'%MR<b8Mh`250#5-_Oej#O+7mm`aWhpdR7#sjgiX#]"QBXo*.ti=1%3U0`8l[Fh57(m^`F74\Z4unuX;@N#+YEGj`Bo/FnY"C'JeufQB$Ad5d3YbKN#%/aHiUgeK<E]P]Hu10/V8>TDck!PAGfT/u5Si[1%#.Y@aDP[B_QQ"A#e!_-p?B=?89H8)W&o^E&n,k,XXP6+Ig2Jo[-oOH#/?"i9T'Y,%,fk-pFi!=a$(IMc;2j6.;!MMT?R7^t("J6N%!s:kZ)O1S?+<^qcpa@92"B-Jp"sIk&VGD+J(VVH-YhJh5!r>MN\OK%3OB3>bTc8bPb>m:;8Gfp\n&0MopM5]i6,S,<mDBr(3G3g7%D=rXp'f',0%5S/h3n3><D((OU'XP)oW]aK:Y0#%iJ9!RS/Z9RD&ttV^*"C-H.T"&s)HbON(MKJDE@?&Q=7rp11n_9V]=\8?8&K(7%+X,cl_LO2B\>ekHBFdju#1e+3?Xkj_hKg8bn&%uc&*@UTV`n("LHfqKF?m1\H!neN4utB0egkl-oa3`73!mI*UZ5DjW@X2OZ47Y]%?W)mT!,HN@&)-;YK7AYWC7QsAQDWpOoi&#6(J2#QfWB`#WqY8Ero;Rl.@U9#@HWg5Z7C2,/O2i;JDb#-+,Zb0@Rr4da"I_2J>A"D%qr!O-J?%r+3iLN&J^rTk)JWr[Pb!$>MXR0N8:>'S4.eeb%BEqQg$!]<16D%*J[PLLL0BYa%d::E[6pbkcYOi27&HTD[GR%:rE[P)%]XdkN%9+YT[T<3>[LiX#YQtS,TNgaoIrDD\SLQ+><Ru$58#H#KWZE@d&%BjKfDb!GULug0GTc'fMQ8?gB`;m\R*gWZYq#$+Ukbf3%e5aftX,kHLZb/QZb0E%@UmP&Y)-$8a&#:h%rMPAE*)G+7jA`O7+GkDijh-%6dLpV9nQr$qn)Z^3T26o0C2/L:b0)!7.E"[OM;-,@%)C2R6T1R,$!)V<+3"N]D"%bV=Qa[[odteKq5gIF>W]pmUpo5#A:)>J''7'`h^kri4=Ik_g;k3R:W1mj7.%ZcueUPYGCCR8HeJ;V9%Aq$a8[q2g4.Le\EJ6!U6&_2uRGi[qN$TZj^keHf=9=g(dk5:E^k_6X\@M-F\(gAhT5Fs9u2R$$8m7=<n@1N.*@Y7S);WC0Daf7[1%T37,j(<%W(I7JL]OorCE:Fm:,Lt0JH#X)9T0FMR:;rJ/i(W^RD&s%"mbOfSG8pAZU?fI56J5pSF_%$T@"QM\j&(MgB=Ilkeb&9Rq%Z1<6"%:WW([89rU8gcE][VdY,!tW:BdEY:]m&b5`#)9P&)R6,L\0B=`EpNJ*Q_b/JbPk-+r5uHQn5*/s)&j(Y5>50rb;om]q_UI$%^jKYHi*bYh1)%q8pc00WVm6MGMR-6Dms3<Fd;][?4X!g+-XDB3,=`Q'RlAjb6(%a_3'<-^b!r?UBXfi5gC'=Wjf7ATL0rUV/)18m%%2!oXO[\a`Wp75J"X=L:k(),$Pt,fh\=6"o>WbGcVQ(+CVPc[D!NK^Ja\]rIn2=pQ6P!Hha=b=C*Q0kOoR^qSMf&hV]kao<X]rX^%?f_9O+^MoaC<4!V2!W5*CekIkMJ?0,1\-Y>Kk*luK#Arc40$!FSh8%jc`l!ANc5:NF;eQoc"+:1[4M$koMkdJZsL*Z&10RKVb)_#%QkUIKp#/pA6H@6ClI3E/nmKD6SNSNkOdmoE\$C866aqnT4Gnil.XCu;#-f"J4qkaC.T08Kg"=7Yp*U)"hgd$6Q+1)nT!Bm"l4jlj%@H%OF<L1Ceq'fQW=e'FH=GYY/kmm+`eJYP.Z-5a&Znq7s;hM?:g*WVYY7hs<A&Z;$P8A5SJ6j^HYl()Tc0/`:b4iDAY[L4ad]'[-%I#cY"P+q<LUb'-<V:lH6=Fkf?8FhZMS6Y1_Q_l2$Q.77E[hTS5;DIPQp9c*9LL1dQmChG2O'lAt(Gr-n1kSJR+B8Zf7$>X"<6(u=%OOV$?2MlK-,%>>4-uUnlDRYsi&0U@#p^JD,8>`%'&sICB:J+MOW?#-_0oD3'!b,1L+Eq]f[RhKWE4WaTWOdc!#XUt8e!>S.VA]\#%PuMiRV<)bu/[=#L(J3S6;3J.jV(e=[\k-psP7O$dX>#6fA)X/_A;"7i=^I5dl4gq763ReUL(%1MU'`kj%hK=GfnhX&84^0d6*XI^%U@44[c7<D:I*#dfdBB?BS^4]]#U5'SW\P3o\Q!.&L8'.!EZM1f,jPg<$0X",`In?YSCP:V`@<20>#gCBl(U;`Qqj0%)3Jl;UOY&[%N0I2a'7J1M<0PH;8Zi?$;s12#FH'D]?P?Hl(C8OhN'U9cl%0SZDtU'0,!L`4][#`D/rcaDcf#MZALB%YM"Luqa"Zb^3`EGgPp06V%<&H0NK-t^L:*a'm=cjH2m@pRuV''N@nDU4*0*R#1QaTWL.G^f6fdT54X(7i)U#g%Ej(&.#PWUfEgafbQ54Lp@?6>AHNVg/.XfMSc%J1)IVPFSHm/uR'>'W6VSPlh;tDk%fbXUnji,CQ\(Q*PNCMVP?d7]rG#4Pktq=Loq>%Aki=+:+HI;;G3Nh2?R/&Wog^G+>/@<+i%_%8.LFOHqAYB<4r==1>2u$bg^_I-dbUQGl@[g5^=0sW;;(GbepNl/tA`[R2)]ZVs<PM3nUXt2(X$:bOKCrFprPdC+ohW]@c^0Ce?)Z%Jn<>`Mai[?LhJGG?3F'?l*oBAjE\/&`N*-1`WX^B+@'QdSl7n_Tr])0WT"4G@="rrWRuO>!e1@t_[&WiJZ69uK3Ec[;gVt38CnZf%II$X-eu;\#$+N5FnR`nW$-1@@btiUJ/Z)q]qj/Q$_W?'E.jJ*/c]6qm7*RuO5i_$4B(bd2I.ifr)b'I"Yo5m05aLV6,>0P[]cfTF%CH5Mi5o"jbhc(nGFlhO]>FN(<o+3O$4r9tkm>UD*,1^=&Z`#AKV*5rq*Q[IW0]oBZ%/qQ04[Me@:>p1*3P:.U*oj1C^dP4a,?GeI%=i@?3e@^[]![,Sk?XRtPPl8T]<Zk@/WUZ/u&&`GtjY_a2fTh0#PE^GS(Q1>ErUfNg=CmCcr32)+9#IK8*#4&3lgKi[3=d'W)=O/T%3DhHU?qe@u71!EPALAuU[7S325]F#Leat(3#K2N=TG37<(CO2[-a1)1eiQ`QJ2mi\]E2(?WI5!f4iTg"THg?ST8V!sT8H1d+9JJ;%+fV&.A.0!+S,$6CL',\ib(46\SqdcQRQ$M=9:hYghUG<]AQ"AtEN0KWp>f@Te?>J7arm0Pbp,Y@l8.^)"'-1K=e]]#b+*"+W)F-r%0M-D],-R^:X6;cW0NTC'mH.B;OQKN3T[""n!M2<DO#<ih$L6Y%7@bTDWr\&0Xk[[,Cs'YtL<8HfDg.QL0ug<MC7+WaKlT:U3E&J4%>7F6%;STioAGM7t<t.f-ZC/@?5Z1J0;8$_[eB+@i[>?`iX#;-WX#=CWiuX<B`,KQ)GLp@\"1-84+`%689dNI[ZY-@9>+*So5$"h_%-8Q-i40,8:bimHI9<0s,%eLS\1Hi.Edo^I!SEDVq@'Z2O)2@--Ri*S())ZHGbrd0*AmSoQR=US>-_$N@Md"VIAmjIP"XhG9@hRCF%g<AdT'%L3_2D[$_ibUM/OGnK`h.FY8#ZDU!1U+BBa_'\_HUDI&o6A!_V`$>4`l6&3`d/OmpbnTZ8BQBm1D:FK=A4,A(AafF49K%I%%n&!]cZ5>#ZC$3)3DL>GH:SFN>Kf?KQu$2m&dr8G(,H/q/rKX-V-+T]Mj]bEb0"2UjCU>RbWJ0tr+%NX9@>D(dXY#%\!V^q,?0R=%88raXR":(&\Qd:LYo.PeR"84:CpKGU.0^S^(,H3*k^0\(,p4F,Hlc34r*eU_#al*8I]/E[&!OuVV.uH=e?;m3>Pr"d"(B8D\!V_G%_HC$c#Y/-E^>CJRf)9JM@6&Qtm9QtY]>Y3&2oc)%CB2(B(@ql1SThr^`B7RD0b_ZPZC$1G?WIpu0Vp5+Ql0`i7P5-^#*qp*h-fA5%\MHA!7WJ0HK,HJHeuTe6LWm1Eb[W#CK:,@ZdS10_h'J9$N3u_?=uVg7+\kR2%;&F;G%NLsJHRV^fZ.N+j1]A9`*&>H@-0*#@Ic+>%Koj";:*),41.ep6CN6BgU'C2rUVY0oS%2.DR<$-1Q,*mQ(GcrQ5RJa)ROLp"+m,%-3s,D')X(f")g.CF_2S24/3lE.B(Ds"L;?RB%R-\?;"(CuAA2&(K'g!;W'?aC.Gs]*YHp@pPK,L@0-".K/k;c-^%3*;A+pN;MIP(h:M0Nbe]cZq>&80rMN\<C5307]^45:ZZ/-=r0%c7(D3irq"q`!rU.kQjI]/!o'@,L<GoENY0Q84Rt4CYM;.ZLR`=dXk?R?M^3aobC=k$RZV#+/%mnabhA7360'doq0`C_9tKJM2J5V%"Ta7Ck(2$Ql%GN8b\OSab7`#mKgC$VgV-TL;>M.t(<R=hX,$ti<9B>]$WdM@/';1MD=aLi/2._GU*<8e)u>ZfLK]mo0qRe1'O8OI%oK685X<,V&BPBI#466VS[8Z&uA;hb35WrUHI3[%9)^?3i6C])+XO5n,F6IW$(`I:$i*SakN9m,YYFuHM[THKje%6L!QS"V`NS7Z$%?F6_tiXu@HVL$aHkqR$nX0V0+$K:smG,a):W,1))&?@(lJaU))&K$gnf](o;6d1WfdVI^#0Hl]p+D0^u`Lp$f%8P)@VtWs$-\Rbs%No?F.M5H)qSPs&/b-^s'V(_H"q],P3PQhu0-0g/NbbAbCgf:Y9'`&NJ:,64!;5,-+S6`\u)4UAc&+H*,@R2$(fT!(>26Zt'".NC(%ia094Ch,g;*t)Ld6/F',%Mn,6Yh>EJ+k<9sn77S(+l\GHm"7@#a$W]K#<N=aBc,*S"]\6k*Z>FWLhb%D@R2'<1lWVl/BB'p/@pZA%GpnM]AjHM:/8/FN"ed5^Fu0uq]4Yi^TScl\N/\"kSgP3B`.EAtknktMc9aVl'Fn(i9$crFDlL(2);$`b+G>tj2fg+C9=B$'5Zg.8%f,P&H>^Vnu:do'3$k@s+/&nkh*2m?\#<F!Jc@J5sEhM2Jd"!#>nl?C+3X8"/eFD!I&;Ca^R0.`dN^at3WDau*r5=3P,l6%In.q@Y%"'$U-<C%N.!r]*B9GgS0(]ZK3cp.d;)H^K7BIK::!TA+9X;OjR<(8_L<4a`[A=^,Q9dc;GOS<e%`q0rrlkh&RKXo<Uc%%M,)D*EI%BWOd85\Co$$j4A9nspg,`(hT6*i_/U9c0cf+PM<>Q]mVjXPSmJ#=NXbc@J6f[UlicR>2i)1H#=L]sMg&i4JXZ[n%XiZDa9V&r;#O%)ce27fRWag1_OIgH6gjjBd=6od`(<N/A>/R+f[FWqF"np"Tksd0hq1`pkWG]9UldqKuW*EWJ$`kdKft"j%Jcd&dUl5homhdLjF(u%&84CV+OCIZ'4N.d-9hb<6elfh"TjhV3Vqrc+:p9T(OY6l[[go!+HU5<V8he6,S2>8M7R!34,ANRA>Us'YP9P)#k%q:LeUZF!fF#/%0G92K^+=#h8gMc&]LXF^-Wj-72&,89o"4]g)jdn\6\4=RL84.05kJS4>s61/M8(8CQS>/J-7O7)`<*<$*2Zg\+N*?>1BqCMQcVCC%pUiPga&=slCE\\S<1Ka.:Vf;d!h(8a(l0D17@]tY#!*aq)*SX,451iPpl8'@8T_R^K<,W)`'doEFi*CFi@^0Wb2S?h&aLoN^K*<2%%(P"LLjY@Ng81?#Ai2fHhEX9_]fPhgFYQ$/;VWHZ&1:j:mG+Fl9*ju$m/n(SkcorjU@/-^2g1j-Ooo"N1>T4BWN+E!?E)@e0UCsI%<HBZf[<GYaGb/>M2V\C%i2@V&%4noC_`@rRMcYnknsCae"g<ea&gpjN*c-`QA#onT3neEle,ds,n^:.s(aj63?=]nLb)[Y']@!CS%k3YZDV2o>>b0.%2$%qD@dC6(2/;iO<M'jm$g?LfNf#hNNj*:4j%j[&+..8TCHqFVh4?;gAYA,mlY`X-M4)m7UV@*Fq/OEJd2o/Tt%K8LBFI.G2$&qmFg$V=>iOc]r&VO=Pd5V88;r)3,HO/J-dM6\93N0IM%Kp?/O;^Mg/7#&+)NE-(>fla<fbQp'NH*(T#$"-+YM!?Ml%R;!D8+SJ/p_\<Q=8kIs^)BFtXg4S>j[h%K^O]bP2HVc&G#\9?V.[G+<q,N'EC1fNF`-YM!9?R$$*!s>q-PR[N7gVA^XHB!PQR>LU%%@Y`12'-%NZ7T=p1/3$rp,'0I]X]T)mB&LQ'fF(`En9sKYS-n+T1UO>N>K+i0H=T)3/+K`<CZD#Mt34cS]^76<C*A%l8W6NWD$Z8%JR]<c"JXm<F9Ym131FSJ<3?p"5EmGZ6N#hNYTTsEh*be*&;Tq)fI<EbKIeDA>fh`(Lk`d4Q9nKgN9WXpGVBkTLJpOUBM3=@C]#!*%>%joe]$8pO4gB2$+?o#=rQSIs47!If(bEjd\0Wl,G-6D`<"UeEf`Z#[VfeB/b\nr:#R3W7<WkaTAW]64,):'AS4On4oSaIiSXn-]%\3(F4<CTaqlbjA`)WI<!^0OZOP@P?MCF,tg68D0\V51g=7[:40U,F:E.2qU;HR=l9TIu('4H%)q@`NdPY3Qi5\giH&p/&WAL9O@q%(]j):^dt:&Od4Rh:,`i\44M5:V$oa8J^m&L&jZR3-5_D%$KY*8,no8-H7Fn&]Un'm`:Y@l)&&JK/U7dXLlBSO>X78:7bo0nLWiMq%HW!'Vgo>j$\6*%-jr<Vk%%?o75rf?O!dX<HZJ."!8fjs,((OA1ig0I?:,:kjQr]WISu`goY&G75q%2;0%)Gr0QCgIc57hC),R*2V%I%CCqDGSn!2j(F!e9T[\97_W7`c-UN$Il4=a2++rT2fu%*CR/FP*UJ]pkjo,/-UWr;DX.dQ@aZgl@tI(MMaf1bq54_iFgE+/SDg(%l]Tbb(/%NsN*sS%%&CpA$ts<^Lm'@?h?3)K'Jn7ZkDT_f,F5(L5m__o'07ec2R-`d:lFu_[AfN/:H4T>JtN,dkGOUmO]s5&600AO%GA<fc=?SYFDo!-D`,21]U0JjFfB?@&$`;",K$%Q`Y]S5]$`4c^#c8Hk:s'7rE[YLMV0/LPOK!."M;2h^Fl,Sh645bLhZOL5:.&)K%6PPuQB*(L+1i>]E'0tXFXR/R@Jd^W(q\J9#o['<!gS/K6*>9_X0ejX]."9]%@>'Q*e.S1<@q$Ru0eoopQs`QUPS%n0i-QWLA612u%o@5r:luu)[,"Z6cip@a*'6>:I.,ubi9"B9q0Y(q*FO()oXDpN_EO\b4.>!S:$0dJ,'h3mC&Fi`H00p_YaTlh.<:$-ujK"C7Cu%k2%07e6X?!7+=V2-7`r"?^>7/'>^>1?uX9"0nu=uEL@hCd$5\>C[T;Z_cdKXt(`=REP=+N`DBDhOMBPW0ramZbN^(sY(1&pRSU@CfBh%/bhd,#!+(*'q8d(dj`+^A.98MVZ\^*W/+1T$rJ=8dM4-]4EaO>Vb:'l5IIG$fUWYBpn3SC3@-qai`g.mM2E^>C/0V<0s@,\.')@O%>+?%<\0+W/,l85#a%"!'W_W2Z9<&Og6IJgt7U,qe.sm.u7WAdi_G;$=$q0))q`Ze&=E)u2`ekNh*i``b>">8Z!"ng?"?c9)Y=DG.%n;O7:P[5Q*!ONslL3fKpRW6[VSlo'g,dVqlj!6J>=U+5Ghe9e]0TFu>OCo^$+4cNd:8S<V*qB_56G/e.8n:dZ!MsK7g)J4=AfNH#%,Vp"Z+<K&V1T]'po1<PeJj@oI"-FIWo]QkqO;`q('*$sQ)Koi[<g+H'NA8N``5A!SOq4Ilf\thkl_+<529JfF1]g$72(#oAg*sai%KrWK"U,o:]N="i9A&;2YYU/T^Il>'nG%o^SVCD%@C7sa,k9u2</So#Z,.#]AS`Cs4RPZg%KEgF.@f)Z&%7FRr,?7>FPftjsWef.A%aH.;r-;oIeaHP7!1(+QBL6?BA/i8B`Mha%i1LRMJ?"O(5fD1LGW,5N]M1L70N9TZfJ<pPe1?=[BGs(]+``#;V"a-Mi852Yh(d\=e%4JoV@1e)k*',h*4hh4I,m'4.ARaAk!in#)8_tFB'-8b4WTR*49%GQKs-D=jP;6VZ0&AXXpi'S,N$f^Q,QC>&G:SDBpk5AG^e()`c%LX7/p8d'kU%??NI026+"N`h(UW3?#D'-R%O8:j5?phWddJglPc#IO8,+DljX>$QUi==Zg5L*D=^OV4D4a?7F'RJ@mPF9O1XQ3OWJ%TemmH[K82Y$)fM2SJJ"HYTElED8h-Jn>ed4GcS?'hat';po"i-*Sk`K3]VC)B!t:[kaVc[O7?!Gk=Ao'KQqD4@m<7[@Rb^^.-m\r%aN'8eA?m6?+9Wh*80<H2RKS&+%6,Ald@gFFU);oG8tPh]APL=$H%?<jq]c3.#k@B4A!PZt%2.J[1&WLSWJ*':?IXmn!MKUrNtI1&%IPh^L;7B>n/OS'/M.8k"6t]f^'+CF'XNEJ1?MNMnSVpb+_WV(M+ihC,>#/9G[Bf<WRRU.ab_(qrg^I)N1&f\\h8>lF%ERV,SAhL?%k2u,JN5O.8*+,T95cbrQ9Z,D&4q&%oE!DQ(4(Qj+6%Y5`q"b[>fis4oA8!Hi.A0r1`-RRN`EZOmTj\d<@cU7=!4\3Qdk#D;AB@D9%#>4I#4Hg<^BcRHs1CtTE!T>1E3l_n6H&pXe`^iLXX::/T'c+1YWc;lGZWhn+I?6GcM#GMBljOd']RT2oTfb]Hchds\B!m^!-9dYq%XWonRPgKXk($#@.mOD+8R%8U/A"m9K\R6TUH%&TO1$Fpd3J:`#VcdVca"jh$p2NdT!b*Q1p^(Y%2X=rBfT7[8bX)[<d^K;$JcVh`%]2:C\^OW/KkRG0qo=gm*i7r'SE`?J\UF(pmS2K^*i9/aF=\d%==@"KZR.ho^YArEbM!cpA22[9f`aE>YIEV9YR$#*=cYfgue"OkJ%!Xbn@bb4%.ktD_>-JIBtfq+R(750I$!+E$^lu'&_JN,60[=T6Wc,T.F@n5;^&0<>5EC&I)'$R_Oqgn8b$9\_H47dO+TlF[W0`$s1%[>tsK,[qf-LA>M_0-k%])O(hAC^V[F8jj``*r?ZXWXHqubP2[)^1>p?7=0R#GAl&oQaFSsee+S$<)>%WFUiu4W80eo&c`uWM*=8.%)HcWq.Kpq657\UA"=?g+Mq=\&nX-4h_Y@&*)%V4W2c-*AjKf\!*iJJeKN34EcSC%Wruq>&l&cWjPSg,0L_Qc)NFr7am&r+!$+?D<%mL^kq5a]bTmh(r%9:>LiX`O2*$i\%NQmRR&ACb'U"&_QWTfj3aSl#j,jL!%ZMsC@j@ppnbeRl0:kGOkfRh84:3Tk*4<eQSK@l"Uj%DoNZXc%sAV.FVls/\SmgF>MY+(&#A?*BK6XcDMu%E+"BFQE6K'PP]3573i"m1,cQb&qZjH$aLS:&/=03(R^m/RUm]'G=GI5k+.:3%F-1h`<jrhA\as],(d3h]Yo?uL;:B]`MfLR,mm]hECu124EBNicOd.U."*lJhSZN4Y:WFAD#J\:MRSA89.quG\$t@so5,.L7-3NHQ%DL2uk(-sB>p0pITOEE5%5hh2Q`k@2:ATP;nLhb&]_PY$1S/gtAHh$IJkZcFM3J!^/+u;c'4nc#A^iQK#orWK4`A:`GB<@01^,p))%1M0Y1o;O1L:jM?Y%,t[$'nhI36"%3HGp%6kh@#H>:MD+\[*DW8+H+Eh5Dk+7(dtm>-4PnAeGH0b&l0-V(nM+1#Y9lb_gl]P?8j5N%@]_himikC0T4>5//kk1D"*i-`J;8bA'DFV^j#lZ0_GOaW>%N.s/g3mr_oAUP;"B=T"(EK/R8!Irf8?A@i>F\CcmL0LaTNQOQr%:3%l@A>K8kYqA(PVtPeFs]?#qeF&q'dt7+Wr?*"(ZD0oKh;+(if2+e97[8(Pl^TSON.#-:D"!]Vel)*mTL4&UTqRBafoq$MF"0=F-Bo%WeWW26%\I5f;N7:IXX!ROdTC78MWG_pbgSu`#q#^iGi%/i8BNOBH/Y/&r+6uGh8dS.q"aqgpmMf+/.au[0^t(!3:bu([\GQTBSdR%3cQB91$#ju!d++4H)&.qm.AFASmVV>99_"nk8qWLL?9)1Fp`oj7>a<4TaB+FM$[,H)Qb[7aI5O3MZBLB08e"(rA6'R#\+EFBumNQ%ppDhJoX08fN,G+G]hG[2`mC7SN+F=<S:PdpT"!\JcB@2^>KRh966W&!EL&$65"08n=,nUVp';B7GkOR0'T%K-4d+?kiJP6]PB<AW%#T[hSk.7h/\Ghf%A]A&+6At`G%JdGp">e`O,5.DWY8AK#JOhZT7>j^=&4WM;H]$p.8HMsTE[4f]nJR9hf*]t?HE8F9=E'iC(^?cQ%.pPW!%D/VBU9S*.E5R?cF^^!g,afJh(1G=1I`b=M/R*fW"ULn&S5sRKCI-GTnfT?s5eI^&L-q[)4#:\?h@V#(YjHmk1_PU0DYaZ5%INXS_OrJ^Vqg-e%e>ae)+_aWP+dQ:g$tPe,]G3q0rLoHUK;\>D,%^P#7%N$<isP73KuFki(#W!VJm7c&TF0)b.PP^'c4>1\'q1MM%-HW>k'DtS)IjkKk$l>@Wgf[D)%L]/iWOX7j,?$G!298Xi@At8[Lb[nVr/\dI_g8BUceoh+%S8*FmkG409dZXW<YuNdCJBU$hPKS;%@4[rL`"l?r9d+"&dM$'fTs6?.W6-(3:")4j`FYnEk(t``l)f^,GRD*.;5**)s"JVaF1@INV6"?RdE9]!F9W%"=<T5oEI,p+T@(gn%k[YIVV9!Ol'6?V`QFq1[0QL,%$)U(nOQ;)!#Nk-lIVMH4\4kfO;M>4$`+c^rN%p/S@SfJW'1MU157i*9G?]P(C2NN_9:F)3qOZgf%O'^eTVkgld!u^-g0q!aC;OaZU4Zh;?n!.bVV>&cFE\YS3Ll>,B@<tOYWjQrQIZm[Hd![;06bA0"4_).SW,B,@Bmd87f!.YLb\&Vt%,ugTr9$<_N+=oQ=Q7.TML4R`e-,GB?^ss<G;o36BRbUV^bt42Ag#?bCMU,`YgO!B(fod0^J+bfFm$B^-?VF,4)#]JN1K!JK%h9Hu%l>+lud,Mpk1eidl<#?Ib^L5^'c<7BnZ\U<^UAc+e$?;Ps'MF,XKU`Yt]N0ss2P+@$]cPB0_5E4BKBl<Elr1;UEStDK.u+QDPf7j-%C89V2K<-1<>m"UQD4P^(E#28$qA%0",4^NC4i.YY86K"r:Z-.)K)HqbDT4FGFs=Sp"Zcr:S]IO+%m7SsRZXGmP"L7B`cc8CbKKr@%6FTO$']V@;.i0p,=JcQ!<3-h:;k34`2U?7`R*DX$Q,UsCV.PY&bF8bS0>jW`NOM`b-&GsFGQf56:;]o,d<36<)*E1=0r(fX3?3-S%iEQCdbP2t`56G=rP]X5,:$IQ?:hW5*4jVNqnQQda/:+$=cX;$\S-h[F572&_K\gFE&RKO<SJXB^!lBsoEC7n>5cC)+>[tX6GSbo"%!Yf<_g%/^tHK@=WN5'It8+n3?\kXpjq?atrH0CYQ\YgZ5,:TMcWPiQVaBRUAS$nj,5+`m6_sTKUV4@]KZ"e.iUX@OFI$J\,EZj\B%Cf!,C[^)"cOb=q.>gk)(`+mPUVi#'f('u:RQO(Ds5\U8-U/u(JAGP^n+m[s5=m6J9Ih?1\N_soPkhbZZOi/3+#&1FP,Pk?s(cI9=%`NqYs$`D`3HL[J8k(i74[R*3:(pZSj-3jV(L/_]P0I,8ECktPCcCVOq:aA-Eko#[CUmFMGq<4(gT*mR$$Z^FDeffPJ-!5"fZ!Gl!%F`qB/3K9eKAZ/0EX(Jf0F(7T9WR;:nK^G'o@`2le>F$_rJS_f_k#cA7(K&p[[O\djTH_E=Z!H-;6VFMeh16!C4(H-N).=V"[L5JC%9:bIE$Z[h:A%T_$AH7AM,&EbqJ7l:u2q6h7[Yl8JEUl#BRQHWA[YnV&f%Bet,hEWM[[WZlDH;-DLNYN(phgR^+\(Y,*LQWi^`)*!%Z1B9eHoGiSqjHoI4KfgE$K'*!amgmQWjd[UN48;P@sY!hV@!gAMn"33<<h20<f3U\[YsX?*+u_7ObrH8XKc&!\\pJ[/h!\:8BQ(;%L69BlF>8Z[bY/gQM"<AV=IkHuV=ddHjDR_9Cq.<'cYgVFFBSQH,6/Y2c'j8Gp39U[m9mNh8$m`aF?r+''sKDuHo:_Vl#pGgh$/#!%b>sLg\1YL\bF7ak?MCc#M<ed'+dmR+LF*AF`-$t@1leKL0LD5=0%`Trem'"",J/fuJtD$Un&BK313)-$26Mjl:rmj"?$qZTE@82!%0rlS&Cq%L,V^4@8E+dg@M3:^EKtXX'8]'447G::5QBg+]`<+)eW$iXklpiW4AkHHiEej?%e:U%<6?\<Na*ALPhk5C(jslQlN<$TS%I6X5i31Wbm_r#>WTFG!^^j46:qQBf,054WU>d8;`I(CBsrnQEu$q'Sl&aLh=RGg"0O`&gC=9:-EIZQrS?n.;)!Y0fTg[OaE&sE+O%,Qj@])m,uA+Uj`*P;F@,\mXmRcVmS7ZH,T%:K5>E&/8D,ee^lcg1X(SRZfR.jrGTogb)21ll_>==%Enj5@N7G>@JEt,5i_C;r<mR%=n*]n6dE'*]Io'lFI\@Ec5KSuJaa'W$!NiT=[ad\;`&90cUj9>>ndR"4QbG)dKogqU,-OZ3+c;[B7ZIo=!3_(Z'l;'>1@9>!9?1S%9^@?L8W#l&2Rc?e@q9S[C8+e08oc2].^1c("/2g[3:j\2'JOV[-S=,6aGR8Wbk)SVGU@\hj7%RtS@iC$:qk'"n7X_eGX!;SDJ3X>%O>d#MW6pYB\MueU)9C^6i!1B,`1#^>$WAN,I:8$j7(9K;a,`?Jj>X5ZS];IURriI2@uKj:4kh=ZSABg9r+_Kp%`RWMn4keQ@_65Q%'3%PHT\RoLUtdV]9G/pL/---7F@<(189.]<'LYtp_55j@Ku-PVZBB;s\$Bi-WiQKGh*G6;S<ar;3?ojtI8(l[i<s>?Es>69]&>\&%iqAKed_cBMdHVR)UlppQ7+kD"IuOjVOY)qH?A+,/_"[Q@Eo_;1S1R.E[ZVW%"&[@.UgBq"BT-aXb(d;`D.7f"[kQK&7srK9S1lHG%ICA3]e#'"UOpVhia>,0"<P:MY(\KqEGXauH&H4*N`>$*lE;4r,.R]TFMNRt<?nc4bo-@Jb6!5q:9UJN\6"64A(Sr:4HEqMHZ&0#O%Q2.om_F\3K(4MP0X8n>rlp>G4"6#(HV*gBsG\A]]8U_J[-u;WcSe^'!j?"PQ'G35NeLJU<<06dP`k`Kfc&UuBUgNUP(^ZO_?t8a\%oa%&jF]$bgG=Y,UDOi!tLHDWD(bgoi^<l\)Ri#qp!Q*l_g6iGeP63!b8>i]W^P1t\P?p!?A1_^S>stX=c*TgY]B)2pZHU=;NG2$J%h.K2$":>^T0JQ_2eO`CLLFCe^XO5@V,UE@(/UfI7=0.q@UD9TR@p'E"RsSO4.a+F"Qn(XZfq+Q807[RBQUNOdX.Q3ALb&s..(n(q%S4iFA6QdN`D-C"1h@hH@^:KrJhlp>JX=@9+nhdjIVBQ+7Z.?.jMF[aT@3DYu8a47V2aZsR5XuSaD]0/&b#L_R%5EUgO0>*p\mkAm%D*r1`E5i]hC`DZeN+e'"$%onook:^C-0/]dcEs@GWDA7]78p[Tn>AH,e(IYA^-4;a8/iGq35.e4-.]X0!_n.3nj(41Ak[qD>&$uX%Y\_3HYY`l<2Ektb6r,I.2fS<fOR+.Edod6#PU784EQZlYZ`t1H(RHI_)b0N.C"mi>A,FPRJ9&oS=dd!;.]$^R>aB27/b&g7$CbN-%,=n)0@7^K9i'aU1,OQLqLAGLVHA0AL=D#BM5ZnaH@>r!1"JdN9_F4/H+A(!n?).Cneb7?LdatS>_7uuQ0NeDF5'?g0?a>qO6mQ%1%7o2S&Bte[hc2^\JHJ[aMVM^U1esaPPET.?oD@e!BX:cD,<%jsi/rTjCUA^5[<l`?LgeOGNp+2<HU&[WAFGmc0D30n-/jNW#2qKop%jH;s]V5V=L-rJ.JcbgL$lZa[j3LZ\m88X9Lj36fVZUL)G4.T>=dUFBTTfZ#*3qVJr`<L7P1"JLr/GuP"Q.ENh&GSQb:QUA_@(&J*%mXS4]+<`D\:/OM&Lg8(_1$=QkbSa:+XA+!^2OH:5[$cnqA,rTM(KBNXRJ!RQM9lOIa>uhJ_WHZIS.Oq[p1=c<&uWGj=;:eeI`@P\%4,C+oD+Q4"d03P]_.NEoC0Nmd!g-pFG!ACB3]s429H,s8^4E5(-6eJJ&CqHt@;7q:T:=A5PX8Kh;\WSV)CWe[WG2hJ4<ri`R38&Q%r>K1e$kOj0;g8W6Z$\'*(#@!spE_8SU>*.``]T)qP[A(>_ML<72GjOYiaCTHo<=WD1pBU9O%Y*:"'%LP1CYV6[PCi<VN1gPNB#9t%E[B;da-\;\Au&?qa!U*8QqT!a%eNjKM6LP%8efQ=/R"U+.NTiF;DE:M0X#gDYui*#3,j]XZfB(naOj[LW'''-J\ZFUD$8f!9_k=_%W0Njnnr$Q?i0!72l282(K03a>aJ0qWF0q'b@JMjs+qKk`XE9O/A+TXm*m@f2G-0FTCaOi_f-\c15i>GL4R1q4JlN:Y5GBV0NYdUD%_*"+!CD@7s"Mc<L&T1XY`8-0Z!Yppr$$)9WGO%*/#7,`d'9]0`45Oc*U^kV9VupkLWrkh;Q!Fu!`:F,r6d1HgFhgUF>q6(G,9')0%Go=oS#%jf*I`0SdgA2tY>?PlPIL/>b]I""WliNQG%L6,aEf:l+pge+ZTLc1`la#<_6Dk,b7=[)+\Kgc1O+:XjjWREFUGo<j.)n7I%O?2&En%GZ7^3f=3`&Ls:Vd>%MZbI15><pDc3VD4&Nk+f;8q\_/(O=1dV.T5NcRS^bR\pN_K@?hUm!9(9$Jc1ZT6!igoM"An]Tj6*%/(AM\93?kaMhE]mId>Q$+jC(L>a6#QKo-4Y>WYt+UTS@5^*d%63`!?,XDO5$>8S%qL]g,e!@Y%FPZm0j@!-&o8Y)jr&?3[=[?;"+%K7tIg!1$h"WfEQZY9>h2j-*sG\ED:%6$UUD6sP0se6G91<joU4&%6[DrkW>KSM5$ul284h/<h]^X]S@!8<c\ede*q:UA^Z)9iqsL%L+S*'ida,lLiY*ePN3cPH#ILH\1k/d;V-Y0F>.^$,aPk`1A\5(A5U@^K1;"+X-HRs?eRn(f9<KF`ubs\,RH#(+\jN::RI9LmFPI7%K,(Mp64\J6V)&.MNXVmra,[/Laa0@c!_sd7d46E;8fJtD,-ktJG`&e%oFR=]3aBu'To`jV7%31,?#JFC@+D%1$<`5;;Ys8rTI'd"%#l/=GZ,gNr,+C"FXbQp"l2\"mS:N#X'nU"tF>tBjEQDr5H:dkHoBWqiqGO\`I<7#DjWs,^j$6I<ed\C`]oA<^YtCE%j(6j+!X+NZ%k@2.!B/&mi,/q#o!'0#4";XnP9HbtHPj\dG_f.d[k6`tKI>da9>EA>=l6:&-]jm7:mjg@hp4HA9,Wk"'Q_k;0Y,j,p1uo%=K%c"A%77Cpr\Ic=l<5'cA69o`e@<r.3H4h`e"dabDH4M<lgc/kB-cR%oO\rjo_OrS[d4ffuKuPMj,"jWK4cT',rWPa;Z4+#RDNZDE>8^mj%*4`VE=A[$qDn%!S["9FhbZH#_D<W@o)n%-V7,?9H@%8Xkl#[OH$\[pnE_A%n*rJDgd$T?>d:^CANnGt7lYX3lSV?f*S=b\;o-!B%%=q$>^qdtg%V\>R905n+MSn0'1.pQK0q3@-9`C`!:R4$S0!62)>p;Cb\i&$h=jR?d4$[STP"UdgGh.FqFII=>I0K9ks)Y1KM^M]c.%bBQuDG'8>3W[:d$K`_RERtC.+-=W@&@s%WJ3Wct\m'DtiYR0htO?hZ$9Tl:+&Bcsu%`.a`\5?GZ4m?3H)hZr+EEb+t!ei!d)k!'>%3KZ5*4bD7\KC4Ve(>2'[W%3LC;)hQfFqVpJ>Jfps2?H1`*9O/h<fDgb$hj`N1oP\qM)chhY9ko\@?Jc.&I"7g)NaX]:<sgK3p,8<%^`u=3KqgRD-,k-k(u5aB^I2DUW$gLO&-epLW/6::J4bYjnhc>8dL+*\Ts2-5@f'2?=Pt>_F-k5hoA.>X)Yq']WleHsb@mX-FlSBr%8Wj&UN+#PI,S7OP=R%fO1c::0Vh\061:Qul)c@mr;0QX]_5&V'%JD#f$&k=uGo1>l3P1$IOujQaGN0N;<>ETL'a)/E65)IC7`Pdg%V?0p\;0++%$J]^oE&oh%T(Ub#Hq[m92iH0`jU?aY1MS]O+MQ6f7?sC'eU_^:;V84p;pknnB?ickYS@53E.+&5/uerk/=2GkWCU'4%!OeqNrX;3'W+5(ROh<OObhZiL#EBRN8D.V%Ch+kOYirDI8d5oY'Wc5.0JNKC;H'^b)@WK/PD!k$CD-,L[bE(a&\Tc$I#*!br2.G,%i]X&+nEaY>$"6Gp`B-Eb]U_0kN%;5S'(6)C$u060nW$^+(<l.)*AqAKZBKN'A=HdrG;+Hu!):&BZD.f2$$VCo`KbCtE8^,`?+:!q%rL@0'cU\`;g$;pkPAni1gG"h1a#"YI-fLYF>LjtQ1C>q'3!o>\2d$U#>plsrZq9-7]qf4(a&>ff<8KsQ@kP+eDUL\Sn=H8J3s*0!%Ej/,ZbbZ9m%dBS8SM3]\7YSiEM>,fuJgT=dFdorZG"NSTI!CJA*1LS37<b;QOE-l1Hfj-=o/"#eZV1Eaj2bU+e4m_kdl`1U^a"Nh%qFSDF@#4OeWH:W\]Zd'BpOdnBV)ua\"LjQ^/:"nH8\-]e=\jBTG=4#X3_=PJr,IRWFGJ,5gHc#)2KtbXhG(RogfNjtr"Q<j#_%s)%g$:NIPB>,W0?WP-4nB9f1J)d5X5TV@1ZU@?*U=<f6/&2H?q''Gp;ECT_n[3!]1C-hYREt5g(hVaj];#*1Y+YM#r[amb".B1Tc!+1%1"ljoK1.\7d/tsAT$ibF&p5B=)*MYkQ_6'*);TIl>UVK?Cd5/WW<X5.Np[rjDA+n@HQIq&A/8LD0I%&W+N:>&cS0!iZKGMa?$)I8%1oNl,_BjaejHo`ZAh9&)Hl:!Sqmr.M5D2WNC3)oS7;:@e6^11/19fu3(VdYMp%s^)ZAk0k9-g58Qs<(4eSMRRUm;4SLD_T5Vm.p"%9c</mVe0,;<I/Q5Ud^tYb7N,7kJMEOB#S,7e,/t;1N6$&PRjrj!OA*T(l)l-YAo+s":r8$3$mb!;G-e%$V(q9Bm-oJ\'EYQ@i$<Z%>-:N_$8NaO;OTebaR>qP19oATPiD6c-KOfT8TF,SJ^r/8'N`f-<4m(9R>Z$2]u?&;psr6W(jf^<Qo/K'47AHXF8uL7E(XtoK_gGN%#?HF1;9BSl@4<N'3N:uN0V0>9>`t!G1O0YA[qpsST`R'DT`?e^T!tSeLNO>&dbKbh(:@1JT62J'8g&W1BHmg)A[05IZm/$c2d_lH%FEPOCiOQVQ1$\*n,ZrSfGnRQ&XQU$CMCe5\aeok[-GB!@']Vb&+E-p9Q?,-QnZh((ipALV]P*"k2&(HHj'A%P&_b'hD-?G'\L"ZS%jQVe+SBu-01D$C_3ldTc)DPR?Wagsa%l'e`]j"A)3,rVI2/8r#`LIOC<Ap;$?<YjAe(Qj'/'FTG%S`27\(8oe&%5\`D_i)7=I3Z`%48**K8/CL$7bc-"+hPUaj944E]lhu]>&65>i15_'!N('4kkV8hp$'ma+OY[3euPQj3hM)Xb-2VVka6o6Xe'&E^_60(O2;Tf8G%k+%Jlhgelc3`jN5o]2?AkaooE5`9Vf>,XYjZTnX\gtr?d\om7bLJA;#2N2TZ2/VD-]+3bE=.tR%+X$/b$`h(9<QF9Emiu98c6t`UWVb%f'BGX3*0V/-`_GG2>bBr%;[%COCPYKM:47?TntO4b&/?G+/729&5KkR[?`ZB2e3IDW[2Gn&5A`2iflkB/4m)][M0Nt9@7h`U:tk(%'JAi7EH*1Sf1W=.IVq\]=O%nDTr0TQW*<YMPK.pj$[#=oAO7A'&gWQ&[<Qe$Efi0Sah1U-/ipks$;rp$]*h12]]Jc$X6CK7-$<l:%3F[u[,^M@)m7t4MEk=G4!VeCM[FpHR\60u$*S#h2k*T7Z(4i;I=B9.?0<=nAA7'm6+5!cuDLG!QE%m22ZWobYVJR-C%>XntB$&SZ%J)XN7S75A::_Sndo7um"@9r]3Ub)=+?2Fh8AMI3^#"%`6WSbM$+hIMU9f]Hd]D;s^i83`jrH=!6o$Im=)bBB/nLPR>N)ZmNoP_dn%f%Y2)khdDM2o!g\r:@1r@SQ<_LNWQB_GpO^,20!\hj$?IB90(MJE21FVLAUZ'g`XN!)2OFZu<uMKuM;4JRUIq;)761&oZ@7S^Xll%?2"QOFUUiEFZkhb/)S-!eBNq$n8bKq=2+L-+0%97Q=H:^Dg%U9P"kVhi$9U=okM^>?gJa\c@r/Sgn.aA0#si9"!M<GFDk!@g`bNr%Dpi*.;0A6MS&_8&mQFuapHI@Xdg#B$33jme]0_3q[WL?[Wt$M@!="PI"fLWr@sm.A<F%G2(KYXd[:`(''p?L*feN>?Q0&=KpQr5Z%k,;id0*<Ur;7EN<S_f0DLV?b<&.%oiHZu"&Uc.5SSNC8/F<T%+Z@[t(hKI-%(?M@L"8Co"[1](t$;Zm,l:U/,=95H<UDT/)NiCD\%+\Age_J:/".W!In&@Yub_llYKJJH:bpWSG>AGp._gAAu\MNPI3!q(unk[7l4B5++kMR]]L`jT0Y-e1Vu1T"ik%M61dQ0&36*!^$Y%jTW/Z5&67G5#p;kbT\?d*"Jch%5G;1((#_!@(bcYE>R7r]N!14Miq^7'9XWZ7HR+F/28N4"dur^X5B,qC64+jS0(!i/uQ1Lg5_eq%oK8_c]^jY6Ngq04,Qp=r`IhPmTL,)T[5LFZiMhLR1+e'6^-(W*8H&j%LffKC=s3nM!q\?iq'(SX)_PW^bB:EmSfb>qrIGP&XQV\Z%_Vl]e`f6FqXuG/.oG,F<=&f`4\rjJH\'PCP?NDKtIMY^cEBL,Kh?`SB&IjJ^Yb@K2R'u('T$g\jn/e5OI0CHD;1&-H7hXABaRka3%]Nm1_TdFf"B9L1_S;6bKknQZh"d'coqML3ret(5jJE<_LZ(cY7,8G]TO<]i.0$uMVN_PsBn,B]1%osE,*:oAgjpGl"MSgStDbk+N%-a):(f=`Co&@"*hY;kAh>0?aSc6P5N72eK].9(kgdOp(?Cqh?1!+CT%T"qTt1sKOI1`9h=8J=Rjn+F&NWE57013HjG`A+l?5)opd%O6@Rk7f#MJ?c!,pP,A5/6t;V]4HM;')3aTOQJ*<!/DSmr/o"2nPETF3h'T!b%:4Y?*=dcLE%FO'3#ApXW&6]s'8DF.4Y>!2A_k9e%pe.&[L>XF%XB!'\\;9Yd;nM1t89*1IUip'gn"Wg%8bk=K!2fY)58>T'g[0^i*I230GBo:1LS"7W#NX020FJZ@Rh<>LI>tLH-]en;%CCuEE24V55BuWs=DE_H=76j1=$]c#9@V@4Vh$h51\eg#'B_I*g4'iLtJnORfo^N\,,$?^)A(qAWID2p[=YH@FA2UfcQ0;k6[j(*a%W<Wpt<9j9OP\W83o16k?V9gV%,DeoEY.:aLA?kVl')#</K#HFOE%4giQ97=*VsnMWV2TBb\N&gFi^CHAR_K))'@;`6D;%5hD0nTk%Y^!?]LdY`#S]7/IPCkoBdE<]!ABX&b:%]bI3P34KR?l`Y+#1kPAWqTH)o*=I4]>lq8idW/"AZ<sC1g\Dpa)]W[Cd4e`HdUa=ighu%OqSJ)9";O3Qk?77IZ:$0&Uq3V.:2WTKSaE-9^77!Ps)<b3)X`;GORZD"R5pjP4]fFJ@npAT'H'*]"XNq#=qlI*?_B(Tj1sr<qAX#%+EDB>3sAh+[ff?+M!9X7DBh*b(K"9ZJT!HUW$u[<Tqc#_4A#2o^m0jbd`HN#=k[&tm%mFrb+!)g'CSs@lK?,4c'DXO[fs6R@Mt<\%]U'KmOIIl';;T*53ufrRmM9kbEGK]6ZI@r]dGoV[b,E>d%Qb&Sgl9RsE9[[joo[mX,$&L/oE,Rt2G6kQh>=>+)U2d@H55HX]iM,Y%)Y]8.n3uUPapqq#6>A%W%L3VWMdn>9AS=R(U278JQD]s\I#1E%M9$u:#84*Y8onIk%&W!&Rr^.Tp0oi)T7J,O`Tcmp]s3sb[Q1jc%<O<&JKZ3;SH&5o8]L\//.VN^LJcc2*?<!"A6pN#^KZ"\)ATYaj--aViaYP*K*E,`N2GY)h@l-60#8Cj>=(nmG:2XG)Z.(m`T[_19%:JB9$\$IG/69brlIO_bb#qVQoHn`0F/;*"?3Y[jVi$YP2O#u*A)`nC@E>/27OcXc9E'jkUR[5Eqg"m#cE_lJ%:!".%\@<D7+:q#n%8cVd$7%=UWnA`A9?;J]d)"KlB0&f?/"Sf!/KMk=s;p:&U#d#`u7*;k^)2q&_e,(@qmnn:,Oscs16]h!(oti>Tc@0Sb:X[DmU9_.=%;jq^poUIIX$%6^s=TD^V63Fk,6jG:2\Y,OCe0Gc#(5-[$8<dL%Gu([jJase";q%NB-T[>GC.[^gEd1Fl2ct&(@nAjZi\"qfd7GVC%!d_a\\+WL([0ZcO4cKG.9?^gE7D.0gF4?K6nfhY\piRYQTUKJNifXuUa2fn#@ar(RYUld_0VauLY-FQ-b;]jL17t$&8A,4`NP/F"%'b^_qBO2[f."UAXRA,R%,HTXoY6ic4'#OB3H#o,V_?'3c@>8!CgFBUXLd=nJ`0Bl(36==G#u3'#_t?HKRGd,jR:mD3!-_BTcQnW^%ZbGS.?=Y^si#&NZUm"\H[N\V<632@+:WAo2qi^SZ6>h_mZ84gggG7nk[Y@^.[G5AJ\BK,"m&8pi#VC@J9ef#D76m"j_"YOTk'Ec)%'K]b79N.O-@0Z"eb.]QU(5[JrAqEclh$1M6?6GgIVd@"=>)(73dSk&nb2f!^MRE]p@&F]59bE?b'h#AtZ"S8$Y4eU;^KbX&BtLkl%(lNd85,fAD7MdjVW`nK./g*+_l!G^[%NE;=)Q>=m.L2,@)6=-;@[Wr:TcN2NB'>+Tj#fJ?(lGkYrJCZO^j$_&$JSJHjNp@If)g+\%(52t=oM?7.M!\"N:I3P5Lka&Mr%(V"PN's2kltYQ-CfMe8TLZ%YelFBD&6T?1a7"()o`E-?.VD(01WgMWZ`K/lSNf[2jThb=mF(<%TdA8F\&.^k_bsd<4elS%fF4$DbU3Rj?JTWoN[8>dpcP`b@MrY"V.1g%#ta,PP4q!a((fI+=XGPt.KP^,HRu3L.k<)NR=dQ!31r[?%aCWUB7_b@Mf+F9m/8WlkOa)i36%C8l?OE5>_s3N:`fUVD1R$V"3e?hE9KJuP$.8!Z/2Vu\#U=9L4iMBV6'8'5R,q?pq-Yq^beaC>%jE`TYo/8N`CO8^JV^O)]F!J%YGF*t';,QO]rA])&8-(dBHsZDt>p;:S?:lmXF_L9&Q[1S)R1a2\Y)F2g'RN1';bXA_AkPVk(ilMX%2l1GqERfhb3sJ[=L)k1E$hV)jd1-+LdZ7'toe=N4=/;Y[/^AAGN)0`oC5Ui7AhFKne$;<;Z,NF$0EIdT"n=aSX?*t8B@L$QLYA^I%^hmPL'%t-!&Buc[8IJ$S1ht3qD;cmR:3/6a%W0Ho1^Xen-eSBSJ:\'5(6-b9iUWQ_M+,PRhX_eH!cD`&.G\H1d.,bSOk($If8;OZ%/BX?3mdm$Dk2402%HVtN7%tea\@L`>M#qO"/GL!;!mOuq,t9-eFRte3-]oh$'m,Y^=>]ki;CdZ3!\g4nPO/s=_XO]V,AE8gV7V@`%,RX/Z)Upn_AO]iKb.q1+$?R5j`==.+Km%9GBsA;-!`_^raX%LP0lDoZd3QY`-F$4aF!(gND=ZtkV('>7&;AUMV+^2<(3:pbaqfd7%6f$u%#V@/76alf8nj$g#\TE9iQ_XeZ?u=Y+2%Be5SbQ]!*"(bYW/rS@AO]iCb.pIdb)An3$=lTPPYF0iJ^rCJ7Tpc=X@B1ag#>h1%kg$PM02NkI@JY@Td]r&DU_E`L>&qD&VIT62=tJrXYHtI'DctsC_CVQlGH^mTBq_6V]fol\]folL]hZ^./YjF+.k04e(mV\a6.p"`%dBc<7i\Dh,!N?46Wk7=aC.</l.^`YtFg'8&X9%8(]ajn'o4!(r8gMApYKoa\YHKXkf,7DuW:`aV3fp#n$dH?p/8G\6ENaG)[/>'X%f?4jrVSpaNFnO6Cs#L4dNRr#6s#NNR^$K%pYCijocl2n+(,JqUO7%/9OTpGpH[SAPH[T;H]oL.Pj3ufL/?9]>7Vl#(-^;lh?8R/8%]?]r54FWoc-u&417m]:AC#4!R8#,H0ms<ACm=og*#O4X(c+?0$iE[O-o<(GLBd-l*9*jaSr4RC-\PJ_f'IrdG;EmSc6:H]E`U\p$%b\Ri68<IrpFftV<LG!f6]#RZndBl^.I&NJ`O^[N[T9/JGT<R`g?XZb2QS&Ej\IO:HkU5Q)B/0CO"Aa*%=6&PeY;hFP#I$%6-e]rQ%ip?N@&6ljK:R65`W)<0O>mHZ2otf+hmTBWW/Rj%X4Yo$$S<!Au4A*D(1l(kWq-MRl')L24o;qq/qURC9RFu]"\'@"cZD/$CJdS_.%%DTG\`)[uJB@#kp>,Y@@=Ys0l\^l?$HGmq5%a96i,WS.U/>(;l!@_jlK$i2=B,sFnS<b<0cT8EKc)D8p3\.u[\+6W,#)6/eeW$:\%h7M:/"\5\_L;nXVVpSsLaJ!DDXCL.4XTR9>lS&?C"Jp@o+_kIj7QAsHT_[,"Ui(<g^KrG>Lg0gCEcm!MZQ`@.r9@,/P%L5@?QC1I%;74oWc3\Cc6N-0_2Z2j1FXpWWrT]JKiYQ<XoqH*cZX]R!aMa\rIe>J,Tu=,uOPs7_R/5@LLl;+I`,%c`bo,@XlWAA+_)#O0dkoJH%`+@4l=Y3WM*U=i@e;gcoWR?C"eZjQW^MB#940TR.MRi7J+"3sSero@Kook"@/NO2+djf[k8RP!J[tL5qefr[1+^.De7'6+glP@PK%UC"fWS"Q#[L*a33O)BPo<_ZWn?g&cBG[n-HV@b`pA-JsCiKr!2j*=b-3=2W:T,aY!BFP=3CVlWAUVnaE3NnYh?u#@Kd7MZ3P@[i9%*]Gtk2[@6I"7Kjkdkaa.aBI+cDg[J.D,hqaWS^dX:'+"eCU<4MJ5W`_V(/S'"?g?J^$$`G&Cd.]d7GIW`SRrbUc3Ufdo:E%fVmfK%dl`g>*H[5cb7u;oB^5ft36t,]_-@G&K!2.KQs@Nh<Lrb5f%C+%8LW/squj,_3?c*$jFm2fWYHl.r73]#Y?%1si`i*BXZ?cI)5siJ%TYO]4O*Y]gWfu<5.+N2]$uB#PQn!_MmEW\*Q,"iVR_(()0s#]QWZ1MN(,bbOMiEt$PMYADWh`WBM=aYtEb7T&$;O^,.l^s@OGcX[%l6.')]&6eHBW4&7N[EKf$RS%_*H!/*8OD,*JI#Dt`J*t`HIA`l-UFCSCG^cHSHPf%3ikA6;NDa4.Ha#R,#p!<W0\6(@4Ydd`3pKe%$4qSX1[_WM+ErsqHnAA6PYO,hOcEet%sA1tFDN9,UXe5I_e.m^bofh9P@n3lqOM:$q)RV5Mb\j1ae=.1Wfpsd&fdifVA7OYULOs[%FA+$HNJCOAL!$.;k]mer<1RPi,u,[D.Q1!Mlg)8U-MiT\Q55314XH-eU1G^gX(0S00Nr\KZUFG*Y<#7P09K[HF`N0mL-Dh-*]#/(%JZENb#q'j\HF+ZX7NT'fb-e#FOp<8TU;b3<4S4*B'mVWP,)%Z%L54_aiZHsqZ5gW'UgD#/13',.Qnm7-*T=)!o[H;\]A#ili@Y[r%XseJZkl(K'PP*6afJ,Lu*<2f5Dil0*7>P>3rfO/aN3&^)#2cNCmD=I0+!&c8)*M"&<AVqJ6YVtJ$R22TVBP[u1Y2oH)BM,9'9ZPB%MNM^.nlC=ZY@<Oc=,nn=IOfekmAFms?iTT>4"n6cFQq4<^]+5p#C!o]iRZ788)N5&qZ#A6rq`ObIfAa#herEks)S&9SXXhQqt\O^%j1G?jq1!qE=5)]$/m\@poqVO/(1T?`~>%AI9_PrivateDataEnd